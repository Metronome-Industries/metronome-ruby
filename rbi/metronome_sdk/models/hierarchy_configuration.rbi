# typed: strong

module MetronomeSDK
  module Models
    # Either a **parent** configuration with a list of children or a **child**
    # configuration with a single parent.
    module HierarchyConfiguration
      extend MetronomeSDK::Internal::Type::Union

      Variants =
        T.type_alias do
          T.any(
            MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration,
            MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration
          )
        end

      class ParentHierarchyConfiguration < MetronomeSDK::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration,
              MetronomeSDK::Internal::AnyHash
            )
          end

        # List of contracts that belong to this parent.
        sig do
          returns(
            T::Array[
              MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::Child
            ]
          )
        end
        attr_accessor :children

        sig do
          returns(
            T.nilable(
              MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior
            )
          )
        end
        attr_reader :parent_behavior

        sig do
          params(
            parent_behavior:
              MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::OrHash
          ).void
        end
        attr_writer :parent_behavior

        sig do
          params(
            children:
              T::Array[
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::Child::OrHash
              ],
            parent_behavior:
              MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::OrHash
          ).returns(T.attached_class)
        end
        def self.new(
          # List of contracts that belong to this parent.
          children:,
          parent_behavior: nil
        )
        end

        sig do
          override.returns(
            {
              children:
                T::Array[
                  MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::Child
                ],
              parent_behavior:
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior
            }
          )
        end
        def to_hash
        end

        class Child < MetronomeSDK::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::Child,
                MetronomeSDK::Internal::AnyHash
              )
            end

          sig { returns(String) }
          attr_accessor :contract_id

          sig { returns(String) }
          attr_accessor :customer_id

          sig do
            params(contract_id: String, customer_id: String).returns(
              T.attached_class
            )
          end
          def self.new(contract_id:, customer_id:)
          end

          sig { override.returns({ contract_id: String, customer_id: String }) }
          def to_hash
          end
        end

        class ParentBehavior < MetronomeSDK::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior,
                MetronomeSDK::Internal::AnyHash
              )
            end

          # Indicates the desired behavior of consolidated invoices generated by the parent
          # in a customer hierarchy **CONCATENATE**: Statements on the invoices of child
          # customers will be appended to the consolidated invoice **NONE**: Do not generate
          # consolidated invoices
          sig do
            returns(
              T.nilable(
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::InvoiceConsolidationType::TaggedSymbol
              )
            )
          end
          attr_reader :invoice_consolidation_type

          sig do
            params(
              invoice_consolidation_type:
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::InvoiceConsolidationType::OrSymbol
            ).void
          end
          attr_writer :invoice_consolidation_type

          sig do
            params(
              invoice_consolidation_type:
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::InvoiceConsolidationType::OrSymbol
            ).returns(T.attached_class)
          end
          def self.new(
            # Indicates the desired behavior of consolidated invoices generated by the parent
            # in a customer hierarchy **CONCATENATE**: Statements on the invoices of child
            # customers will be appended to the consolidated invoice **NONE**: Do not generate
            # consolidated invoices
            invoice_consolidation_type: nil
          )
          end

          sig do
            override.returns(
              {
                invoice_consolidation_type:
                  MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::InvoiceConsolidationType::TaggedSymbol
              }
            )
          end
          def to_hash
          end

          # Indicates the desired behavior of consolidated invoices generated by the parent
          # in a customer hierarchy **CONCATENATE**: Statements on the invoices of child
          # customers will be appended to the consolidated invoice **NONE**: Do not generate
          # consolidated invoices
          module InvoiceConsolidationType
            extend MetronomeSDK::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::InvoiceConsolidationType
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            CONCATENATE =
              T.let(
                :CONCATENATE,
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::InvoiceConsolidationType::TaggedSymbol
              )
            NONE =
              T.let(
                :NONE,
                MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::InvoiceConsolidationType::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  MetronomeSDK::HierarchyConfiguration::ParentHierarchyConfiguration::ParentBehavior::InvoiceConsolidationType::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end
        end
      end

      class ChildHierarchyConfiguration < MetronomeSDK::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration,
              MetronomeSDK::Internal::AnyHash
            )
          end

        # The single parent contract/customer for this child.
        sig do
          returns(
            MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Parent
          )
        end
        attr_reader :parent

        sig do
          params(
            parent:
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Parent::OrHash
          ).void
        end
        attr_writer :parent

        # Indicates whether the parent should pay for the child's invoice charges
        sig do
          returns(
            T.nilable(
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Payer::TaggedSymbol
            )
          )
        end
        attr_reader :payer

        sig do
          params(
            payer:
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Payer::OrSymbol
          ).void
        end
        attr_writer :payer

        # Indicates the behavior of the child's invoice statements on the parent's
        # invoices **CONSOLIDATE**: Child's invoice statements will be added to parent's
        # consolidated invoices **SEPARATE**: Child's invoice statements will appear not
        # appear on parent's consolidated invoices
        sig do
          returns(
            T.nilable(
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::UsageStatementBehavior::TaggedSymbol
            )
          )
        end
        attr_reader :usage_statement_behavior

        sig do
          params(
            usage_statement_behavior:
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::UsageStatementBehavior::OrSymbol
          ).void
        end
        attr_writer :usage_statement_behavior

        sig do
          params(
            parent:
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Parent::OrHash,
            payer:
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Payer::OrSymbol,
            usage_statement_behavior:
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::UsageStatementBehavior::OrSymbol
          ).returns(T.attached_class)
        end
        def self.new(
          # The single parent contract/customer for this child.
          parent:,
          # Indicates whether the parent should pay for the child's invoice charges
          payer: nil,
          # Indicates the behavior of the child's invoice statements on the parent's
          # invoices **CONSOLIDATE**: Child's invoice statements will be added to parent's
          # consolidated invoices **SEPARATE**: Child's invoice statements will appear not
          # appear on parent's consolidated invoices
          usage_statement_behavior: nil
        )
        end

        sig do
          override.returns(
            {
              parent:
                MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Parent,
              payer:
                MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Payer::TaggedSymbol,
              usage_statement_behavior:
                MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::UsageStatementBehavior::TaggedSymbol
            }
          )
        end
        def to_hash
        end

        class Parent < MetronomeSDK::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Parent,
                MetronomeSDK::Internal::AnyHash
              )
            end

          sig { returns(String) }
          attr_accessor :contract_id

          sig { returns(String) }
          attr_accessor :customer_id

          # The single parent contract/customer for this child.
          sig do
            params(contract_id: String, customer_id: String).returns(
              T.attached_class
            )
          end
          def self.new(contract_id:, customer_id:)
          end

          sig { override.returns({ contract_id: String, customer_id: String }) }
          def to_hash
          end
        end

        # Indicates whether the parent should pay for the child's invoice charges
        module Payer
          extend MetronomeSDK::Internal::Type::Enum

          TaggedSymbol =
            T.type_alias do
              T.all(
                Symbol,
                MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Payer
              )
            end
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          SELF =
            T.let(
              :SELF,
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Payer::TaggedSymbol
            )
          PARENT =
            T.let(
              :PARENT,
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Payer::TaggedSymbol
            )

          sig do
            override.returns(
              T::Array[
                MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::Payer::TaggedSymbol
              ]
            )
          end
          def self.values
          end
        end

        # Indicates the behavior of the child's invoice statements on the parent's
        # invoices **CONSOLIDATE**: Child's invoice statements will be added to parent's
        # consolidated invoices **SEPARATE**: Child's invoice statements will appear not
        # appear on parent's consolidated invoices
        module UsageStatementBehavior
          extend MetronomeSDK::Internal::Type::Enum

          TaggedSymbol =
            T.type_alias do
              T.all(
                Symbol,
                MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::UsageStatementBehavior
              )
            end
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          CONSOLIDATE =
            T.let(
              :CONSOLIDATE,
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::UsageStatementBehavior::TaggedSymbol
            )
          SEPARATE =
            T.let(
              :SEPARATE,
              MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::UsageStatementBehavior::TaggedSymbol
            )

          sig do
            override.returns(
              T::Array[
                MetronomeSDK::HierarchyConfiguration::ChildHierarchyConfiguration::UsageStatementBehavior::TaggedSymbol
              ]
            )
          end
          def self.values
          end
        end
      end

      sig do
        override.returns(
          T::Array[MetronomeSDK::HierarchyConfiguration::Variants]
        )
      end
      def self.variants
      end
    end
  end
end
