module MetronomeSDK
  module Models
    type property_filter =
      {
        name: String,
        exists: bool,
        in_values: ::Array[String],
        not_in_values: ::Array[String]
      }

    class PropertyFilter < MetronomeSDK::Internal::Type::BaseModel
      attr_accessor name: String

      attr_reader exists: bool?

      def exists=: (bool) -> bool

      attr_reader in_values: ::Array[String]?

      def in_values=: (::Array[String]) -> ::Array[String]

      attr_reader not_in_values: ::Array[String]?

      def not_in_values=: (::Array[String]) -> ::Array[String]

      def initialize: (
        name: String,
        ?exists: bool,
        ?in_values: ::Array[String],
        ?not_in_values: ::Array[String]
      ) -> void

      def to_hash: -> {
        name: String,
        exists: bool,
        in_values: ::Array[String],
        not_in_values: ::Array[String]
      }
    end
  end
end
