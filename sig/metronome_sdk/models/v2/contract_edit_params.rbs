module MetronomeSDK
  module Models
    module V2
      type contract_edit_params =
        {
          contract_id: String,
          customer_id: String,
          add_commits: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit],
          add_credits: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit],
          add_discounts: ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount],
          add_overrides: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride],
          add_prepaid_balance_threshold_configuration: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration,
          add_professional_services: ::Array[MetronomeSDK::V2::ContractEditParams::AddProfessionalService],
          add_recurring_commits: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit],
          add_recurring_credits: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit],
          add_reseller_royalties: ::Array[MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty],
          add_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge],
          add_spend_threshold_configuration: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration,
          add_subscriptions: ::Array[MetronomeSDK::V2::ContractEditParams::AddSubscription],
          allow_contract_ending_before_finalized_invoice: bool,
          archive_commits: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCommit],
          archive_credits: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCredit],
          archive_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveScheduledCharge],
          remove_overrides: ::Array[MetronomeSDK::V2::ContractEditParams::RemoveOverride],
          update_commits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit],
          update_contract_end_date: Time?,
          update_credits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit],
          update_prepaid_balance_threshold_configuration: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration,
          update_recurring_commits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit],
          update_recurring_credits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit],
          update_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge],
          update_spend_threshold_configuration: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration,
          update_subscriptions: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription]
        }
        & MetronomeSDK::Internal::Type::request_parameters

      class ContractEditParams < MetronomeSDK::Internal::Type::BaseModel
        extend MetronomeSDK::Internal::Type::RequestParameters::Converter
        include MetronomeSDK::Internal::Type::RequestParameters

        attr_accessor contract_id: String

        attr_accessor customer_id: String

        attr_reader add_commits: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit]?

        def add_commits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit]

        attr_reader add_credits: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit]?

        def add_credits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit]

        attr_reader add_discounts: ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount]?

        def add_discounts=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount]

        attr_reader add_overrides: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride]?

        def add_overrides=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride]

        attr_reader add_prepaid_balance_threshold_configuration: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration?

        def add_prepaid_balance_threshold_configuration=: (
          MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration
        ) -> MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration

        attr_reader add_professional_services: ::Array[MetronomeSDK::V2::ContractEditParams::AddProfessionalService]?

        def add_professional_services=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddProfessionalService]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddProfessionalService]

        attr_reader add_recurring_commits: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit]?

        def add_recurring_commits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit]

        attr_reader add_recurring_credits: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit]?

        def add_recurring_credits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit]

        attr_reader add_reseller_royalties: ::Array[MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty]?

        def add_reseller_royalties=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty]

        attr_reader add_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge]?

        def add_scheduled_charges=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge]

        attr_reader add_spend_threshold_configuration: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration?

        def add_spend_threshold_configuration=: (
          MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration
        ) -> MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration

        attr_reader add_subscriptions: ::Array[MetronomeSDK::V2::ContractEditParams::AddSubscription]?

        def add_subscriptions=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::AddSubscription]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddSubscription]

        attr_reader allow_contract_ending_before_finalized_invoice: bool?

        def allow_contract_ending_before_finalized_invoice=: (bool) -> bool

        attr_reader archive_commits: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCommit]?

        def archive_commits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCommit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCommit]

        attr_reader archive_credits: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCredit]?

        def archive_credits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCredit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCredit]

        attr_reader archive_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveScheduledCharge]?

        def archive_scheduled_charges=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveScheduledCharge]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveScheduledCharge]

        attr_reader remove_overrides: ::Array[MetronomeSDK::V2::ContractEditParams::RemoveOverride]?

        def remove_overrides=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::RemoveOverride]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::RemoveOverride]

        attr_reader update_commits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit]?

        def update_commits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit]

        attr_accessor update_contract_end_date: Time?

        attr_reader update_credits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit]?

        def update_credits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit]

        attr_reader update_prepaid_balance_threshold_configuration: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration?

        def update_prepaid_balance_threshold_configuration=: (
          MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration
        ) -> MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration

        attr_reader update_recurring_commits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit]?

        def update_recurring_commits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit]

        attr_reader update_recurring_credits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit]?

        def update_recurring_credits=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit]

        attr_reader update_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge]?

        def update_scheduled_charges=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge]

        attr_reader update_spend_threshold_configuration: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration?

        def update_spend_threshold_configuration=: (
          MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration
        ) -> MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration

        attr_reader update_subscriptions: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription]?

        def update_subscriptions=: (
          ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription]
        ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription]

        def initialize: (
          contract_id: String,
          customer_id: String,
          ?add_commits: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit],
          ?add_credits: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit],
          ?add_discounts: ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount],
          ?add_overrides: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride],
          ?add_prepaid_balance_threshold_configuration: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration,
          ?add_professional_services: ::Array[MetronomeSDK::V2::ContractEditParams::AddProfessionalService],
          ?add_recurring_commits: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit],
          ?add_recurring_credits: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit],
          ?add_reseller_royalties: ::Array[MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty],
          ?add_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge],
          ?add_spend_threshold_configuration: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration,
          ?add_subscriptions: ::Array[MetronomeSDK::V2::ContractEditParams::AddSubscription],
          ?allow_contract_ending_before_finalized_invoice: bool,
          ?archive_commits: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCommit],
          ?archive_credits: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCredit],
          ?archive_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveScheduledCharge],
          ?remove_overrides: ::Array[MetronomeSDK::V2::ContractEditParams::RemoveOverride],
          ?update_commits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit],
          ?update_contract_end_date: Time?,
          ?update_credits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit],
          ?update_prepaid_balance_threshold_configuration: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration,
          ?update_recurring_commits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit],
          ?update_recurring_credits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit],
          ?update_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge],
          ?update_spend_threshold_configuration: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration,
          ?update_subscriptions: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription],
          ?request_options: MetronomeSDK::request_opts
        ) -> void

        def to_hash: -> {
          contract_id: String,
          customer_id: String,
          add_commits: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit],
          add_credits: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit],
          add_discounts: ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount],
          add_overrides: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride],
          add_prepaid_balance_threshold_configuration: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration,
          add_professional_services: ::Array[MetronomeSDK::V2::ContractEditParams::AddProfessionalService],
          add_recurring_commits: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit],
          add_recurring_credits: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit],
          add_reseller_royalties: ::Array[MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty],
          add_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge],
          add_spend_threshold_configuration: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration,
          add_subscriptions: ::Array[MetronomeSDK::V2::ContractEditParams::AddSubscription],
          allow_contract_ending_before_finalized_invoice: bool,
          archive_commits: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCommit],
          archive_credits: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveCredit],
          archive_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::ArchiveScheduledCharge],
          remove_overrides: ::Array[MetronomeSDK::V2::ContractEditParams::RemoveOverride],
          update_commits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit],
          update_contract_end_date: Time?,
          update_credits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit],
          update_prepaid_balance_threshold_configuration: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration,
          update_recurring_commits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit],
          update_recurring_credits: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit],
          update_scheduled_charges: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge],
          update_spend_threshold_configuration: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration,
          update_subscriptions: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription],
          request_options: MetronomeSDK::RequestOptions
        }

        type add_commit =
          {
            product_id: String,
            type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::type_,
            access_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule,
            amount: Float,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            custom_fields: ::Hash[Symbol, String],
            description: String,
            invoice_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule,
            name: String,
            netsuite_sales_order_id: String,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig,
            priority: Float,
            rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::rate_type,
            rollover_fraction: Float,
            specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::Specifier],
            temporary_id: String
          }

        class AddCommit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor product_id: String

          attr_accessor type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::type_

          attr_reader access_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule?

          def access_schedule=: (
            MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule
          ) -> MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule

          attr_reader amount: Float?

          def amount=: (Float) -> Float

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader invoice_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule?

          def invoice_schedule=: (
            MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule
          ) -> MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          attr_reader payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig?

          def payment_gate_config=: (
            MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig
          ) -> MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig

          attr_reader priority: Float?

          def priority=: (Float) -> Float

          attr_reader rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::rate_type?

          def rate_type=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddCommit::rate_type
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddCommit::rate_type

          attr_reader rollover_fraction: Float?

          def rollover_fraction=: (Float) -> Float

          attr_reader specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::Specifier]?

          def specifiers=: (
            ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::Specifier]
          ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::Specifier]

          attr_reader temporary_id: String?

          def temporary_id=: (String) -> String

          def initialize: (
            product_id: String,
            type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::type_,
            ?access_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule,
            ?amount: Float,
            ?applicable_product_ids: ::Array[String],
            ?applicable_product_tags: ::Array[String],
            ?custom_fields: ::Hash[Symbol, String],
            ?description: String,
            ?invoice_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule,
            ?name: String,
            ?netsuite_sales_order_id: String,
            ?payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig,
            ?priority: Float,
            ?rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::rate_type,
            ?rollover_fraction: Float,
            ?specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::Specifier],
            ?temporary_id: String
          ) -> void

          def to_hash: -> {
            product_id: String,
            type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::type_,
            access_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule,
            amount: Float,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            custom_fields: ::Hash[Symbol, String],
            description: String,
            invoice_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule,
            name: String,
            netsuite_sales_order_id: String,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig,
            priority: Float,
            rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::rate_type,
            rollover_fraction: Float,
            specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::Specifier],
            temporary_id: String
          }

          type type_ = :PREPAID | :POSTPAID

          module Type
            extend MetronomeSDK::Internal::Type::Enum

            PREPAID: :PREPAID
            POSTPAID: :POSTPAID

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddCommit::type_]
          end

          type access_schedule =
            {
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule::ScheduleItem],
              credit_type_id: String
            }

          class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule::ScheduleItem]

            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            def initialize: (
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule::ScheduleItem],
              ?credit_type_id: String
            ) -> void

            def to_hash: -> {
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::AccessSchedule::ScheduleItem],
              credit_type_id: String
            }

            type schedule_item =
              { amount: Float, ending_before: Time, starting_at: Time }

            class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor amount: Float

              attr_accessor ending_before: Time

              attr_accessor starting_at: Time

              def initialize: (
                amount: Float,
                ending_before: Time,
                starting_at: Time
              ) -> void

              def to_hash: -> {
                amount: Float,
                ending_before: Time,
                starting_at: Time
              }
            end
          end

          type invoice_schedule =
            {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::ScheduleItem]
            }

          class InvoiceSchedule < MetronomeSDK::Internal::Type::BaseModel
            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule?

            def recurring_schedule=: (
              MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule
            ) -> MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule

            attr_reader schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::ScheduleItem]?

            def schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::ScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::ScheduleItem]

            def initialize: (
              ?credit_type_id: String,
              ?recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule,
              ?schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::ScheduleItem]
            ) -> void

            def to_hash: -> {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCommit::InvoiceSchedule::ScheduleItem]
            }

            type recurring_schedule =
              {
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class RecurringSchedule < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::amount_distribution

              attr_accessor ending_before: Time

              attr_accessor frequency: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::frequency

              attr_accessor starting_at: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::frequency,
                starting_at: Time,
                ?amount: Float,
                ?quantity: Float,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

              type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

              module AmountDistribution
                extend MetronomeSDK::Internal::Type::Enum

                DIVIDED: :DIVIDED
                DIVIDED_ROUNDED: :DIVIDED_ROUNDED
                EACH: :EACH

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::amount_distribution]
              end

              type frequency =
                :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL | :WEEKLY

              module Frequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                SEMI_ANNUAL: :SEMI_ANNUAL
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddCommit::InvoiceSchedule::RecurringSchedule::frequency]
              end
            end

            type schedule_item =
              {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor timestamp: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                timestamp: Time,
                ?amount: Float,
                ?quantity: Float,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }
            end
          end

          type payment_gate_config =
            {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::tax_type
            }

          class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::payment_gate_type

            attr_reader stripe_config: MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig?

            def stripe_config=: (
              MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig
            ) -> MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig

            attr_reader tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::tax_type?

            def tax_type=: (
              MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::tax_type
            ) -> MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::tax_type

            def initialize: (
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::payment_gate_type,
              ?stripe_config: MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig,
              ?tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::tax_type
            ) -> void

            def to_hash: -> {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::tax_type
            }

            type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

            module PaymentGateType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE
              EXTERNAL: :EXTERNAL

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::payment_gate_type]
            end

            type stripe_config =
              {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig::payment_type
              }

            class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig::payment_type

              def initialize: (
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig::payment_type
              ) -> void

              def to_hash: -> {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig::payment_type
              }

              type payment_type = :INVOICE | :PAYMENT_INTENT

              module PaymentType
                extend MetronomeSDK::Internal::Type::Enum

                INVOICE: :INVOICE
                PAYMENT_INTENT: :PAYMENT_INTENT

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::StripeConfig::payment_type]
              end
            end

            type tax_type = :NONE | :STRIPE

            module TaxType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddCommit::PaymentGateConfig::tax_type]
            end
          end

          type rate_type = :COMMIT_RATE | :LIST_RATE

          module RateType
            extend MetronomeSDK::Internal::Type::Enum

            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddCommit::rate_type]
          end

          type specifier =
            {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }

          class Specifier < MetronomeSDK::Internal::Type::BaseModel
            attr_reader presentation_group_values: ::Hash[Symbol, String]?

            def presentation_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader pricing_group_values: ::Hash[Symbol, String]?

            def pricing_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader product_id: String?

            def product_id=: (String) -> String

            attr_reader product_tags: ::Array[String]?

            def product_tags=: (::Array[String]) -> ::Array[String]

            def initialize: (
              ?presentation_group_values: ::Hash[Symbol, String],
              ?pricing_group_values: ::Hash[Symbol, String],
              ?product_id: String,
              ?product_tags: ::Array[String]
            ) -> void

            def to_hash: -> {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }
          end
        end

        type add_credit =
          {
            access_schedule: MetronomeSDK::V2::ContractEditParams::AddCredit::AccessSchedule,
            product_id: String,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            custom_fields: ::Hash[Symbol, String],
            description: String,
            name: String,
            netsuite_sales_order_id: String,
            priority: Float,
            rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCredit::rate_type,
            specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::Specifier]
          }

        class AddCredit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor access_schedule: MetronomeSDK::V2::ContractEditParams::AddCredit::AccessSchedule

          attr_accessor product_id: String

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          attr_reader priority: Float?

          def priority=: (Float) -> Float

          attr_reader rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCredit::rate_type?

          def rate_type=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddCredit::rate_type
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddCredit::rate_type

          attr_reader specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::Specifier]?

          def specifiers=: (
            ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::Specifier]
          ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::Specifier]

          def initialize: (
            access_schedule: MetronomeSDK::V2::ContractEditParams::AddCredit::AccessSchedule,
            product_id: String,
            ?applicable_product_ids: ::Array[String],
            ?applicable_product_tags: ::Array[String],
            ?custom_fields: ::Hash[Symbol, String],
            ?description: String,
            ?name: String,
            ?netsuite_sales_order_id: String,
            ?priority: Float,
            ?rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCredit::rate_type,
            ?specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::Specifier]
          ) -> void

          def to_hash: -> {
            access_schedule: MetronomeSDK::V2::ContractEditParams::AddCredit::AccessSchedule,
            product_id: String,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            custom_fields: ::Hash[Symbol, String],
            description: String,
            name: String,
            netsuite_sales_order_id: String,
            priority: Float,
            rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddCredit::rate_type,
            specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::Specifier]
          }

          type access_schedule =
            {
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::AccessSchedule::ScheduleItem],
              credit_type_id: String
            }

          class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::AccessSchedule::ScheduleItem]

            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            def initialize: (
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::AccessSchedule::ScheduleItem],
              ?credit_type_id: String
            ) -> void

            def to_hash: -> {
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddCredit::AccessSchedule::ScheduleItem],
              credit_type_id: String
            }

            type schedule_item =
              { amount: Float, ending_before: Time, starting_at: Time }

            class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor amount: Float

              attr_accessor ending_before: Time

              attr_accessor starting_at: Time

              def initialize: (
                amount: Float,
                ending_before: Time,
                starting_at: Time
              ) -> void

              def to_hash: -> {
                amount: Float,
                ending_before: Time,
                starting_at: Time
              }
            end
          end

          type rate_type = :COMMIT_RATE | :LIST_RATE

          module RateType
            extend MetronomeSDK::Internal::Type::Enum

            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddCredit::rate_type]
          end

          type specifier =
            {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }

          class Specifier < MetronomeSDK::Internal::Type::BaseModel
            attr_reader presentation_group_values: ::Hash[Symbol, String]?

            def presentation_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader pricing_group_values: ::Hash[Symbol, String]?

            def pricing_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader product_id: String?

            def product_id=: (String) -> String

            attr_reader product_tags: ::Array[String]?

            def product_tags=: (::Array[String]) -> ::Array[String]

            def initialize: (
              ?presentation_group_values: ::Hash[Symbol, String],
              ?pricing_group_values: ::Hash[Symbol, String],
              ?product_id: String,
              ?product_tags: ::Array[String]
            ) -> void

            def to_hash: -> {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }
          end
        end

        type add_discount =
          {
            product_id: String,
            schedule: MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule,
            custom_fields: ::Hash[Symbol, String],
            name: String,
            netsuite_sales_order_id: String
          }

        class AddDiscount < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor product_id: String

          attr_accessor schedule: MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          def initialize: (
            product_id: String,
            schedule: MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule,
            ?custom_fields: ::Hash[Symbol, String],
            ?name: String,
            ?netsuite_sales_order_id: String
          ) -> void

          def to_hash: -> {
            product_id: String,
            schedule: MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule,
            custom_fields: ::Hash[Symbol, String],
            name: String,
            netsuite_sales_order_id: String
          }

          type schedule =
            {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::ScheduleItem]
            }

          class Schedule < MetronomeSDK::Internal::Type::BaseModel
            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule?

            def recurring_schedule=: (
              MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule
            ) -> MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule

            attr_reader schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::ScheduleItem]?

            def schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::ScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::ScheduleItem]

            def initialize: (
              ?credit_type_id: String,
              ?recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule,
              ?schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::ScheduleItem]
            ) -> void

            def to_hash: -> {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddDiscount::Schedule::ScheduleItem]
            }

            type recurring_schedule =
              {
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class RecurringSchedule < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::amount_distribution

              attr_accessor ending_before: Time

              attr_accessor frequency: MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::frequency

              attr_accessor starting_at: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                ?amount: Float,
                ?quantity: Float,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

              type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

              module AmountDistribution
                extend MetronomeSDK::Internal::Type::Enum

                DIVIDED: :DIVIDED
                DIVIDED_ROUNDED: :DIVIDED_ROUNDED
                EACH: :EACH

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::amount_distribution]
              end

              type frequency =
                :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL | :WEEKLY

              module Frequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                SEMI_ANNUAL: :SEMI_ANNUAL
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddDiscount::Schedule::RecurringSchedule::frequency]
              end
            end

            type schedule_item =
              {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor timestamp: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                timestamp: Time,
                ?amount: Float,
                ?quantity: Float,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }
            end
          end
        end

        type add_override =
          {
            starting_at: Time,
            applicable_product_tags: ::Array[String],
            ending_before: Time,
            entitled: bool,
            is_commit_specific: bool,
            multiplier: Float,
            override_specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverrideSpecifier],
            overwrite_rate: MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate,
            priority: Float,
            product_id: String,
            target: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::target,
            tiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::Tier],
            type: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::type_
          }

        class AddOverride < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor starting_at: Time

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader entitled: bool?

          def entitled=: (bool) -> bool

          attr_reader is_commit_specific: bool?

          def is_commit_specific=: (bool) -> bool

          attr_reader multiplier: Float?

          def multiplier=: (Float) -> Float

          attr_reader override_specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverrideSpecifier]?

          def override_specifiers=: (
            ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverrideSpecifier]
          ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverrideSpecifier]

          attr_reader overwrite_rate: MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate?

          def overwrite_rate=: (
            MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate
          ) -> MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate

          attr_reader priority: Float?

          def priority=: (Float) -> Float

          attr_reader product_id: String?

          def product_id=: (String) -> String

          attr_reader target: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::target?

          def target=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddOverride::target
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddOverride::target

          attr_reader tiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::Tier]?

          def tiers=: (
            ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::Tier]
          ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::Tier]

          attr_reader type: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::type_?

          def type=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddOverride::type_
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddOverride::type_

          def initialize: (
            starting_at: Time,
            ?applicable_product_tags: ::Array[String],
            ?ending_before: Time,
            ?entitled: bool,
            ?is_commit_specific: bool,
            ?multiplier: Float,
            ?override_specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverrideSpecifier],
            ?overwrite_rate: MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate,
            ?priority: Float,
            ?product_id: String,
            ?target: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::target,
            ?tiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::Tier],
            ?type: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::type_
          ) -> void

          def to_hash: -> {
            starting_at: Time,
            applicable_product_tags: ::Array[String],
            ending_before: Time,
            entitled: bool,
            is_commit_specific: bool,
            multiplier: Float,
            override_specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverrideSpecifier],
            overwrite_rate: MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate,
            priority: Float,
            product_id: String,
            target: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::target,
            tiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::Tier],
            type: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::type_
          }

          type override_specifier =
            {
              billing_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverrideSpecifier::billing_frequency,
              commit_ids: ::Array[String],
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String],
              recurring_commit_ids: ::Array[String],
              recurring_credit_ids: ::Array[String]
            }

          class OverrideSpecifier < MetronomeSDK::Internal::Type::BaseModel
            attr_reader billing_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverrideSpecifier::billing_frequency?

            def billing_frequency=: (
              MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverrideSpecifier::billing_frequency
            ) -> MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverrideSpecifier::billing_frequency

            attr_reader commit_ids: ::Array[String]?

            def commit_ids=: (::Array[String]) -> ::Array[String]

            attr_reader presentation_group_values: ::Hash[Symbol, String]?

            def presentation_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader pricing_group_values: ::Hash[Symbol, String]?

            def pricing_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader product_id: String?

            def product_id=: (String) -> String

            attr_reader product_tags: ::Array[String]?

            def product_tags=: (::Array[String]) -> ::Array[String]

            attr_reader recurring_commit_ids: ::Array[String]?

            def recurring_commit_ids=: (::Array[String]) -> ::Array[String]

            attr_reader recurring_credit_ids: ::Array[String]?

            def recurring_credit_ids=: (::Array[String]) -> ::Array[String]

            def initialize: (
              ?billing_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverrideSpecifier::billing_frequency,
              ?commit_ids: ::Array[String],
              ?presentation_group_values: ::Hash[Symbol, String],
              ?pricing_group_values: ::Hash[Symbol, String],
              ?product_id: String,
              ?product_tags: ::Array[String],
              ?recurring_commit_ids: ::Array[String],
              ?recurring_credit_ids: ::Array[String]
            ) -> void

            def to_hash: -> {
              billing_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverrideSpecifier::billing_frequency,
              commit_ids: ::Array[String],
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String],
              recurring_commit_ids: ::Array[String],
              recurring_credit_ids: ::Array[String]
            }

            type billing_frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

            module BillingFrequency
              extend MetronomeSDK::Internal::Type::Enum

              MONTHLY: :MONTHLY
              QUARTERLY: :QUARTERLY
              ANNUAL: :ANNUAL
              WEEKLY: :WEEKLY

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverrideSpecifier::billing_frequency]
            end
          end

          type overwrite_rate =
            {
              rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverwriteRate::rate_type,
              credit_type_id: String,
              custom_rate: ::Hash[Symbol, top],
              is_prorated: bool,
              price: Float,
              quantity: Float,
              tiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate::Tier]
            }

          class OverwriteRate < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverwriteRate::rate_type

            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader custom_rate: ::Hash[Symbol, top]?

            def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

            attr_reader is_prorated: bool?

            def is_prorated=: (bool) -> bool

            attr_reader price: Float?

            def price=: (Float) -> Float

            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            attr_reader tiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate::Tier]?

            def tiers=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate::Tier]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate::Tier]

            def initialize: (
              rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverwriteRate::rate_type,
              ?credit_type_id: String,
              ?custom_rate: ::Hash[Symbol, top],
              ?is_prorated: bool,
              ?price: Float,
              ?quantity: Float,
              ?tiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate::Tier]
            ) -> void

            def to_hash: -> {
              rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverwriteRate::rate_type,
              credit_type_id: String,
              custom_rate: ::Hash[Symbol, top],
              is_prorated: bool,
              price: Float,
              quantity: Float,
              tiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddOverride::OverwriteRate::Tier]
            }

            type rate_type =
              :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

            module RateType
              extend MetronomeSDK::Internal::Type::Enum

              FLAT: :FLAT
              PERCENTAGE: :PERCENTAGE
              SUBSCRIPTION: :SUBSCRIPTION
              TIERED: :TIERED
              CUSTOM: :CUSTOM

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddOverride::OverwriteRate::rate_type]
            end

            type tier = { price: Float, size: Float }

            class Tier < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor price: Float

              attr_reader size: Float?

              def size=: (Float) -> Float

              def initialize: (price: Float, ?size: Float) -> void

              def to_hash: -> { price: Float, size: Float }
            end
          end

          type target = :COMMIT_RATE | :LIST_RATE

          module Target
            extend MetronomeSDK::Internal::Type::Enum

            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddOverride::target]
          end

          type tier = { multiplier: Float, size: Float }

          class Tier < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor multiplier: Float

            attr_reader size: Float?

            def size=: (Float) -> Float

            def initialize: (multiplier: Float, ?size: Float) -> void

            def to_hash: -> { multiplier: Float, size: Float }
          end

          type type_ = :OVERWRITE | :MULTIPLIER | :TIERED

          module Type
            extend MetronomeSDK::Internal::Type::Enum

            OVERWRITE: :OVERWRITE
            MULTIPLIER: :MULTIPLIER
            TIERED: :TIERED

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddOverride::type_]
          end
        end

        type add_prepaid_balance_threshold_configuration =
          {
            commit: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig,
            recharge_to_amount: Float,
            threshold_amount: Float
          }

        class AddPrepaidBalanceThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor commit: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit

          attr_accessor is_enabled: bool

          attr_accessor payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig

          attr_accessor recharge_to_amount: Float

          attr_accessor threshold_amount: Float

          def initialize: (
            commit: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig,
            recharge_to_amount: Float,
            threshold_amount: Float
          ) -> void

          def to_hash: -> {
            commit: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig,
            recharge_to_amount: Float,
            threshold_amount: Float
          }

          type commit =
            {
              product_id: String,
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              description: String,
              name: String,
              specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit::Specifier]
            }

          class Commit < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor product_id: String

            attr_reader applicable_product_ids: ::Array[String]?

            def applicable_product_ids=: (::Array[String]) -> ::Array[String]

            attr_reader applicable_product_tags: ::Array[String]?

            def applicable_product_tags=: (::Array[String]) -> ::Array[String]

            attr_reader description: String?

            def description=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit::Specifier]?

            def specifiers=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit::Specifier]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit::Specifier]

            def initialize: (
              product_id: String,
              ?applicable_product_ids: ::Array[String],
              ?applicable_product_tags: ::Array[String],
              ?description: String,
              ?name: String,
              ?specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit::Specifier]
            ) -> void

            def to_hash: -> {
              product_id: String,
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              description: String,
              name: String,
              specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::Commit::Specifier]
            }

            type specifier =
              {
                presentation_group_values: ::Hash[Symbol, String],
                pricing_group_values: ::Hash[Symbol, String],
                product_id: String,
                product_tags: ::Array[String]
              }

            class Specifier < MetronomeSDK::Internal::Type::BaseModel
              attr_reader presentation_group_values: ::Hash[Symbol, String]?

              def presentation_group_values=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader pricing_group_values: ::Hash[Symbol, String]?

              def pricing_group_values=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader product_id: String?

              def product_id=: (String) -> String

              attr_reader product_tags: ::Array[String]?

              def product_tags=: (::Array[String]) -> ::Array[String]

              def initialize: (
                ?presentation_group_values: ::Hash[Symbol, String],
                ?pricing_group_values: ::Hash[Symbol, String],
                ?product_id: String,
                ?product_tags: ::Array[String]
              ) -> void

              def to_hash: -> {
                presentation_group_values: ::Hash[Symbol, String],
                pricing_group_values: ::Hash[Symbol, String],
                product_id: String,
                product_tags: ::Array[String]
              }
            end
          end

          type payment_gate_config =
            {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            }

          class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type

            attr_reader stripe_config: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig?

            def stripe_config=: (
              MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig
            ) -> MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig

            attr_reader tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type?

            def tax_type=: (
              MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type

            def initialize: (
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              ?stripe_config: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
              ?tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> void

            def to_hash: -> {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            }

            type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

            module PaymentGateType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE
              EXTERNAL: :EXTERNAL

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type]
            end

            type stripe_config =
              {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

            class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

              def initialize: (
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              ) -> void

              def to_hash: -> {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

              type payment_type = :INVOICE | :PAYMENT_INTENT

              module PaymentType
                extend MetronomeSDK::Internal::Type::Enum

                INVOICE: :INVOICE
                PAYMENT_INTENT: :PAYMENT_INTENT

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
              end
            end

            type tax_type = :NONE | :STRIPE

            module TaxType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddPrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type]
            end
          end
        end

        type add_professional_service =
          {
            max_amount: Float,
            product_id: String,
            quantity: Float,
            unit_price: Float,
            custom_fields: ::Hash[Symbol, String],
            description: String,
            netsuite_sales_order_id: String
          }

        class AddProfessionalService < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor max_amount: Float

          attr_accessor product_id: String

          attr_accessor quantity: Float

          attr_accessor unit_price: Float

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          def initialize: (
            max_amount: Float,
            product_id: String,
            quantity: Float,
            unit_price: Float,
            ?custom_fields: ::Hash[Symbol, String],
            ?description: String,
            ?netsuite_sales_order_id: String
          ) -> void

          def to_hash: -> {
            max_amount: Float,
            product_id: String,
            quantity: Float,
            unit_price: Float,
            custom_fields: ::Hash[Symbol, String],
            description: String,
            netsuite_sales_order_id: String
          }
        end

        type add_recurring_commit =
          {
            access_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::AccessAmount,
            commit_duration: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::CommitDuration,
            priority: Float,
            product_id: String,
            starting_at: Time,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            description: String,
            ending_before: Time,
            invoice_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::InvoiceAmount,
            name: String,
            netsuite_sales_order_id: String,
            proration: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::proration,
            rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::rate_type,
            recurrence_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::recurrence_frequency,
            rollover_fraction: Float,
            specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::Specifier],
            temporary_id: String
          }

        class AddRecurringCommit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor access_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::AccessAmount

          attr_accessor commit_duration: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::CommitDuration

          attr_accessor priority: Float

          attr_accessor product_id: String

          attr_accessor starting_at: Time

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader invoice_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::InvoiceAmount?

          def invoice_amount=: (
            MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::InvoiceAmount
          ) -> MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::InvoiceAmount

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          attr_reader proration: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::proration?

          def proration=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::proration
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::proration

          attr_reader rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::rate_type?

          def rate_type=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::rate_type
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::rate_type

          attr_reader recurrence_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::recurrence_frequency?

          def recurrence_frequency=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::recurrence_frequency
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::recurrence_frequency

          attr_reader rollover_fraction: Float?

          def rollover_fraction=: (Float) -> Float

          attr_reader specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::Specifier]?

          def specifiers=: (
            ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::Specifier]
          ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::Specifier]

          attr_reader temporary_id: String?

          def temporary_id=: (String) -> String

          def initialize: (
            access_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::AccessAmount,
            commit_duration: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::CommitDuration,
            priority: Float,
            product_id: String,
            starting_at: Time,
            ?applicable_product_ids: ::Array[String],
            ?applicable_product_tags: ::Array[String],
            ?description: String,
            ?ending_before: Time,
            ?invoice_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::InvoiceAmount,
            ?name: String,
            ?netsuite_sales_order_id: String,
            ?proration: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::proration,
            ?rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::rate_type,
            ?recurrence_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::recurrence_frequency,
            ?rollover_fraction: Float,
            ?specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::Specifier],
            ?temporary_id: String
          ) -> void

          def to_hash: -> {
            access_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::AccessAmount,
            commit_duration: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::CommitDuration,
            priority: Float,
            product_id: String,
            starting_at: Time,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            description: String,
            ending_before: Time,
            invoice_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::InvoiceAmount,
            name: String,
            netsuite_sales_order_id: String,
            proration: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::proration,
            rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::rate_type,
            recurrence_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::recurrence_frequency,
            rollover_fraction: Float,
            specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCommit::Specifier],
            temporary_id: String
          }

          type access_amount =
            { credit_type_id: String, unit_price: Float, quantity: Float }

          class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor credit_type_id: String

            attr_accessor unit_price: Float

            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            def initialize: (
              credit_type_id: String,
              unit_price: Float,
              ?quantity: Float
            ) -> void

            def to_hash: -> {
              credit_type_id: String,
              unit_price: Float,
              quantity: Float
            }
          end

          type commit_duration =
            {
              value: Float,
              unit: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::CommitDuration::unit
            }

          class CommitDuration < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor value: Float

            attr_reader unit: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::CommitDuration::unit?

            def unit=: (
              MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::CommitDuration::unit
            ) -> MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::CommitDuration::unit

            def initialize: (
              value: Float,
              ?unit: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::CommitDuration::unit
            ) -> void

            def to_hash: -> {
              value: Float,
              unit: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::CommitDuration::unit
            }

            type unit = :PERIODS

            module Unit
              extend MetronomeSDK::Internal::Type::Enum

              PERIODS: :PERIODS

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::CommitDuration::unit]
            end
          end

          type invoice_amount =
            { credit_type_id: String, quantity: Float, unit_price: Float }

          class InvoiceAmount < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor credit_type_id: String

            attr_accessor quantity: Float

            attr_accessor unit_price: Float

            def initialize: (
              credit_type_id: String,
              quantity: Float,
              unit_price: Float
            ) -> void

            def to_hash: -> {
              credit_type_id: String,
              quantity: Float,
              unit_price: Float
            }
          end

          type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

          module Proration
            extend MetronomeSDK::Internal::Type::Enum

            NONE: :NONE
            FIRST: :FIRST
            LAST: :LAST
            FIRST_AND_LAST: :FIRST_AND_LAST

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::proration]
          end

          type rate_type = :COMMIT_RATE | :LIST_RATE

          module RateType
            extend MetronomeSDK::Internal::Type::Enum

            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::rate_type]
          end

          type recurrence_frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

          module RecurrenceFrequency
            extend MetronomeSDK::Internal::Type::Enum

            MONTHLY: :MONTHLY
            QUARTERLY: :QUARTERLY
            ANNUAL: :ANNUAL
            WEEKLY: :WEEKLY

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCommit::recurrence_frequency]
          end

          type specifier =
            {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }

          class Specifier < MetronomeSDK::Internal::Type::BaseModel
            attr_reader presentation_group_values: ::Hash[Symbol, String]?

            def presentation_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader pricing_group_values: ::Hash[Symbol, String]?

            def pricing_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader product_id: String?

            def product_id=: (String) -> String

            attr_reader product_tags: ::Array[String]?

            def product_tags=: (::Array[String]) -> ::Array[String]

            def initialize: (
              ?presentation_group_values: ::Hash[Symbol, String],
              ?pricing_group_values: ::Hash[Symbol, String],
              ?product_id: String,
              ?product_tags: ::Array[String]
            ) -> void

            def to_hash: -> {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }
          end
        end

        type add_recurring_credit =
          {
            access_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::AccessAmount,
            commit_duration: MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::CommitDuration,
            priority: Float,
            product_id: String,
            starting_at: Time,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            description: String,
            ending_before: Time,
            name: String,
            netsuite_sales_order_id: String,
            proration: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::proration,
            rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::rate_type,
            recurrence_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::recurrence_frequency,
            rollover_fraction: Float,
            specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::Specifier],
            temporary_id: String
          }

        class AddRecurringCredit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor access_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::AccessAmount

          attr_accessor commit_duration: MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::CommitDuration

          attr_accessor priority: Float

          attr_accessor product_id: String

          attr_accessor starting_at: Time

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          attr_reader proration: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::proration?

          def proration=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::proration
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::proration

          attr_reader rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::rate_type?

          def rate_type=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::rate_type
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::rate_type

          attr_reader recurrence_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::recurrence_frequency?

          def recurrence_frequency=: (
            MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::recurrence_frequency
          ) -> MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::recurrence_frequency

          attr_reader rollover_fraction: Float?

          def rollover_fraction=: (Float) -> Float

          attr_reader specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::Specifier]?

          def specifiers=: (
            ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::Specifier]
          ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::Specifier]

          attr_reader temporary_id: String?

          def temporary_id=: (String) -> String

          def initialize: (
            access_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::AccessAmount,
            commit_duration: MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::CommitDuration,
            priority: Float,
            product_id: String,
            starting_at: Time,
            ?applicable_product_ids: ::Array[String],
            ?applicable_product_tags: ::Array[String],
            ?description: String,
            ?ending_before: Time,
            ?name: String,
            ?netsuite_sales_order_id: String,
            ?proration: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::proration,
            ?rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::rate_type,
            ?recurrence_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::recurrence_frequency,
            ?rollover_fraction: Float,
            ?specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::Specifier],
            ?temporary_id: String
          ) -> void

          def to_hash: -> {
            access_amount: MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::AccessAmount,
            commit_duration: MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::CommitDuration,
            priority: Float,
            product_id: String,
            starting_at: Time,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            description: String,
            ending_before: Time,
            name: String,
            netsuite_sales_order_id: String,
            proration: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::proration,
            rate_type: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::rate_type,
            recurrence_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::recurrence_frequency,
            rollover_fraction: Float,
            specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::AddRecurringCredit::Specifier],
            temporary_id: String
          }

          type access_amount =
            { credit_type_id: String, unit_price: Float, quantity: Float }

          class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor credit_type_id: String

            attr_accessor unit_price: Float

            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            def initialize: (
              credit_type_id: String,
              unit_price: Float,
              ?quantity: Float
            ) -> void

            def to_hash: -> {
              credit_type_id: String,
              unit_price: Float,
              quantity: Float
            }
          end

          type commit_duration =
            {
              value: Float,
              unit: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::CommitDuration::unit
            }

          class CommitDuration < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor value: Float

            attr_reader unit: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::CommitDuration::unit?

            def unit=: (
              MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::CommitDuration::unit
            ) -> MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::CommitDuration::unit

            def initialize: (
              value: Float,
              ?unit: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::CommitDuration::unit
            ) -> void

            def to_hash: -> {
              value: Float,
              unit: MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::CommitDuration::unit
            }

            type unit = :PERIODS

            module Unit
              extend MetronomeSDK::Internal::Type::Enum

              PERIODS: :PERIODS

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::CommitDuration::unit]
            end
          end

          type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

          module Proration
            extend MetronomeSDK::Internal::Type::Enum

            NONE: :NONE
            FIRST: :FIRST
            LAST: :LAST
            FIRST_AND_LAST: :FIRST_AND_LAST

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::proration]
          end

          type rate_type = :COMMIT_RATE | :LIST_RATE

          module RateType
            extend MetronomeSDK::Internal::Type::Enum

            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::rate_type]
          end

          type recurrence_frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

          module RecurrenceFrequency
            extend MetronomeSDK::Internal::Type::Enum

            MONTHLY: :MONTHLY
            QUARTERLY: :QUARTERLY
            ANNUAL: :ANNUAL
            WEEKLY: :WEEKLY

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddRecurringCredit::recurrence_frequency]
          end

          type specifier =
            {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }

          class Specifier < MetronomeSDK::Internal::Type::BaseModel
            attr_reader presentation_group_values: ::Hash[Symbol, String]?

            def presentation_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader pricing_group_values: ::Hash[Symbol, String]?

            def pricing_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader product_id: String?

            def product_id=: (String) -> String

            attr_reader product_tags: ::Array[String]?

            def product_tags=: (::Array[String]) -> ::Array[String]

            def initialize: (
              ?presentation_group_values: ::Hash[Symbol, String],
              ?pricing_group_values: ::Hash[Symbol, String],
              ?product_id: String,
              ?product_tags: ::Array[String]
            ) -> void

            def to_hash: -> {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }
          end
        end

        type add_reseller_royalty =
          {
            reseller_type: MetronomeSDK::Models::V2::ContractEditParams::AddResellerRoyalty::reseller_type,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            aws_options: MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::AwsOptions,
            ending_before: Time?,
            fraction: Float,
            gcp_options: MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::GcpOptions,
            netsuite_reseller_id: String,
            reseller_contract_value: Float,
            starting_at: Time
          }

        class AddResellerRoyalty < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor reseller_type: MetronomeSDK::Models::V2::ContractEditParams::AddResellerRoyalty::reseller_type

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader aws_options: MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::AwsOptions?

          def aws_options=: (
            MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::AwsOptions
          ) -> MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::AwsOptions

          attr_accessor ending_before: Time?

          attr_reader fraction: Float?

          def fraction=: (Float) -> Float

          attr_reader gcp_options: MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::GcpOptions?

          def gcp_options=: (
            MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::GcpOptions
          ) -> MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::GcpOptions

          attr_reader netsuite_reseller_id: String?

          def netsuite_reseller_id=: (String) -> String

          attr_reader reseller_contract_value: Float?

          def reseller_contract_value=: (Float) -> Float

          attr_reader starting_at: Time?

          def starting_at=: (Time) -> Time

          def initialize: (
            reseller_type: MetronomeSDK::Models::V2::ContractEditParams::AddResellerRoyalty::reseller_type,
            ?applicable_product_ids: ::Array[String],
            ?applicable_product_tags: ::Array[String],
            ?aws_options: MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::AwsOptions,
            ?ending_before: Time?,
            ?fraction: Float,
            ?gcp_options: MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::GcpOptions,
            ?netsuite_reseller_id: String,
            ?reseller_contract_value: Float,
            ?starting_at: Time
          ) -> void

          def to_hash: -> {
            reseller_type: MetronomeSDK::Models::V2::ContractEditParams::AddResellerRoyalty::reseller_type,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            aws_options: MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::AwsOptions,
            ending_before: Time?,
            fraction: Float,
            gcp_options: MetronomeSDK::V2::ContractEditParams::AddResellerRoyalty::GcpOptions,
            netsuite_reseller_id: String,
            reseller_contract_value: Float,
            starting_at: Time
          }

          type reseller_type = :AWS | :AWS_PRO_SERVICE | :GCP | :GCP_PRO_SERVICE

          module ResellerType
            extend MetronomeSDK::Internal::Type::Enum

            AWS: :AWS
            AWS_PRO_SERVICE: :AWS_PRO_SERVICE
            GCP: :GCP
            GCP_PRO_SERVICE: :GCP_PRO_SERVICE

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddResellerRoyalty::reseller_type]
          end

          type aws_options =
            {
              aws_account_number: String,
              aws_offer_id: String,
              aws_payer_reference_id: String
            }

          class AwsOptions < MetronomeSDK::Internal::Type::BaseModel
            attr_reader aws_account_number: String?

            def aws_account_number=: (String) -> String

            attr_reader aws_offer_id: String?

            def aws_offer_id=: (String) -> String

            attr_reader aws_payer_reference_id: String?

            def aws_payer_reference_id=: (String) -> String

            def initialize: (
              ?aws_account_number: String,
              ?aws_offer_id: String,
              ?aws_payer_reference_id: String
            ) -> void

            def to_hash: -> {
              aws_account_number: String,
              aws_offer_id: String,
              aws_payer_reference_id: String
            }
          end

          type gcp_options = { gcp_account_id: String, gcp_offer_id: String }

          class GcpOptions < MetronomeSDK::Internal::Type::BaseModel
            attr_reader gcp_account_id: String?

            def gcp_account_id=: (String) -> String

            attr_reader gcp_offer_id: String?

            def gcp_offer_id=: (String) -> String

            def initialize: (
              ?gcp_account_id: String,
              ?gcp_offer_id: String
            ) -> void

            def to_hash: -> { gcp_account_id: String, gcp_offer_id: String }
          end
        end

        type add_scheduled_charge =
          {
            product_id: String,
            schedule: MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule,
            name: String,
            netsuite_sales_order_id: String
          }

        class AddScheduledCharge < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor product_id: String

          attr_accessor schedule: MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          def initialize: (
            product_id: String,
            schedule: MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule,
            ?name: String,
            ?netsuite_sales_order_id: String
          ) -> void

          def to_hash: -> {
            product_id: String,
            schedule: MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule,
            name: String,
            netsuite_sales_order_id: String
          }

          type schedule =
            {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::ScheduleItem]
            }

          class Schedule < MetronomeSDK::Internal::Type::BaseModel
            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule?

            def recurring_schedule=: (
              MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule
            ) -> MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule

            attr_reader schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::ScheduleItem]?

            def schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::ScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::ScheduleItem]

            def initialize: (
              ?credit_type_id: String,
              ?recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule,
              ?schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::ScheduleItem]
            ) -> void

            def to_hash: -> {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::AddScheduledCharge::Schedule::ScheduleItem]
            }

            type recurring_schedule =
              {
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class RecurringSchedule < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::amount_distribution

              attr_accessor ending_before: Time

              attr_accessor frequency: MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::frequency

              attr_accessor starting_at: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                ?amount: Float,
                ?quantity: Float,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                amount_distribution: MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

              type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

              module AmountDistribution
                extend MetronomeSDK::Internal::Type::Enum

                DIVIDED: :DIVIDED
                DIVIDED_ROUNDED: :DIVIDED_ROUNDED
                EACH: :EACH

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::amount_distribution]
              end

              type frequency =
                :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL | :WEEKLY

              module Frequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                SEMI_ANNUAL: :SEMI_ANNUAL
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddScheduledCharge::Schedule::RecurringSchedule::frequency]
              end
            end

            type schedule_item =
              {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor timestamp: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                timestamp: Time,
                ?amount: Float,
                ?quantity: Float,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }
            end
          end
        end

        type add_spend_threshold_configuration =
          {
            commit: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig,
            threshold_amount: Float
          }

        class AddSpendThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor commit: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::Commit

          attr_accessor is_enabled: bool

          attr_accessor payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig

          attr_accessor threshold_amount: Float

          def initialize: (
            commit: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig,
            threshold_amount: Float
          ) -> void

          def to_hash: -> {
            commit: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig,
            threshold_amount: Float
          }

          type commit =
            { product_id: String, description: String, name: String }

          class Commit < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor product_id: String

            attr_reader description: String?

            def description=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            def initialize: (
              product_id: String,
              ?description: String,
              ?name: String
            ) -> void

            def to_hash: -> {
              product_id: String,
              description: String,
              name: String
            }
          end

          type payment_gate_config =
            {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::tax_type
            }

          class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type

            attr_reader stripe_config: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig?

            def stripe_config=: (
              MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig
            ) -> MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig

            attr_reader tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::tax_type?

            def tax_type=: (
              MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::tax_type

            def initialize: (
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              ?stripe_config: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
              ?tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> void

            def to_hash: -> {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::tax_type
            }

            type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

            module PaymentGateType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE
              EXTERNAL: :EXTERNAL

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type]
            end

            type stripe_config =
              {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

            class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

              def initialize: (
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              ) -> void

              def to_hash: -> {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

              type payment_type = :INVOICE | :PAYMENT_INTENT

              module PaymentType
                extend MetronomeSDK::Internal::Type::Enum

                INVOICE: :INVOICE
                PAYMENT_INTENT: :PAYMENT_INTENT

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
              end
            end

            type tax_type = :NONE | :STRIPE

            module TaxType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddSpendThresholdConfiguration::PaymentGateConfig::tax_type]
            end
          end
        end

        type add_subscription =
          {
            collection_schedule: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::collection_schedule,
            initial_quantity: Float,
            proration: MetronomeSDK::V2::ContractEditParams::AddSubscription::Proration,
            subscription_rate: MetronomeSDK::V2::ContractEditParams::AddSubscription::SubscriptionRate,
            custom_fields: ::Hash[Symbol, String],
            description: String,
            ending_before: Time,
            name: String,
            starting_at: Time
          }

        class AddSubscription < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor collection_schedule: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::collection_schedule

          attr_accessor initial_quantity: Float

          attr_accessor proration: MetronomeSDK::V2::ContractEditParams::AddSubscription::Proration

          attr_accessor subscription_rate: MetronomeSDK::V2::ContractEditParams::AddSubscription::SubscriptionRate

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader starting_at: Time?

          def starting_at=: (Time) -> Time

          def initialize: (
            collection_schedule: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::collection_schedule,
            initial_quantity: Float,
            proration: MetronomeSDK::V2::ContractEditParams::AddSubscription::Proration,
            subscription_rate: MetronomeSDK::V2::ContractEditParams::AddSubscription::SubscriptionRate,
            ?custom_fields: ::Hash[Symbol, String],
            ?description: String,
            ?ending_before: Time,
            ?name: String,
            ?starting_at: Time
          ) -> void

          def to_hash: -> {
            collection_schedule: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::collection_schedule,
            initial_quantity: Float,
            proration: MetronomeSDK::V2::ContractEditParams::AddSubscription::Proration,
            subscription_rate: MetronomeSDK::V2::ContractEditParams::AddSubscription::SubscriptionRate,
            custom_fields: ::Hash[Symbol, String],
            description: String,
            ending_before: Time,
            name: String,
            starting_at: Time
          }

          type collection_schedule = :ADVANCE | :ARREARS

          module CollectionSchedule
            extend MetronomeSDK::Internal::Type::Enum

            ADVANCE: :ADVANCE
            ARREARS: :ARREARS

            def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::collection_schedule]
          end

          type proration =
            {
              invoice_behavior: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::Proration::invoice_behavior,
              is_prorated: bool
            }

          class Proration < MetronomeSDK::Internal::Type::BaseModel
            attr_reader invoice_behavior: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::Proration::invoice_behavior?

            def invoice_behavior=: (
              MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::Proration::invoice_behavior
            ) -> MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::Proration::invoice_behavior

            attr_reader is_prorated: bool?

            def is_prorated=: (bool) -> bool

            def initialize: (
              ?invoice_behavior: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::Proration::invoice_behavior,
              ?is_prorated: bool
            ) -> void

            def to_hash: -> {
              invoice_behavior: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::Proration::invoice_behavior,
              is_prorated: bool
            }

            type invoice_behavior =
              :BILL_IMMEDIATELY | :BILL_ON_NEXT_COLLECTION_DATE

            module InvoiceBehavior
              extend MetronomeSDK::Internal::Type::Enum

              BILL_IMMEDIATELY: :BILL_IMMEDIATELY
              BILL_ON_NEXT_COLLECTION_DATE: :BILL_ON_NEXT_COLLECTION_DATE

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::Proration::invoice_behavior]
            end
          end

          type subscription_rate =
            {
              billing_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::SubscriptionRate::billing_frequency,
              product_id: String
            }

          class SubscriptionRate < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor billing_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::SubscriptionRate::billing_frequency

            attr_accessor product_id: String

            def initialize: (
              billing_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::SubscriptionRate::billing_frequency,
              product_id: String
            ) -> void

            def to_hash: -> {
              billing_frequency: MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::SubscriptionRate::billing_frequency,
              product_id: String
            }

            type billing_frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

            module BillingFrequency
              extend MetronomeSDK::Internal::Type::Enum

              MONTHLY: :MONTHLY
              QUARTERLY: :QUARTERLY
              ANNUAL: :ANNUAL
              WEEKLY: :WEEKLY

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::AddSubscription::SubscriptionRate::billing_frequency]
            end
          end
        end

        type archive_commit = { id: String }

        class ArchiveCommit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          def initialize: (id: String) -> void

          def to_hash: -> { id: String }
        end

        type archive_credit = { id: String }

        class ArchiveCredit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          def initialize: (id: String) -> void

          def to_hash: -> { id: String }
        end

        type archive_scheduled_charge = { id: String }

        class ArchiveScheduledCharge < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          def initialize: (id: String) -> void

          def to_hash: -> { id: String }
        end

        type remove_override = { id: String }

        class RemoveOverride < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          def initialize: (id: String) -> void

          def to_hash: -> { id: String }
        end

        type update_commit =
          {
            commit_id: String,
            access_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule,
            applicable_product_ids: ::Array[String]?,
            applicable_product_tags: ::Array[String]?,
            invoice_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule,
            netsuite_sales_order_id: String?,
            product_id: String,
            rollover_fraction: Float?
          }

        class UpdateCommit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor commit_id: String

          attr_reader access_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule?

          def access_schedule=: (
            MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule

          attr_accessor applicable_product_ids: ::Array[String]?

          attr_accessor applicable_product_tags: ::Array[String]?

          attr_reader invoice_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule?

          def invoice_schedule=: (
            MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule

          attr_accessor netsuite_sales_order_id: String?

          attr_reader product_id: String?

          def product_id=: (String) -> String

          attr_accessor rollover_fraction: Float?

          def initialize: (
            commit_id: String,
            ?access_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule,
            ?applicable_product_ids: ::Array[String]?,
            ?applicable_product_tags: ::Array[String]?,
            ?invoice_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule,
            ?netsuite_sales_order_id: String?,
            ?product_id: String,
            ?rollover_fraction: Float?
          ) -> void

          def to_hash: -> {
            commit_id: String,
            access_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule,
            applicable_product_ids: ::Array[String]?,
            applicable_product_tags: ::Array[String]?,
            invoice_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule,
            netsuite_sales_order_id: String?,
            product_id: String,
            rollover_fraction: Float?
          }

          type access_schedule =
            {
              add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::AddScheduleItem],
              remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::RemoveScheduleItem],
              update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::UpdateScheduleItem]
            }

          class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
            attr_reader add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::AddScheduleItem]?

            def add_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::AddScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::AddScheduleItem]

            attr_reader remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::RemoveScheduleItem]?

            def remove_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::RemoveScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::RemoveScheduleItem]

            attr_reader update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::UpdateScheduleItem]?

            def update_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::UpdateScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::UpdateScheduleItem]

            def initialize: (
              ?add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::AddScheduleItem],
              ?remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::RemoveScheduleItem],
              ?update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::UpdateScheduleItem]
            ) -> void

            def to_hash: -> {
              add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::AddScheduleItem],
              remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::RemoveScheduleItem],
              update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::AccessSchedule::UpdateScheduleItem]
            }

            type add_schedule_item =
              { amount: Float, ending_before: Time, starting_at: Time }

            class AddScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor amount: Float

              attr_accessor ending_before: Time

              attr_accessor starting_at: Time

              def initialize: (
                amount: Float,
                ending_before: Time,
                starting_at: Time
              ) -> void

              def to_hash: -> {
                amount: Float,
                ending_before: Time,
                starting_at: Time
              }
            end

            type remove_schedule_item = { id: String }

            class RemoveScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              def initialize: (id: String) -> void

              def to_hash: -> { id: String }
            end

            type update_schedule_item =
              {
                id: String,
                amount: Float,
                ending_before: Time,
                starting_at: Time
              }

            class UpdateScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader starting_at: Time?

              def starting_at=: (Time) -> Time

              def initialize: (
                id: String,
                ?amount: Float,
                ?ending_before: Time,
                ?starting_at: Time
              ) -> void

              def to_hash: -> {
                id: String,
                amount: Float,
                ending_before: Time,
                starting_at: Time
              }
            end
          end

          type invoice_schedule =
            {
              add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::AddScheduleItem],
              remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::RemoveScheduleItem],
              update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::UpdateScheduleItem]
            }

          class InvoiceSchedule < MetronomeSDK::Internal::Type::BaseModel
            attr_reader add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::AddScheduleItem]?

            def add_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::AddScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::AddScheduleItem]

            attr_reader remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::RemoveScheduleItem]?

            def remove_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::RemoveScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::RemoveScheduleItem]

            attr_reader update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::UpdateScheduleItem]?

            def update_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::UpdateScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::UpdateScheduleItem]

            def initialize: (
              ?add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::AddScheduleItem],
              ?remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::RemoveScheduleItem],
              ?update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::UpdateScheduleItem]
            ) -> void

            def to_hash: -> {
              add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::AddScheduleItem],
              remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::RemoveScheduleItem],
              update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCommit::InvoiceSchedule::UpdateScheduleItem]
            }

            type add_schedule_item =
              {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class AddScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor timestamp: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                timestamp: Time,
                ?amount: Float,
                ?quantity: Float,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }
            end

            type remove_schedule_item = { id: String }

            class RemoveScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              def initialize: (id: String) -> void

              def to_hash: -> { id: String }
            end

            type update_schedule_item =
              {
                id: String,
                amount: Float,
                quantity: Float,
                timestamp: Time,
                unit_price: Float
              }

            class UpdateScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader timestamp: Time?

              def timestamp=: (Time) -> Time

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                id: String,
                ?amount: Float,
                ?quantity: Float,
                ?timestamp: Time,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                id: String,
                amount: Float,
                quantity: Float,
                timestamp: Time,
                unit_price: Float
              }
            end
          end
        end

        type update_credit =
          {
            credit_id: String,
            access_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule,
            applicable_product_ids: ::Array[String]?,
            applicable_product_tags: ::Array[String]?,
            netsuite_sales_order_id: String?,
            product_id: String
          }

        class UpdateCredit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor credit_id: String

          attr_reader access_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule?

          def access_schedule=: (
            MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule

          attr_accessor applicable_product_ids: ::Array[String]?

          attr_accessor applicable_product_tags: ::Array[String]?

          attr_accessor netsuite_sales_order_id: String?

          attr_reader product_id: String?

          def product_id=: (String) -> String

          def initialize: (
            credit_id: String,
            ?access_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule,
            ?applicable_product_ids: ::Array[String]?,
            ?applicable_product_tags: ::Array[String]?,
            ?netsuite_sales_order_id: String?,
            ?product_id: String
          ) -> void

          def to_hash: -> {
            credit_id: String,
            access_schedule: MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule,
            applicable_product_ids: ::Array[String]?,
            applicable_product_tags: ::Array[String]?,
            netsuite_sales_order_id: String?,
            product_id: String
          }

          type access_schedule =
            {
              add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::AddScheduleItem],
              remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::RemoveScheduleItem],
              update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::UpdateScheduleItem]
            }

          class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
            attr_reader add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::AddScheduleItem]?

            def add_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::AddScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::AddScheduleItem]

            attr_reader remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::RemoveScheduleItem]?

            def remove_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::RemoveScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::RemoveScheduleItem]

            attr_reader update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::UpdateScheduleItem]?

            def update_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::UpdateScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::UpdateScheduleItem]

            def initialize: (
              ?add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::AddScheduleItem],
              ?remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::RemoveScheduleItem],
              ?update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::UpdateScheduleItem]
            ) -> void

            def to_hash: -> {
              add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::AddScheduleItem],
              remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::RemoveScheduleItem],
              update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateCredit::AccessSchedule::UpdateScheduleItem]
            }

            type add_schedule_item =
              { amount: Float, ending_before: Time, starting_at: Time }

            class AddScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor amount: Float

              attr_accessor ending_before: Time

              attr_accessor starting_at: Time

              def initialize: (
                amount: Float,
                ending_before: Time,
                starting_at: Time
              ) -> void

              def to_hash: -> {
                amount: Float,
                ending_before: Time,
                starting_at: Time
              }
            end

            type remove_schedule_item = { id: String }

            class RemoveScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              def initialize: (id: String) -> void

              def to_hash: -> { id: String }
            end

            type update_schedule_item =
              {
                id: String,
                amount: Float,
                ending_before: Time,
                starting_at: Time
              }

            class UpdateScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader starting_at: Time?

              def starting_at=: (Time) -> Time

              def initialize: (
                id: String,
                ?amount: Float,
                ?ending_before: Time,
                ?starting_at: Time
              ) -> void

              def to_hash: -> {
                id: String,
                amount: Float,
                ending_before: Time,
                starting_at: Time
              }
            end
          end
        end

        type update_prepaid_balance_threshold_configuration =
          {
            commit: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig,
            recharge_to_amount: Float,
            threshold_amount: Float
          }

        class UpdatePrepaidBalanceThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
          attr_reader commit: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit?

          def commit=: (
            MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit
          ) -> MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit

          attr_reader is_enabled: bool?

          def is_enabled=: (bool) -> bool

          attr_reader payment_gate_config: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig?

          def payment_gate_config=: (
            MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig
          ) -> MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig

          attr_reader recharge_to_amount: Float?

          def recharge_to_amount=: (Float) -> Float

          attr_reader threshold_amount: Float?

          def threshold_amount=: (Float) -> Float

          def initialize: (
            ?commit: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit,
            ?is_enabled: bool,
            ?payment_gate_config: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig,
            ?recharge_to_amount: Float,
            ?threshold_amount: Float
          ) -> void

          def to_hash: -> {
            commit: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig,
            recharge_to_amount: Float,
            threshold_amount: Float
          }

          type commit =
            {
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              description: String,
              name: String,
              product_id: String,
              specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit::Specifier]
            }

          class Commit < MetronomeSDK::Internal::Type::BaseModel
            attr_reader applicable_product_ids: ::Array[String]?

            def applicable_product_ids=: (::Array[String]) -> ::Array[String]

            attr_reader applicable_product_tags: ::Array[String]?

            def applicable_product_tags=: (::Array[String]) -> ::Array[String]

            attr_reader description: String?

            def description=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader product_id: String?

            def product_id=: (String) -> String

            attr_reader specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit::Specifier]?

            def specifiers=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit::Specifier]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit::Specifier]

            def initialize: (
              ?applicable_product_ids: ::Array[String],
              ?applicable_product_tags: ::Array[String],
              ?description: String,
              ?name: String,
              ?product_id: String,
              ?specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit::Specifier]
            ) -> void

            def to_hash: -> {
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              description: String,
              name: String,
              product_id: String,
              specifiers: ::Array[MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::Commit::Specifier]
            }

            type specifier =
              {
                presentation_group_values: ::Hash[Symbol, String],
                pricing_group_values: ::Hash[Symbol, String],
                product_id: String,
                product_tags: ::Array[String]
              }

            class Specifier < MetronomeSDK::Internal::Type::BaseModel
              attr_reader presentation_group_values: ::Hash[Symbol, String]?

              def presentation_group_values=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader pricing_group_values: ::Hash[Symbol, String]?

              def pricing_group_values=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader product_id: String?

              def product_id=: (String) -> String

              attr_reader product_tags: ::Array[String]?

              def product_tags=: (::Array[String]) -> ::Array[String]

              def initialize: (
                ?presentation_group_values: ::Hash[Symbol, String],
                ?pricing_group_values: ::Hash[Symbol, String],
                ?product_id: String,
                ?product_tags: ::Array[String]
              ) -> void

              def to_hash: -> {
                presentation_group_values: ::Hash[Symbol, String],
                pricing_group_values: ::Hash[Symbol, String],
                product_id: String,
                product_tags: ::Array[String]
              }
            end
          end

          type payment_gate_config =
            {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            }

          class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type

            attr_reader stripe_config: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig?

            def stripe_config=: (
              MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig
            ) -> MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig

            attr_reader tax_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type?

            def tax_type=: (
              MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type

            def initialize: (
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              ?stripe_config: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
              ?tax_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> void

            def to_hash: -> {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            }

            type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

            module PaymentGateType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE
              EXTERNAL: :EXTERNAL

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type]
            end

            type stripe_config =
              {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

            class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor payment_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

              def initialize: (
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              ) -> void

              def to_hash: -> {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

              type payment_type = :INVOICE | :PAYMENT_INTENT

              module PaymentType
                extend MetronomeSDK::Internal::Type::Enum

                INVOICE: :INVOICE
                PAYMENT_INTENT: :PAYMENT_INTENT

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
              end
            end

            type tax_type = :NONE | :STRIPE

            module TaxType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::UpdatePrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type]
            end
          end
        end

        type update_recurring_commit =
          {
            recurring_commit_id: String,
            access_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::AccessAmount,
            ending_before: Time?,
            invoice_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::InvoiceAmount
          }

        class UpdateRecurringCommit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor recurring_commit_id: String

          attr_reader access_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::AccessAmount?

          def access_amount=: (
            MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::AccessAmount
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::AccessAmount

          attr_accessor ending_before: Time?

          attr_reader invoice_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::InvoiceAmount?

          def invoice_amount=: (
            MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::InvoiceAmount
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::InvoiceAmount

          def initialize: (
            recurring_commit_id: String,
            ?access_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::AccessAmount,
            ?ending_before: Time?,
            ?invoice_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::InvoiceAmount
          ) -> void

          def to_hash: -> {
            recurring_commit_id: String,
            access_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::AccessAmount,
            ending_before: Time?,
            invoice_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCommit::InvoiceAmount
          }

          type access_amount = { quantity: Float, unit_price: Float }

          class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> Float

            def initialize: (?quantity: Float, ?unit_price: Float) -> void

            def to_hash: -> { quantity: Float, unit_price: Float }
          end

          type invoice_amount = { quantity: Float, unit_price: Float }

          class InvoiceAmount < MetronomeSDK::Internal::Type::BaseModel
            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> Float

            def initialize: (?quantity: Float, ?unit_price: Float) -> void

            def to_hash: -> { quantity: Float, unit_price: Float }
          end
        end

        type update_recurring_credit =
          {
            recurring_credit_id: String,
            access_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit::AccessAmount,
            ending_before: Time?
          }

        class UpdateRecurringCredit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor recurring_credit_id: String

          attr_reader access_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit::AccessAmount?

          def access_amount=: (
            MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit::AccessAmount
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit::AccessAmount

          attr_accessor ending_before: Time?

          def initialize: (
            recurring_credit_id: String,
            ?access_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit::AccessAmount,
            ?ending_before: Time?
          ) -> void

          def to_hash: -> {
            recurring_credit_id: String,
            access_amount: MetronomeSDK::V2::ContractEditParams::UpdateRecurringCredit::AccessAmount,
            ending_before: Time?
          }

          type access_amount = { quantity: Float, unit_price: Float }

          class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> Float

            def initialize: (?quantity: Float, ?unit_price: Float) -> void

            def to_hash: -> { quantity: Float, unit_price: Float }
          end
        end

        type update_scheduled_charge =
          {
            scheduled_charge_id: String,
            invoice_schedule: MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule,
            netsuite_sales_order_id: String?
          }

        class UpdateScheduledCharge < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor scheduled_charge_id: String

          attr_reader invoice_schedule: MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule?

          def invoice_schedule=: (
            MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule

          attr_accessor netsuite_sales_order_id: String?

          def initialize: (
            scheduled_charge_id: String,
            ?invoice_schedule: MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule,
            ?netsuite_sales_order_id: String?
          ) -> void

          def to_hash: -> {
            scheduled_charge_id: String,
            invoice_schedule: MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule,
            netsuite_sales_order_id: String?
          }

          type invoice_schedule =
            {
              add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::AddScheduleItem],
              remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::RemoveScheduleItem],
              update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::UpdateScheduleItem]
            }

          class InvoiceSchedule < MetronomeSDK::Internal::Type::BaseModel
            attr_reader add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::AddScheduleItem]?

            def add_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::AddScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::AddScheduleItem]

            attr_reader remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::RemoveScheduleItem]?

            def remove_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::RemoveScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::RemoveScheduleItem]

            attr_reader update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::UpdateScheduleItem]?

            def update_schedule_items=: (
              ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::UpdateScheduleItem]
            ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::UpdateScheduleItem]

            def initialize: (
              ?add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::AddScheduleItem],
              ?remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::RemoveScheduleItem],
              ?update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::UpdateScheduleItem]
            ) -> void

            def to_hash: -> {
              add_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::AddScheduleItem],
              remove_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::RemoveScheduleItem],
              update_schedule_items: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateScheduledCharge::InvoiceSchedule::UpdateScheduleItem]
            }

            type add_schedule_item =
              {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class AddScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor timestamp: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                timestamp: Time,
                ?amount: Float,
                ?quantity: Float,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }
            end

            type remove_schedule_item = { id: String }

            class RemoveScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              def initialize: (id: String) -> void

              def to_hash: -> { id: String }
            end

            type update_schedule_item =
              {
                id: String,
                amount: Float,
                quantity: Float,
                timestamp: Time,
                unit_price: Float
              }

            class UpdateScheduleItem < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader timestamp: Time?

              def timestamp=: (Time) -> Time

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize: (
                id: String,
                ?amount: Float,
                ?quantity: Float,
                ?timestamp: Time,
                ?unit_price: Float
              ) -> void

              def to_hash: -> {
                id: String,
                amount: Float,
                quantity: Float,
                timestamp: Time,
                unit_price: Float
              }
            end
          end
        end

        type update_spend_threshold_configuration =
          {
            commit: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig,
            threshold_amount: Float
          }

        class UpdateSpendThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
          attr_reader commit: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::Commit?

          def commit=: (
            MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::Commit
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::Commit

          attr_reader is_enabled: bool?

          def is_enabled=: (bool) -> bool

          attr_reader payment_gate_config: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig?

          def payment_gate_config=: (
            MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig
          ) -> MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig

          attr_reader threshold_amount: Float?

          def threshold_amount=: (Float) -> Float

          def initialize: (
            ?commit: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::Commit,
            ?is_enabled: bool,
            ?payment_gate_config: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig,
            ?threshold_amount: Float
          ) -> void

          def to_hash: -> {
            commit: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig,
            threshold_amount: Float
          }

          type commit =
            { description: String, name: String, product_id: String }

          class Commit < MetronomeSDK::Internal::Type::BaseModel
            attr_reader description: String?

            def description=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader product_id: String?

            def product_id=: (String) -> String

            def initialize: (
              ?description: String,
              ?name: String,
              ?product_id: String
            ) -> void

            def to_hash: -> {
              description: String,
              name: String,
              product_id: String
            }
          end

          type payment_gate_config =
            {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::tax_type
            }

          class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type

            attr_reader stripe_config: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig?

            def stripe_config=: (
              MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig
            ) -> MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig

            attr_reader tax_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::tax_type?

            def tax_type=: (
              MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::tax_type

            def initialize: (
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              ?stripe_config: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
              ?tax_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> void

            def to_hash: -> {
              payment_gate_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::tax_type
            }

            type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

            module PaymentGateType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE
              EXTERNAL: :EXTERNAL

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::payment_gate_type]
            end

            type stripe_config =
              {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

            class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor payment_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

              def initialize: (
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              ) -> void

              def to_hash: -> {
                payment_type: MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

              type payment_type = :INVOICE | :PAYMENT_INTENT

              module PaymentType
                extend MetronomeSDK::Internal::Type::Enum

                INVOICE: :INVOICE
                PAYMENT_INTENT: :PAYMENT_INTENT

                def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
              end
            end

            type tax_type = :NONE | :STRIPE

            module TaxType
              extend MetronomeSDK::Internal::Type::Enum

              NONE: :NONE
              STRIPE: :STRIPE

              def self?.values: -> ::Array[MetronomeSDK::Models::V2::ContractEditParams::UpdateSpendThresholdConfiguration::PaymentGateConfig::tax_type]
            end
          end
        end

        type update_subscription =
          {
            subscription_id: String,
            ending_before: Time?,
            quantity_updates: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription::QuantityUpdate]
          }

        class UpdateSubscription < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor subscription_id: String

          attr_accessor ending_before: Time?

          attr_reader quantity_updates: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription::QuantityUpdate]?

          def quantity_updates=: (
            ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription::QuantityUpdate]
          ) -> ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription::QuantityUpdate]

          def initialize: (
            subscription_id: String,
            ?ending_before: Time?,
            ?quantity_updates: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription::QuantityUpdate]
          ) -> void

          def to_hash: -> {
            subscription_id: String,
            ending_before: Time?,
            quantity_updates: ::Array[MetronomeSDK::V2::ContractEditParams::UpdateSubscription::QuantityUpdate]
          }

          type quantity_update =
            { starting_at: Time, quantity: Float, quantity_delta: Float }

          class QuantityUpdate < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor starting_at: Time

            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            attr_reader quantity_delta: Float?

            def quantity_delta=: (Float) -> Float

            def initialize: (
              starting_at: Time,
              ?quantity: Float,
              ?quantity_delta: Float
            ) -> void

            def to_hash: -> {
              starting_at: Time,
              quantity: Float,
              quantity_delta: Float
            }
          end
        end
      end
    end
  end
end
