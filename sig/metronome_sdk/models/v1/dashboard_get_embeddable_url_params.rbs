module MetronomeSDK
  module Models
    module V1
      type dashboard_get_embeddable_url_params =
        {
          customer_id: String,
          dashboard: MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::dashboard,
          bm_group_key_overrides: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::BmGroupKeyOverride],
          color_overrides: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::ColorOverride],
          dashboard_options: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::DashboardOption]
        }
        & MetronomeSDK::Internal::Type::request_parameters

      class DashboardGetEmbeddableURLParams < MetronomeSDK::Internal::Type::BaseModel
        extend MetronomeSDK::Internal::Type::RequestParameters::Converter
        include MetronomeSDK::Internal::Type::RequestParameters

        attr_accessor customer_id: String

        attr_accessor dashboard: MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::dashboard

        attr_reader bm_group_key_overrides: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::BmGroupKeyOverride]?

        def bm_group_key_overrides=: (
          ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::BmGroupKeyOverride]
        ) -> ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::BmGroupKeyOverride]

        attr_reader color_overrides: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::ColorOverride]?

        def color_overrides=: (
          ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::ColorOverride]
        ) -> ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::ColorOverride]

        attr_reader dashboard_options: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::DashboardOption]?

        def dashboard_options=: (
          ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::DashboardOption]
        ) -> ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::DashboardOption]

        def initialize: (
          customer_id: String,
          dashboard: MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::dashboard,
          ?bm_group_key_overrides: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::BmGroupKeyOverride],
          ?color_overrides: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::ColorOverride],
          ?dashboard_options: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::DashboardOption],
          ?request_options: MetronomeSDK::request_opts
        ) -> void

        def to_hash: -> {
          customer_id: String,
          dashboard: MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::dashboard,
          bm_group_key_overrides: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::BmGroupKeyOverride],
          color_overrides: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::ColorOverride],
          dashboard_options: ::Array[MetronomeSDK::V1::DashboardGetEmbeddableURLParams::DashboardOption],
          request_options: MetronomeSDK::RequestOptions
        }

        type dashboard = :invoices | :usage | :credits

        module Dashboard
          extend MetronomeSDK::Internal::Type::Enum

          INVOICES: :invoices
          USAGE: :usage
          CREDITS: :credits

          def self?.values: -> ::Array[MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::dashboard]
        end

        type bm_group_key_override =
          {
            group_key_name: String,
            display_name: String,
            value_display_names: ::Hash[Symbol, top]
          }

        class BmGroupKeyOverride < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor group_key_name: String

          attr_reader display_name: String?

          def display_name=: (String) -> String

          attr_reader value_display_names: ::Hash[Symbol, top]?

          def value_display_names=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

          def initialize: (
            group_key_name: String,
            ?display_name: String,
            ?value_display_names: ::Hash[Symbol, top]
          ) -> void

          def to_hash: -> {
            group_key_name: String,
            display_name: String,
            value_display_names: ::Hash[Symbol, top]
          }
        end

        type color_override =
          {
            name: MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::ColorOverride::name_,
            value: String
          }

        class ColorOverride < MetronomeSDK::Internal::Type::BaseModel
          attr_reader name: MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::ColorOverride::name_?

          def name=: (
            MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::ColorOverride::name_
          ) -> MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::ColorOverride::name_

          attr_reader value: String?

          def value=: (String) -> String

          def initialize: (
            ?name: MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::ColorOverride::name_,
            ?value: String
          ) -> void

          def to_hash: -> {
            name: MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::ColorOverride::name_,
            value: String
          }

          type name_ =
            :Gray_dark
            | :Gray_medium
            | :Gray_light
            | :Gray_extralight
            | :White
            | :Primary_medium
            | :Primary_light
            | :UsageLine_0
            | :UsageLine_1
            | :UsageLine_2
            | :UsageLine_3
            | :UsageLine_4
            | :UsageLine_5
            | :UsageLine_6
            | :UsageLine_7
            | :UsageLine_8
            | :UsageLine_9
            | :Primary_green
            | :Primary_red

          module Name
            extend MetronomeSDK::Internal::Type::Enum

            GRAY_DARK: :Gray_dark
            GRAY_MEDIUM: :Gray_medium
            GRAY_LIGHT: :Gray_light
            GRAY_EXTRALIGHT: :Gray_extralight
            WHITE: :White
            PRIMARY_MEDIUM: :Primary_medium
            PRIMARY_LIGHT: :Primary_light
            USAGE_LINE_0: :UsageLine_0
            USAGE_LINE_1: :UsageLine_1
            USAGE_LINE_2: :UsageLine_2
            USAGE_LINE_3: :UsageLine_3
            USAGE_LINE_4: :UsageLine_4
            USAGE_LINE_5: :UsageLine_5
            USAGE_LINE_6: :UsageLine_6
            USAGE_LINE_7: :UsageLine_7
            USAGE_LINE_8: :UsageLine_8
            USAGE_LINE_9: :UsageLine_9
            PRIMARY_GREEN: :Primary_green
            PRIMARY_RED: :Primary_red

            def self?.values: -> ::Array[MetronomeSDK::Models::V1::DashboardGetEmbeddableURLParams::ColorOverride::name_]
          end
        end

        type dashboard_option = { key: String, value: String }

        class DashboardOption < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor key: String

          attr_accessor value: String

          def initialize: (key: String, value: String) -> void

          def to_hash: -> { key: String, value: String }
        end
      end
    end
  end
end
