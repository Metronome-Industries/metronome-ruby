module MetronomeSDK
  module Models
    module V1
      type contract_list_response =
        { data: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data] }

      class ContractListResponse < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor data: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data]

        def initialize: (
          data: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data]
        ) -> void

        def to_hash: -> {
          data: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data]
        }

        type data =
          {
            id: String,
            amendments: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment],
            current: MetronomeSDK::Models::V1::ContractListResponse::Data::Current,
            customer_id: String,
            initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial,
            archived_at: Time,
            custom_fields: ::Hash[Symbol, String],
            customer_billing_provider_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration,
            prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration,
            scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::scheduled_charges_on_usage_invoices,
            spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration,
            uniqueness_key: String
          }

        class Data < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amendments: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment]

          attr_accessor current: MetronomeSDK::Models::V1::ContractListResponse::Data::Current

          attr_accessor customer_id: String

          attr_accessor initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial

          attr_reader archived_at: Time?

          def archived_at=: (Time) -> Time

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader customer_billing_provider_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration?

          def customer_billing_provider_configuration=: (
            MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration
          ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration

          attr_reader prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration?

          def prepaid_balance_threshold_configuration=: (
            MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration
          ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration

          attr_reader scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::scheduled_charges_on_usage_invoices?

          def scheduled_charges_on_usage_invoices=: (
            MetronomeSDK::Models::V1::ContractListResponse::Data::scheduled_charges_on_usage_invoices
          ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::scheduled_charges_on_usage_invoices

          attr_reader spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration?

          def spend_threshold_configuration=: (
            MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration
          ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration

          attr_reader uniqueness_key: String?

          def uniqueness_key=: (String) -> String

          def initialize: (
            id: String,
            amendments: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment],
            current: MetronomeSDK::Models::V1::ContractListResponse::Data::Current,
            customer_id: String,
            initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial,
            ?archived_at: Time,
            ?custom_fields: ::Hash[Symbol, String],
            ?customer_billing_provider_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration,
            ?prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration,
            ?scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::scheduled_charges_on_usage_invoices,
            ?spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration,
            ?uniqueness_key: String
          ) -> void

          def to_hash: -> {
            id: String,
            amendments: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment],
            current: MetronomeSDK::Models::V1::ContractListResponse::Data::Current,
            customer_id: String,
            initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial,
            archived_at: Time,
            custom_fields: ::Hash[Symbol, String],
            customer_billing_provider_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration,
            prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration,
            scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::scheduled_charges_on_usage_invoices,
            spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration,
            uniqueness_key: String
          }

          type amendment =
            {
              id: String,
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge],
              starting_at: Time,
              credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit],
              discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount],
              netsuite_sales_order_id: String,
              professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ProfessionalService],
              reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty],
              salesforce_opportunity_id: String
            }

          class Amendment < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit]

            attr_accessor created_at: Time

            attr_accessor created_by: String

            attr_accessor overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override]

            attr_accessor scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge]

            attr_accessor starting_at: Time

            attr_reader credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit]?

            def credits=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit]

            attr_reader discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount]?

            def discounts=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount]

            attr_reader netsuite_sales_order_id: String?

            def netsuite_sales_order_id=: (String) -> String

            attr_reader professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ProfessionalService]?

            def professional_services=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ProfessionalService]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ProfessionalService]

            attr_reader reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty]?

            def reseller_royalties=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty]

            attr_reader salesforce_opportunity_id: String?

            def salesforce_opportunity_id=: (String) -> String

            def initialize: (
              id: String,
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge],
              starting_at: Time,
              ?credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit],
              ?discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount],
              ?netsuite_sales_order_id: String,
              ?professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ProfessionalService],
              ?reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty],
              ?salesforce_opportunity_id: String
            ) -> void

            def to_hash: -> {
              id: String,
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge],
              starting_at: Time,
              credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit],
              discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount],
              netsuite_sales_order_id: String,
              professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ProfessionalService],
              reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty],
              salesforce_opportunity_id: String
            }

            type commit =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule,
                amount: Float,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                archived_at: Time,
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceContract,
                invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::rate_type,
                rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::RolledOverFrom,
                rollover_fraction: Float,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Specifier],
                uniqueness_key: String
              }

            class Commit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Product

              attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::type_

              attr_reader access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule?

              def access_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader applicable_contract_ids: ::Array[String]?

              def applicable_contract_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader archived_at: Time?

              def archived_at=: (Time) -> Time

              attr_reader balance: Float?

              def balance=: (Float) -> Float

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Contract

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceContract?

              def invoice_contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceContract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceContract

              attr_reader invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule?

              def invoice_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule

              attr_reader ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::ledger]?

              def ledger=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::ledger]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::ledger]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::rate_type

              attr_reader rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::RolledOverFrom?

              def rolled_over_from=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::RolledOverFrom
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::RolledOverFrom

              attr_reader rollover_fraction: Float?

              def rollover_fraction=: (Float) -> Float

              attr_reader salesforce_opportunity_id: String?

              def salesforce_opportunity_id=: (String) -> String

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Specifier]

              attr_reader uniqueness_key: String?

              def uniqueness_key=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::type_,
                ?access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule,
                ?amount: Float,
                ?applicable_contract_ids: ::Array[String],
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?archived_at: Time,
                ?balance: Float,
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Contract,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceContract,
                ?invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule,
                ?ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::ledger],
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?priority: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::rate_type,
                ?rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::RolledOverFrom,
                ?rollover_fraction: Float,
                ?salesforce_opportunity_id: String,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Specifier],
                ?uniqueness_key: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule,
                amount: Float,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                archived_at: Time,
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceContract,
                invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::rate_type,
                rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::RolledOverFrom,
                rollover_fraction: Float,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Specifier],
                uniqueness_key: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type type_ = :PREPAID | :POSTPAID

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                PREPAID: :PREPAID
                POSTPAID: :POSTPAID

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::type_]
              end

              type access_schedule =
                {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::CreditType
                }

              class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::ScheduleItem]

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::CreditType

                def initialize: (
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::ScheduleItem],
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::CreditType
                ) -> void

                def to_hash: -> {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::AccessSchedule::CreditType
                }

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor ending_before: Time

                  attr_accessor starting_at: Time

                  def initialize: (
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type invoice_contract = { id: String }

              class InvoiceContract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type invoice_schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::ScheduleItem]
                }

              class InvoiceSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::InvoiceSchedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end

              type ledger =
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember0
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember1
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember2
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember3
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember4
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember5
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember6
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember7
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember8
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember9
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember10
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember11
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember12

              module Ledger
                extend MetronomeSDK::Internal::Type::Union

                type union_member0 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember0::type_
                  }

                class UnionMember0 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember0::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember0::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember0::type_
                  }

                  type type_ = :PREPAID_COMMIT_SEGMENT_START

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_SEGMENT_START: :PREPAID_COMMIT_SEGMENT_START

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember0::type_]
                  end
                end

                type union_member1 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember1::type_
                  }

                class UnionMember1 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember1::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember1::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember1::type_
                  }

                  type type_ = :PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION: :PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember1::type_]
                  end
                end

                type union_member2 =
                  {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember2::type_
                  }

                class UnionMember2 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor new_contract_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember2::type_

                  def initialize: (
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember2::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember2::type_
                  }

                  type type_ = :PREPAID_COMMIT_ROLLOVER

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_ROLLOVER: :PREPAID_COMMIT_ROLLOVER

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember2::type_]
                  end
                end

                type union_member3 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember3::type_
                  }

                class UnionMember3 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember3::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember3::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember3::type_
                  }

                  type type_ = :PREPAID_COMMIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_EXPIRATION: :PREPAID_COMMIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember3::type_]
                  end
                end

                type union_member4 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember4::type_
                  }

                class UnionMember4 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember4::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember4::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember4::type_
                  }

                  type type_ = :PREPAID_COMMIT_CANCELED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_CANCELED: :PREPAID_COMMIT_CANCELED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember4::type_]
                  end
                end

                type union_member5 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember5::type_
                  }

                class UnionMember5 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember5::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember5::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember5::type_
                  }

                  type type_ = :PREPAID_COMMIT_CREDITED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_CREDITED: :PREPAID_COMMIT_CREDITED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember5::type_]
                  end
                end

                type union_member6 =
                  {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember6::type_
                  }

                class UnionMember6 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember6::type_

                  def initialize: (
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember6::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember6::type_
                  }

                  type type_ = :POSTPAID_COMMIT_INITIAL_BALANCE

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_INITIAL_BALANCE: :POSTPAID_COMMIT_INITIAL_BALANCE

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember6::type_]
                  end
                end

                type union_member7 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember7::type_
                  }

                class UnionMember7 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember7::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember7::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember7::type_
                  }

                  type type_ = :POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION: :POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember7::type_]
                  end
                end

                type union_member8 =
                  {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember8::type_
                  }

                class UnionMember8 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor new_contract_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember8::type_

                  def initialize: (
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember8::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember8::type_
                  }

                  type type_ = :POSTPAID_COMMIT_ROLLOVER

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_ROLLOVER: :POSTPAID_COMMIT_ROLLOVER

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember8::type_]
                  end
                end

                type union_member9 =
                  {
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember9::type_
                  }

                class UnionMember9 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember9::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember9::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember9::type_
                  }

                  type type_ = :POSTPAID_COMMIT_TRUEUP

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_TRUEUP: :POSTPAID_COMMIT_TRUEUP

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember9::type_]
                  end
                end

                type union_member10 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember10::type_
                  }

                class UnionMember10 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember10::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember10::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember10::type_
                  }

                  type type_ = :PREPAID_COMMIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_MANUAL: :PREPAID_COMMIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember10::type_]
                  end
                end

                type union_member11 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember11::type_
                  }

                class UnionMember11 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember11::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember11::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember11::type_
                  }

                  type type_ = :POSTPAID_COMMIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_MANUAL: :POSTPAID_COMMIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember11::type_]
                  end
                end

                type union_member12 =
                  {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember12::type_
                  }

                class UnionMember12 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember12::type_

                  def initialize: (
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember12::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember12::type_
                  }

                  type type_ = :POSTPAID_COMMIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_EXPIRATION: :POSTPAID_COMMIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::Ledger::UnionMember12::type_]
                  end
                end

                def self?.variants: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::ledger]
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Commit::rate_type]
              end

              type rolled_over_from = { commit_id: String, contract_id: String }

              class RolledOverFrom < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor commit_id: String

                attr_accessor contract_id: String

                def initialize: (commit_id: String, contract_id: String) -> void

                def to_hash: -> { commit_id: String, contract_id: String }
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type override =
              {
                id: String,
                starting_at: Time,
                applicable_product_tags: ::Array[String],
                credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::CreditType,
                ending_before: Time,
                entitled: bool,
                is_commit_specific: bool,
                is_prorated: bool,
                multiplier: Float,
                override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideSpecifier],
                override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideTier],
                overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate,
                price: Float,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Product,
                quantity: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::rate_type,
                target: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::target,
                tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Tier],
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::type_,
                value: ::Hash[Symbol, top]
              }

            class Override < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor starting_at: Time

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::CreditType?

              def credit_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::CreditType
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::CreditType

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader entitled: bool?

              def entitled=: (bool) -> bool

              attr_reader is_commit_specific: bool?

              def is_commit_specific=: (bool) -> bool

              attr_reader is_prorated: bool?

              def is_prorated=: (bool) -> bool

              attr_reader multiplier: Float?

              def multiplier=: (Float) -> Float

              attr_reader override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideSpecifier]?

              def override_specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideSpecifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideSpecifier]

              attr_reader override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideTier]?

              def override_tiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideTier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideTier]

              attr_reader overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate?

              def overwrite_rate=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate

              attr_reader price: Float?

              def price=: (Float) -> Float

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Product?

              def product=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Product
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Product

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::rate_type

              attr_reader target: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::target?

              def target=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::target
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::target

              attr_reader tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Tier]?

              def tiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Tier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Tier]

              attr_reader type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::type_?

              def type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::type_
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::type_

              attr_reader value: ::Hash[Symbol, top]?

              def value=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

              def initialize: (
                id: String,
                starting_at: Time,
                ?applicable_product_tags: ::Array[String],
                ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::CreditType,
                ?ending_before: Time,
                ?entitled: bool,
                ?is_commit_specific: bool,
                ?is_prorated: bool,
                ?multiplier: Float,
                ?override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideSpecifier],
                ?override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideTier],
                ?overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate,
                ?price: Float,
                ?priority: Float,
                ?product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Product,
                ?quantity: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::rate_type,
                ?target: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::target,
                ?tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Tier],
                ?type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::type_,
                ?value: ::Hash[Symbol, top]
              ) -> void

              def to_hash: -> {
                id: String,
                starting_at: Time,
                applicable_product_tags: ::Array[String],
                credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::CreditType,
                ending_before: Time,
                entitled: bool,
                is_commit_specific: bool,
                is_prorated: bool,
                multiplier: Float,
                override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideSpecifier],
                override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverrideTier],
                overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate,
                price: Float,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Product,
                quantity: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::rate_type,
                target: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::target,
                tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::Tier],
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::type_,
                value: ::Hash[Symbol, top]
              }

              type credit_type = { id: String, name: String }

              class CreditType < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type override_specifier =
                {
                  commit_ids: ::Array[String],
                  presentation_group_values: ::Hash[Symbol, String?],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String],
                  recurring_commit_ids: ::Array[String],
                  recurring_credit_ids: ::Array[String]
                }

              class OverrideSpecifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader commit_ids: ::Array[String]?

                def commit_ids=: (::Array[String]) -> ::Array[String]

                attr_reader presentation_group_values: ::Hash[Symbol, String?]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String?]
                ) -> ::Hash[Symbol, String?]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                attr_reader recurring_commit_ids: ::Array[String]?

                def recurring_commit_ids=: (::Array[String]) -> ::Array[String]

                attr_reader recurring_credit_ids: ::Array[String]?

                def recurring_credit_ids=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?commit_ids: ::Array[String],
                  ?presentation_group_values: ::Hash[Symbol, String?],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String],
                  ?recurring_commit_ids: ::Array[String],
                  ?recurring_credit_ids: ::Array[String]
                ) -> void

                def to_hash: -> {
                  commit_ids: ::Array[String],
                  presentation_group_values: ::Hash[Symbol, String?],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String],
                  recurring_commit_ids: ::Array[String],
                  recurring_credit_ids: ::Array[String]
                }
              end

              type override_tier = { multiplier: Float, size: Float }

              class OverrideTier < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor multiplier: Float

                attr_reader size: Float?

                def size=: (Float) -> Float

                def initialize: (multiplier: Float, ?size: Float) -> void

                def to_hash: -> { multiplier: Float, size: Float }
              end

              type overwrite_rate =
                {
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::rate_type,
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::CreditType,
                  custom_rate: ::Hash[Symbol, top],
                  is_prorated: bool,
                  price: Float,
                  quantity: Float,
                  tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::Tier]
                }

              class OverwriteRate < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::rate_type

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::CreditType

                attr_reader custom_rate: ::Hash[Symbol, top]?

                def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

                attr_reader is_prorated: bool?

                def is_prorated=: (bool) -> bool

                attr_reader price: Float?

                def price=: (Float) -> Float

                attr_reader quantity: Float?

                def quantity=: (Float) -> Float

                attr_reader tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::Tier]?

                def tiers=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::Tier]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::Tier]

                def initialize: (
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::rate_type,
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::CreditType,
                  ?custom_rate: ::Hash[Symbol, top],
                  ?is_prorated: bool,
                  ?price: Float,
                  ?quantity: Float,
                  ?tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::Tier]
                ) -> void

                def to_hash: -> {
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::rate_type,
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::CreditType,
                  custom_rate: ::Hash[Symbol, top],
                  is_prorated: bool,
                  price: Float,
                  quantity: Float,
                  tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::Tier]
                }

                type rate_type =
                  :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

                module RateType
                  extend MetronomeSDK::Internal::Type::Enum

                  FLAT: :FLAT
                  PERCENTAGE: :PERCENTAGE
                  SUBSCRIPTION: :SUBSCRIPTION
                  TIERED: :TIERED
                  CUSTOM: :CUSTOM

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::OverwriteRate::rate_type]
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type tier = { price: Float, size: Float }

                class Tier < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor price: Float

                  attr_reader size: Float?

                  def size=: (Float) -> Float

                  def initialize: (price: Float, ?size: Float) -> void

                  def to_hash: -> { price: Float, size: Float }
                end
              end

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type rate_type =
                :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                FLAT: :FLAT
                PERCENTAGE: :PERCENTAGE
                SUBSCRIPTION: :SUBSCRIPTION
                TIERED: :TIERED
                CUSTOM: :CUSTOM

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::rate_type]
              end

              type target = :COMMIT_RATE | :LIST_RATE

              module Target
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::target]
              end

              type tier = { price: Float, size: Float }

              class Tier < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor price: Float

                attr_reader size: Float?

                def size=: (Float) -> Float

                def initialize: (price: Float, ?size: Float) -> void

                def to_hash: -> { price: Float, size: Float }
              end

              type type_ = :OVERWRITE | :MULTIPLIER | :TIERED

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                OVERWRITE: :OVERWRITE
                MULTIPLIER: :MULTIPLIER
                TIERED: :TIERED

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Override::type_]
              end
            end

            type scheduled_charge =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule,
                archived_at: Time,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

            class ScheduledCharge < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Product

              attr_accessor schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule

              attr_reader archived_at: Time?

              def archived_at=: (Time) -> Time

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule,
                ?archived_at: Time,
                ?custom_fields: ::Hash[Symbol, String],
                ?name: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule,
                archived_at: Time,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::ScheduleItem]
                }

              class Schedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ScheduledCharge::Schedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end
            end

            type credit =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::rate_type,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Specifier],
                uniqueness_key: String
              }

            class Credit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Product

              attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::type_

              attr_reader access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule?

              def access_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule

              attr_reader applicable_contract_ids: ::Array[String]?

              def applicable_contract_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader balance: Float?

              def balance=: (Float) -> Float

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Contract

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::ledger]?

              def ledger=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::ledger]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::ledger]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::rate_type

              attr_reader salesforce_opportunity_id: String?

              def salesforce_opportunity_id=: (String) -> String

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Specifier]

              attr_reader uniqueness_key: String?

              def uniqueness_key=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::type_,
                ?access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule,
                ?applicable_contract_ids: ::Array[String],
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?balance: Float,
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Contract,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::ledger],
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?priority: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::rate_type,
                ?salesforce_opportunity_id: String,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Specifier],
                ?uniqueness_key: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::rate_type,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Specifier],
                uniqueness_key: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type type_ = :CREDIT

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                CREDIT: :CREDIT

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::type_]
              end

              type access_schedule =
                {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::CreditType
                }

              class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::ScheduleItem]

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::CreditType

                def initialize: (
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::ScheduleItem],
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::CreditType
                ) -> void

                def to_hash: -> {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::AccessSchedule::CreditType
                }

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor ending_before: Time

                  attr_accessor starting_at: Time

                  def initialize: (
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type ledger =
                MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember0
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember1
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember2
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember3
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember4
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember5

              module Ledger
                extend MetronomeSDK::Internal::Type::Union

                type union_member0 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember0::type_
                  }

                class UnionMember0 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember0::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember0::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember0::type_
                  }

                  type type_ = :CREDIT_SEGMENT_START

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_SEGMENT_START: :CREDIT_SEGMENT_START

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember0::type_]
                  end
                end

                type union_member1 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember1::type_
                  }

                class UnionMember1 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember1::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember1::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember1::type_
                  }

                  type type_ = :CREDIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_AUTOMATED_INVOICE_DEDUCTION: :CREDIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember1::type_]
                  end
                end

                type union_member2 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember2::type_
                  }

                class UnionMember2 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember2::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember2::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember2::type_
                  }

                  type type_ = :CREDIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_EXPIRATION: :CREDIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember2::type_]
                  end
                end

                type union_member3 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember3::type_
                  }

                class UnionMember3 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember3::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember3::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember3::type_
                  }

                  type type_ = :CREDIT_CANCELED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_CANCELED: :CREDIT_CANCELED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember3::type_]
                  end
                end

                type union_member4 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember4::type_
                  }

                class UnionMember4 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember4::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember4::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember4::type_
                  }

                  type type_ = :CREDIT_CREDITED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_CREDITED: :CREDIT_CREDITED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember4::type_]
                  end
                end

                type union_member5 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember5::type_
                  }

                class UnionMember5 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember5::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember5::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember5::type_
                  }

                  type type_ = :CREDIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_MANUAL: :CREDIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::Ledger::UnionMember5::type_]
                  end
                end

                def self?.variants: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::ledger]
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Credit::rate_type]
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type discount =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

            class Discount < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Product

              attr_accessor schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule,
                ?custom_fields: ::Hash[Symbol, String],
                ?name: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::ScheduleItem]
                }

              class Schedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::Discount::Schedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end
            end

            type professional_service =
              {
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                netsuite_sales_order_id: String
              }

            class ProfessionalService < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor max_amount: Float

              attr_accessor product_id: String

              attr_accessor quantity: Float

              attr_accessor unit_price: Float

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                netsuite_sales_order_id: String
              }
            end

            type reseller_royalty =
              {
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty::reseller_type,
                aws_account_number: String,
                aws_offer_id: String,
                aws_payer_reference_id: String,
                ending_before: Time?,
                fraction: Float,
                gcp_account_id: String,
                gcp_offer_id: String,
                netsuite_reseller_id: String,
                reseller_contract_value: Float,
                starting_at: Time
              }

            class ResellerRoyalty < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty::reseller_type

              attr_reader aws_account_number: String?

              def aws_account_number=: (String) -> String

              attr_reader aws_offer_id: String?

              def aws_offer_id=: (String) -> String

              attr_reader aws_payer_reference_id: String?

              def aws_payer_reference_id=: (String) -> String

              attr_accessor ending_before: Time?

              attr_reader fraction: Float?

              def fraction=: (Float) -> Float

              attr_reader gcp_account_id: String?

              def gcp_account_id=: (String) -> String

              attr_reader gcp_offer_id: String?

              def gcp_offer_id=: (String) -> String

              attr_reader netsuite_reseller_id: String?

              def netsuite_reseller_id=: (String) -> String

              attr_reader reseller_contract_value: Float?

              def reseller_contract_value=: (Float) -> Float

              attr_reader starting_at: Time?

              def starting_at=: (Time) -> Time

              def initialize: (
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty::reseller_type,
                ?aws_account_number: String,
                ?aws_offer_id: String,
                ?aws_payer_reference_id: String,
                ?ending_before: Time?,
                ?fraction: Float,
                ?gcp_account_id: String,
                ?gcp_offer_id: String,
                ?netsuite_reseller_id: String,
                ?reseller_contract_value: Float,
                ?starting_at: Time
              ) -> void

              def to_hash: -> {
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty::reseller_type,
                aws_account_number: String,
                aws_offer_id: String,
                aws_payer_reference_id: String,
                ending_before: Time?,
                fraction: Float,
                gcp_account_id: String,
                gcp_offer_id: String,
                netsuite_reseller_id: String,
                reseller_contract_value: Float,
                starting_at: Time
              }

              type reseller_type =
                :AWS | :AWS_PRO_SERVICE | :GCP | :GCP_PRO_SERVICE

              module ResellerType
                extend MetronomeSDK::Internal::Type::Enum

                AWS: :AWS
                AWS_PRO_SERVICE: :AWS_PRO_SERVICE
                GCP: :GCP
                GCP_PRO_SERVICE: :GCP_PRO_SERVICE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Amendment::ResellerRoyalty::reseller_type]
              end
            end
          end

          type current =
            {
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge],
              starting_at: Time,
              transitions: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition],
              usage_statement_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule,
              credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit],
              discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount],
              ending_before: Time,
              name: String,
              net_payment_terms_days: Float,
              netsuite_sales_order_id: String,
              prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration,
              professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ProfessionalService],
              rate_card_id: String,
              recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit],
              recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit],
              reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty],
              salesforce_opportunity_id: String,
              scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::scheduled_charges_on_usage_invoices,
              spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration,
              total_contract_value: Float,
              usage_filter: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter
            }

          class Current < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit]

            attr_accessor created_at: Time

            attr_accessor created_by: String

            attr_accessor overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override]

            attr_accessor scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge]

            attr_accessor starting_at: Time

            attr_accessor transitions: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition]

            attr_accessor usage_statement_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule

            attr_reader credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit]?

            def credits=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit]

            attr_reader discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount]?

            def discounts=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount]

            attr_reader ending_before: Time?

            def ending_before=: (Time) -> Time

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader net_payment_terms_days: Float?

            def net_payment_terms_days=: (Float) -> Float

            attr_reader netsuite_sales_order_id: String?

            def netsuite_sales_order_id=: (String) -> String

            attr_reader prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration?

            def prepaid_balance_threshold_configuration=: (
              MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration
            ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration

            attr_reader professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ProfessionalService]?

            def professional_services=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ProfessionalService]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ProfessionalService]

            attr_reader rate_card_id: String?

            def rate_card_id=: (String) -> String

            attr_reader recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit]?

            def recurring_commits=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit]

            attr_reader recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit]?

            def recurring_credits=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit]

            attr_reader reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty]?

            def reseller_royalties=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty]

            attr_reader salesforce_opportunity_id: String?

            def salesforce_opportunity_id=: (String) -> String

            attr_reader scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::scheduled_charges_on_usage_invoices?

            def scheduled_charges_on_usage_invoices=: (
              MetronomeSDK::Models::V1::ContractListResponse::Data::Current::scheduled_charges_on_usage_invoices
            ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::scheduled_charges_on_usage_invoices

            attr_reader spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration?

            def spend_threshold_configuration=: (
              MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration
            ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration

            attr_reader total_contract_value: Float?

            def total_contract_value=: (Float) -> Float

            attr_reader usage_filter: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter?

            def usage_filter=: (
              MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter
            ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter

            def initialize: (
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge],
              starting_at: Time,
              transitions: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition],
              usage_statement_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule,
              ?credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit],
              ?discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount],
              ?ending_before: Time,
              ?name: String,
              ?net_payment_terms_days: Float,
              ?netsuite_sales_order_id: String,
              ?prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration,
              ?professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ProfessionalService],
              ?rate_card_id: String,
              ?recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit],
              ?recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit],
              ?reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty],
              ?salesforce_opportunity_id: String,
              ?scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::scheduled_charges_on_usage_invoices,
              ?spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration,
              ?total_contract_value: Float,
              ?usage_filter: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter
            ) -> void

            def to_hash: -> {
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge],
              starting_at: Time,
              transitions: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition],
              usage_statement_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule,
              credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit],
              discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount],
              ending_before: Time,
              name: String,
              net_payment_terms_days: Float,
              netsuite_sales_order_id: String,
              prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration,
              professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ProfessionalService],
              rate_card_id: String,
              recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit],
              recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit],
              reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty],
              salesforce_opportunity_id: String,
              scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::scheduled_charges_on_usage_invoices,
              spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration,
              total_contract_value: Float,
              usage_filter: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter
            }

            type commit =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule,
                amount: Float,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                archived_at: Time,
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceContract,
                invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::rate_type,
                rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::RolledOverFrom,
                rollover_fraction: Float,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Specifier],
                uniqueness_key: String
              }

            class Commit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Product

              attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::type_

              attr_reader access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule?

              def access_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader applicable_contract_ids: ::Array[String]?

              def applicable_contract_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader archived_at: Time?

              def archived_at=: (Time) -> Time

              attr_reader balance: Float?

              def balance=: (Float) -> Float

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Contract

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceContract?

              def invoice_contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceContract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceContract

              attr_reader invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule?

              def invoice_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule

              attr_reader ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::ledger]?

              def ledger=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::ledger]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::ledger]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::rate_type

              attr_reader rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::RolledOverFrom?

              def rolled_over_from=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::RolledOverFrom
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::RolledOverFrom

              attr_reader rollover_fraction: Float?

              def rollover_fraction=: (Float) -> Float

              attr_reader salesforce_opportunity_id: String?

              def salesforce_opportunity_id=: (String) -> String

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Specifier]

              attr_reader uniqueness_key: String?

              def uniqueness_key=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::type_,
                ?access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule,
                ?amount: Float,
                ?applicable_contract_ids: ::Array[String],
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?archived_at: Time,
                ?balance: Float,
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Contract,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceContract,
                ?invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule,
                ?ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::ledger],
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?priority: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::rate_type,
                ?rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::RolledOverFrom,
                ?rollover_fraction: Float,
                ?salesforce_opportunity_id: String,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Specifier],
                ?uniqueness_key: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule,
                amount: Float,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                archived_at: Time,
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceContract,
                invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::rate_type,
                rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::RolledOverFrom,
                rollover_fraction: Float,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Specifier],
                uniqueness_key: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type type_ = :PREPAID | :POSTPAID

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                PREPAID: :PREPAID
                POSTPAID: :POSTPAID

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::type_]
              end

              type access_schedule =
                {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::CreditType
                }

              class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::ScheduleItem]

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::CreditType

                def initialize: (
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::ScheduleItem],
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::CreditType
                ) -> void

                def to_hash: -> {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::AccessSchedule::CreditType
                }

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor ending_before: Time

                  attr_accessor starting_at: Time

                  def initialize: (
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type invoice_contract = { id: String }

              class InvoiceContract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type invoice_schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::ScheduleItem]
                }

              class InvoiceSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::InvoiceSchedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end

              type ledger =
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember0
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember1
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember2
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember3
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember4
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember5
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember6
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember7
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember8
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember9
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember10
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember11
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember12

              module Ledger
                extend MetronomeSDK::Internal::Type::Union

                type union_member0 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember0::type_
                  }

                class UnionMember0 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember0::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember0::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember0::type_
                  }

                  type type_ = :PREPAID_COMMIT_SEGMENT_START

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_SEGMENT_START: :PREPAID_COMMIT_SEGMENT_START

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember0::type_]
                  end
                end

                type union_member1 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember1::type_
                  }

                class UnionMember1 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember1::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember1::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember1::type_
                  }

                  type type_ = :PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION: :PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember1::type_]
                  end
                end

                type union_member2 =
                  {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember2::type_
                  }

                class UnionMember2 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor new_contract_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember2::type_

                  def initialize: (
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember2::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember2::type_
                  }

                  type type_ = :PREPAID_COMMIT_ROLLOVER

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_ROLLOVER: :PREPAID_COMMIT_ROLLOVER

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember2::type_]
                  end
                end

                type union_member3 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember3::type_
                  }

                class UnionMember3 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember3::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember3::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember3::type_
                  }

                  type type_ = :PREPAID_COMMIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_EXPIRATION: :PREPAID_COMMIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember3::type_]
                  end
                end

                type union_member4 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember4::type_
                  }

                class UnionMember4 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember4::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember4::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember4::type_
                  }

                  type type_ = :PREPAID_COMMIT_CANCELED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_CANCELED: :PREPAID_COMMIT_CANCELED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember4::type_]
                  end
                end

                type union_member5 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember5::type_
                  }

                class UnionMember5 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember5::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember5::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember5::type_
                  }

                  type type_ = :PREPAID_COMMIT_CREDITED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_CREDITED: :PREPAID_COMMIT_CREDITED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember5::type_]
                  end
                end

                type union_member6 =
                  {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember6::type_
                  }

                class UnionMember6 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember6::type_

                  def initialize: (
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember6::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember6::type_
                  }

                  type type_ = :POSTPAID_COMMIT_INITIAL_BALANCE

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_INITIAL_BALANCE: :POSTPAID_COMMIT_INITIAL_BALANCE

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember6::type_]
                  end
                end

                type union_member7 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember7::type_
                  }

                class UnionMember7 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember7::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember7::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember7::type_
                  }

                  type type_ = :POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION: :POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember7::type_]
                  end
                end

                type union_member8 =
                  {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember8::type_
                  }

                class UnionMember8 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor new_contract_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember8::type_

                  def initialize: (
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember8::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember8::type_
                  }

                  type type_ = :POSTPAID_COMMIT_ROLLOVER

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_ROLLOVER: :POSTPAID_COMMIT_ROLLOVER

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember8::type_]
                  end
                end

                type union_member9 =
                  {
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember9::type_
                  }

                class UnionMember9 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember9::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember9::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember9::type_
                  }

                  type type_ = :POSTPAID_COMMIT_TRUEUP

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_TRUEUP: :POSTPAID_COMMIT_TRUEUP

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember9::type_]
                  end
                end

                type union_member10 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember10::type_
                  }

                class UnionMember10 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember10::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember10::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember10::type_
                  }

                  type type_ = :PREPAID_COMMIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_MANUAL: :PREPAID_COMMIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember10::type_]
                  end
                end

                type union_member11 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember11::type_
                  }

                class UnionMember11 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember11::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember11::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember11::type_
                  }

                  type type_ = :POSTPAID_COMMIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_MANUAL: :POSTPAID_COMMIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember11::type_]
                  end
                end

                type union_member12 =
                  {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember12::type_
                  }

                class UnionMember12 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember12::type_

                  def initialize: (
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember12::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember12::type_
                  }

                  type type_ = :POSTPAID_COMMIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_EXPIRATION: :POSTPAID_COMMIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::Ledger::UnionMember12::type_]
                  end
                end

                def self?.variants: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::ledger]
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Commit::rate_type]
              end

              type rolled_over_from = { commit_id: String, contract_id: String }

              class RolledOverFrom < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor commit_id: String

                attr_accessor contract_id: String

                def initialize: (commit_id: String, contract_id: String) -> void

                def to_hash: -> { commit_id: String, contract_id: String }
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type override =
              {
                id: String,
                starting_at: Time,
                applicable_product_tags: ::Array[String],
                credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::CreditType,
                ending_before: Time,
                entitled: bool,
                is_commit_specific: bool,
                is_prorated: bool,
                multiplier: Float,
                override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideSpecifier],
                override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideTier],
                overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate,
                price: Float,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Product,
                quantity: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::rate_type,
                target: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::target,
                tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Tier],
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::type_,
                value: ::Hash[Symbol, top]
              }

            class Override < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor starting_at: Time

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::CreditType?

              def credit_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::CreditType
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::CreditType

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader entitled: bool?

              def entitled=: (bool) -> bool

              attr_reader is_commit_specific: bool?

              def is_commit_specific=: (bool) -> bool

              attr_reader is_prorated: bool?

              def is_prorated=: (bool) -> bool

              attr_reader multiplier: Float?

              def multiplier=: (Float) -> Float

              attr_reader override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideSpecifier]?

              def override_specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideSpecifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideSpecifier]

              attr_reader override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideTier]?

              def override_tiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideTier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideTier]

              attr_reader overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate?

              def overwrite_rate=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate

              attr_reader price: Float?

              def price=: (Float) -> Float

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Product?

              def product=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Product
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Product

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::rate_type

              attr_reader target: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::target?

              def target=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::target
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::target

              attr_reader tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Tier]?

              def tiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Tier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Tier]

              attr_reader type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::type_?

              def type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::type_
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::type_

              attr_reader value: ::Hash[Symbol, top]?

              def value=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

              def initialize: (
                id: String,
                starting_at: Time,
                ?applicable_product_tags: ::Array[String],
                ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::CreditType,
                ?ending_before: Time,
                ?entitled: bool,
                ?is_commit_specific: bool,
                ?is_prorated: bool,
                ?multiplier: Float,
                ?override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideSpecifier],
                ?override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideTier],
                ?overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate,
                ?price: Float,
                ?priority: Float,
                ?product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Product,
                ?quantity: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::rate_type,
                ?target: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::target,
                ?tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Tier],
                ?type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::type_,
                ?value: ::Hash[Symbol, top]
              ) -> void

              def to_hash: -> {
                id: String,
                starting_at: Time,
                applicable_product_tags: ::Array[String],
                credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::CreditType,
                ending_before: Time,
                entitled: bool,
                is_commit_specific: bool,
                is_prorated: bool,
                multiplier: Float,
                override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideSpecifier],
                override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverrideTier],
                overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate,
                price: Float,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Product,
                quantity: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::rate_type,
                target: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::target,
                tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::Tier],
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::type_,
                value: ::Hash[Symbol, top]
              }

              type credit_type = { id: String, name: String }

              class CreditType < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type override_specifier =
                {
                  commit_ids: ::Array[String],
                  presentation_group_values: ::Hash[Symbol, String?],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String],
                  recurring_commit_ids: ::Array[String],
                  recurring_credit_ids: ::Array[String]
                }

              class OverrideSpecifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader commit_ids: ::Array[String]?

                def commit_ids=: (::Array[String]) -> ::Array[String]

                attr_reader presentation_group_values: ::Hash[Symbol, String?]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String?]
                ) -> ::Hash[Symbol, String?]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                attr_reader recurring_commit_ids: ::Array[String]?

                def recurring_commit_ids=: (::Array[String]) -> ::Array[String]

                attr_reader recurring_credit_ids: ::Array[String]?

                def recurring_credit_ids=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?commit_ids: ::Array[String],
                  ?presentation_group_values: ::Hash[Symbol, String?],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String],
                  ?recurring_commit_ids: ::Array[String],
                  ?recurring_credit_ids: ::Array[String]
                ) -> void

                def to_hash: -> {
                  commit_ids: ::Array[String],
                  presentation_group_values: ::Hash[Symbol, String?],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String],
                  recurring_commit_ids: ::Array[String],
                  recurring_credit_ids: ::Array[String]
                }
              end

              type override_tier = { multiplier: Float, size: Float }

              class OverrideTier < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor multiplier: Float

                attr_reader size: Float?

                def size=: (Float) -> Float

                def initialize: (multiplier: Float, ?size: Float) -> void

                def to_hash: -> { multiplier: Float, size: Float }
              end

              type overwrite_rate =
                {
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::rate_type,
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::CreditType,
                  custom_rate: ::Hash[Symbol, top],
                  is_prorated: bool,
                  price: Float,
                  quantity: Float,
                  tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::Tier]
                }

              class OverwriteRate < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::rate_type

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::CreditType

                attr_reader custom_rate: ::Hash[Symbol, top]?

                def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

                attr_reader is_prorated: bool?

                def is_prorated=: (bool) -> bool

                attr_reader price: Float?

                def price=: (Float) -> Float

                attr_reader quantity: Float?

                def quantity=: (Float) -> Float

                attr_reader tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::Tier]?

                def tiers=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::Tier]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::Tier]

                def initialize: (
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::rate_type,
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::CreditType,
                  ?custom_rate: ::Hash[Symbol, top],
                  ?is_prorated: bool,
                  ?price: Float,
                  ?quantity: Float,
                  ?tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::Tier]
                ) -> void

                def to_hash: -> {
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::rate_type,
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::CreditType,
                  custom_rate: ::Hash[Symbol, top],
                  is_prorated: bool,
                  price: Float,
                  quantity: Float,
                  tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::Tier]
                }

                type rate_type =
                  :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

                module RateType
                  extend MetronomeSDK::Internal::Type::Enum

                  FLAT: :FLAT
                  PERCENTAGE: :PERCENTAGE
                  SUBSCRIPTION: :SUBSCRIPTION
                  TIERED: :TIERED
                  CUSTOM: :CUSTOM

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::OverwriteRate::rate_type]
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type tier = { price: Float, size: Float }

                class Tier < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor price: Float

                  attr_reader size: Float?

                  def size=: (Float) -> Float

                  def initialize: (price: Float, ?size: Float) -> void

                  def to_hash: -> { price: Float, size: Float }
                end
              end

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type rate_type =
                :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                FLAT: :FLAT
                PERCENTAGE: :PERCENTAGE
                SUBSCRIPTION: :SUBSCRIPTION
                TIERED: :TIERED
                CUSTOM: :CUSTOM

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::rate_type]
              end

              type target = :COMMIT_RATE | :LIST_RATE

              module Target
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::target]
              end

              type tier = { price: Float, size: Float }

              class Tier < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor price: Float

                attr_reader size: Float?

                def size=: (Float) -> Float

                def initialize: (price: Float, ?size: Float) -> void

                def to_hash: -> { price: Float, size: Float }
              end

              type type_ = :OVERWRITE | :MULTIPLIER | :TIERED

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                OVERWRITE: :OVERWRITE
                MULTIPLIER: :MULTIPLIER
                TIERED: :TIERED

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Override::type_]
              end
            end

            type scheduled_charge =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule,
                archived_at: Time,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

            class ScheduledCharge < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Product

              attr_accessor schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule

              attr_reader archived_at: Time?

              def archived_at=: (Time) -> Time

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule,
                ?archived_at: Time,
                ?custom_fields: ::Hash[Symbol, String],
                ?name: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule,
                archived_at: Time,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::ScheduleItem]
                }

              class Schedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ScheduledCharge::Schedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end
            end

            type transition =
              {
                from_contract_id: String,
                to_contract_id: String,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition::type_
              }

            class Transition < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor from_contract_id: String

              attr_accessor to_contract_id: String

              attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition::type_

              def initialize: (
                from_contract_id: String,
                to_contract_id: String,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition::type_
              ) -> void

              def to_hash: -> {
                from_contract_id: String,
                to_contract_id: String,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition::type_
              }

              type type_ = :SUPERSEDE | :RENEWAL

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                SUPERSEDE: :SUPERSEDE
                RENEWAL: :RENEWAL

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Transition::type_]
              end
            end

            type usage_statement_schedule =
              {
                billing_anchor_date: Time,
                frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule::frequency
              }

            class UsageStatementSchedule < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor billing_anchor_date: Time

              attr_accessor frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule::frequency

              def initialize: (
                billing_anchor_date: Time,
                frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule::frequency
              ) -> void

              def to_hash: -> {
                billing_anchor_date: Time,
                frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule::frequency
              }

              type frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

              module Frequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageStatementSchedule::frequency]
              end
            end

            type credit =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::rate_type,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Specifier],
                uniqueness_key: String
              }

            class Credit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Product

              attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::type_

              attr_reader access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule?

              def access_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule

              attr_reader applicable_contract_ids: ::Array[String]?

              def applicable_contract_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader balance: Float?

              def balance=: (Float) -> Float

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Contract

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::ledger]?

              def ledger=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::ledger]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::ledger]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::rate_type

              attr_reader salesforce_opportunity_id: String?

              def salesforce_opportunity_id=: (String) -> String

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Specifier]

              attr_reader uniqueness_key: String?

              def uniqueness_key=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::type_,
                ?access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule,
                ?applicable_contract_ids: ::Array[String],
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?balance: Float,
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Contract,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::ledger],
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?priority: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::rate_type,
                ?salesforce_opportunity_id: String,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Specifier],
                ?uniqueness_key: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::rate_type,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Specifier],
                uniqueness_key: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type type_ = :CREDIT

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                CREDIT: :CREDIT

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::type_]
              end

              type access_schedule =
                {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::CreditType
                }

              class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::ScheduleItem]

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::CreditType

                def initialize: (
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::ScheduleItem],
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::CreditType
                ) -> void

                def to_hash: -> {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::AccessSchedule::CreditType
                }

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor ending_before: Time

                  attr_accessor starting_at: Time

                  def initialize: (
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type ledger =
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember0
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember1
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember2
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember3
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember4
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember5

              module Ledger
                extend MetronomeSDK::Internal::Type::Union

                type union_member0 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember0::type_
                  }

                class UnionMember0 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember0::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember0::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember0::type_
                  }

                  type type_ = :CREDIT_SEGMENT_START

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_SEGMENT_START: :CREDIT_SEGMENT_START

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember0::type_]
                  end
                end

                type union_member1 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember1::type_
                  }

                class UnionMember1 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember1::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember1::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember1::type_
                  }

                  type type_ = :CREDIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_AUTOMATED_INVOICE_DEDUCTION: :CREDIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember1::type_]
                  end
                end

                type union_member2 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember2::type_
                  }

                class UnionMember2 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember2::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember2::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember2::type_
                  }

                  type type_ = :CREDIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_EXPIRATION: :CREDIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember2::type_]
                  end
                end

                type union_member3 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember3::type_
                  }

                class UnionMember3 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember3::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember3::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember3::type_
                  }

                  type type_ = :CREDIT_CANCELED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_CANCELED: :CREDIT_CANCELED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember3::type_]
                  end
                end

                type union_member4 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember4::type_
                  }

                class UnionMember4 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember4::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember4::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember4::type_
                  }

                  type type_ = :CREDIT_CREDITED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_CREDITED: :CREDIT_CREDITED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember4::type_]
                  end
                end

                type union_member5 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember5::type_
                  }

                class UnionMember5 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember5::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember5::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember5::type_
                  }

                  type type_ = :CREDIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_MANUAL: :CREDIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::Ledger::UnionMember5::type_]
                  end
                end

                def self?.variants: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::ledger]
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Credit::rate_type]
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type discount =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

            class Discount < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Product

              attr_accessor schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule,
                ?custom_fields: ::Hash[Symbol, String],
                ?name: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::ScheduleItem]
                }

              class Schedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::Discount::Schedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end
            end

            type prepaid_balance_threshold_configuration =
              {
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
                recharge_to_amount: Float,
                threshold_amount: Float
              }

            class PrepaidBalanceThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit

              attr_accessor is_enabled: bool

              attr_accessor payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig

              attr_accessor recharge_to_amount: Float

              attr_accessor threshold_amount: Float

              def initialize: (
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
                recharge_to_amount: Float,
                threshold_amount: Float
              ) -> void

              def to_hash: -> {
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
                recharge_to_amount: Float,
                threshold_amount: Float
              }

              type commit =
                {
                  product_id: String,
                  applicable_product_ids: ::Array[String],
                  applicable_product_tags: ::Array[String],
                  description: String,
                  name: String,
                  specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
                }

              class Commit < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor product_id: String

                attr_reader applicable_product_ids: ::Array[String]?

                def applicable_product_ids=: (
                  ::Array[String]
                ) -> ::Array[String]

                attr_reader applicable_product_tags: ::Array[String]?

                def applicable_product_tags=: (
                  ::Array[String]
                ) -> ::Array[String]

                attr_reader description: String?

                def description=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit::Specifier]?

                def specifiers=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit::Specifier]

                def initialize: (
                  product_id: String,
                  ?applicable_product_ids: ::Array[String],
                  ?applicable_product_tags: ::Array[String],
                  ?description: String,
                  ?name: String,
                  ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
                ) -> void

                def to_hash: -> {
                  product_id: String,
                  applicable_product_ids: ::Array[String],
                  applicable_product_tags: ::Array[String],
                  description: String,
                  name: String,
                  specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
                }

                type specifier =
                  {
                    presentation_group_values: ::Hash[Symbol, String],
                    pricing_group_values: ::Hash[Symbol, String],
                    product_id: String,
                    product_tags: ::Array[String]
                  }

                class Specifier < MetronomeSDK::Internal::Type::BaseModel
                  attr_reader presentation_group_values: ::Hash[Symbol, String]?

                  def presentation_group_values=: (
                    ::Hash[Symbol, String]
                  ) -> ::Hash[Symbol, String]

                  attr_reader pricing_group_values: ::Hash[Symbol, String]?

                  def pricing_group_values=: (
                    ::Hash[Symbol, String]
                  ) -> ::Hash[Symbol, String]

                  attr_reader product_id: String?

                  def product_id=: (String) -> String

                  attr_reader product_tags: ::Array[String]?

                  def product_tags=: (::Array[String]) -> ::Array[String]

                  def initialize: (
                    ?presentation_group_values: ::Hash[Symbol, String],
                    ?pricing_group_values: ::Hash[Symbol, String],
                    ?product_id: String,
                    ?product_tags: ::Array[String]
                  ) -> void

                  def to_hash: -> {
                    presentation_group_values: ::Hash[Symbol, String],
                    pricing_group_values: ::Hash[Symbol, String],
                    product_id: String,
                    product_tags: ::Array[String]
                  }
                end
              end

              type payment_gate_config =
                {
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
                }

              class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type

                attr_reader stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig?

                def stripe_config=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig

                attr_reader tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type?

                def tax_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type

                def initialize: (
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  ?stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  ?tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
                ) -> void

                def to_hash: -> {
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
                }

                type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

                module PaymentGateType
                  extend MetronomeSDK::Internal::Type::Enum

                  NONE: :NONE
                  STRIPE: :STRIPE
                  EXTERNAL: :EXTERNAL

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type]
                end

                type stripe_config =
                  {
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  }

                class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

                  def initialize: (
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  ) -> void

                  def to_hash: -> {
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  }

                  type payment_type = :INVOICE | :PAYMENT_INTENT

                  module PaymentType
                    extend MetronomeSDK::Internal::Type::Enum

                    INVOICE: :INVOICE
                    PAYMENT_INTENT: :PAYMENT_INTENT

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
                  end
                end

                type tax_type = :NONE | :STRIPE

                module TaxType
                  extend MetronomeSDK::Internal::Type::Enum

                  NONE: :NONE
                  STRIPE: :STRIPE

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type]
                end
              end
            end

            type professional_service =
              {
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                netsuite_sales_order_id: String
              }

            class ProfessionalService < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor max_amount: Float

              attr_accessor product_id: String

              attr_accessor quantity: Float

              attr_accessor unit_price: Float

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                netsuite_sales_order_id: String
              }
            end

            type recurring_commit =
              {
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::rate_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Contract,
                description: String,
                ending_before: Time,
                invoice_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::InvoiceAmount,
                name: String,
                netsuite_sales_order_id: String,
                proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::proration,
                recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::recurrence_frequency,
                rollover_fraction: Float,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Specifier]
              }

            class RecurringCommit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::AccessAmount

              attr_accessor commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration

              attr_accessor priority: Float

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Product

              attr_accessor rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::rate_type

              attr_accessor starting_at: Time

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Contract

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader invoice_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::InvoiceAmount?

              def invoice_amount=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::InvoiceAmount
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::InvoiceAmount

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::proration?

              def proration=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::proration
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::proration

              attr_reader recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::recurrence_frequency?

              def recurrence_frequency=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::recurrence_frequency
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::recurrence_frequency

              attr_reader rollover_fraction: Float?

              def rollover_fraction=: (Float) -> Float

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Specifier]

              def initialize: (
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::rate_type,
                starting_at: Time,
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Contract,
                ?description: String,
                ?ending_before: Time,
                ?invoice_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::InvoiceAmount,
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::proration,
                ?recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::recurrence_frequency,
                ?rollover_fraction: Float,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Specifier]
              ) -> void

              def to_hash: -> {
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::rate_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Contract,
                description: String,
                ending_before: Time,
                invoice_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::InvoiceAmount,
                name: String,
                netsuite_sales_order_id: String,
                proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::proration,
                recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::recurrence_frequency,
                rollover_fraction: Float,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::Specifier]
              }

              type access_amount =
                { credit_type_id: String, quantity: Float, unit_price: Float }

              class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor credit_type_id: String

                attr_accessor quantity: Float

                attr_accessor unit_price: Float

                def initialize: (
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                ) -> void

                def to_hash: -> {
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                }
              end

              type commit_duration =
                {
                  value: Float,
                  unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration::unit
                }

              class CommitDuration < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor value: Float

                attr_reader unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration::unit?

                def unit=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration::unit
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration::unit

                def initialize: (
                  value: Float,
                  ?unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration::unit
                ) -> void

                def to_hash: -> {
                  value: Float,
                  unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration::unit
                }

                type unit = :PERIODS

                module Unit
                  extend MetronomeSDK::Internal::Type::Enum

                  PERIODS: :PERIODS

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::CommitDuration::unit]
                end
              end

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::rate_type]
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type invoice_amount =
                { credit_type_id: String, quantity: Float, unit_price: Float }

              class InvoiceAmount < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor credit_type_id: String

                attr_accessor quantity: Float

                attr_accessor unit_price: Float

                def initialize: (
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                ) -> void

                def to_hash: -> {
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                }
              end

              type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

              module Proration
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE
                FIRST: :FIRST
                LAST: :LAST
                FIRST_AND_LAST: :FIRST_AND_LAST

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::proration]
              end

              type recurrence_frequency =
                :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

              module RecurrenceFrequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCommit::recurrence_frequency]
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type recurring_credit =
              {
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::rate_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Contract,
                description: String,
                ending_before: Time,
                name: String,
                netsuite_sales_order_id: String,
                proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::proration,
                recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::recurrence_frequency,
                rollover_fraction: Float,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Specifier]
              }

            class RecurringCredit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::AccessAmount

              attr_accessor commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration

              attr_accessor priority: Float

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Product

              attr_accessor rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::rate_type

              attr_accessor starting_at: Time

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Contract

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::proration?

              def proration=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::proration
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::proration

              attr_reader recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::recurrence_frequency?

              def recurrence_frequency=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::recurrence_frequency
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::recurrence_frequency

              attr_reader rollover_fraction: Float?

              def rollover_fraction=: (Float) -> Float

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Specifier]

              def initialize: (
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::rate_type,
                starting_at: Time,
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Contract,
                ?description: String,
                ?ending_before: Time,
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::proration,
                ?recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::recurrence_frequency,
                ?rollover_fraction: Float,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Specifier]
              ) -> void

              def to_hash: -> {
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::rate_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Contract,
                description: String,
                ending_before: Time,
                name: String,
                netsuite_sales_order_id: String,
                proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::proration,
                recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::recurrence_frequency,
                rollover_fraction: Float,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::Specifier]
              }

              type access_amount =
                { credit_type_id: String, quantity: Float, unit_price: Float }

              class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor credit_type_id: String

                attr_accessor quantity: Float

                attr_accessor unit_price: Float

                def initialize: (
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                ) -> void

                def to_hash: -> {
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                }
              end

              type commit_duration =
                {
                  value: Float,
                  unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration::unit
                }

              class CommitDuration < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor value: Float

                attr_reader unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration::unit?

                def unit=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration::unit
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration::unit

                def initialize: (
                  value: Float,
                  ?unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration::unit
                ) -> void

                def to_hash: -> {
                  value: Float,
                  unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration::unit
                }

                type unit = :PERIODS

                module Unit
                  extend MetronomeSDK::Internal::Type::Enum

                  PERIODS: :PERIODS

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::CommitDuration::unit]
                end
              end

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::rate_type]
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

              module Proration
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE
                FIRST: :FIRST
                LAST: :LAST
                FIRST_AND_LAST: :FIRST_AND_LAST

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::proration]
              end

              type recurrence_frequency =
                :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

              module RecurrenceFrequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::RecurringCredit::recurrence_frequency]
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type reseller_royalty =
              {
                fraction: Float,
                netsuite_reseller_id: String,
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty::reseller_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                aws_account_number: String,
                aws_offer_id: String,
                aws_payer_reference_id: String,
                ending_before: Time,
                gcp_account_id: String,
                gcp_offer_id: String,
                reseller_contract_value: Float
              }

            class ResellerRoyalty < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor fraction: Float

              attr_accessor netsuite_reseller_id: String

              attr_accessor reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty::reseller_type

              attr_accessor starting_at: Time

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader aws_account_number: String?

              def aws_account_number=: (String) -> String

              attr_reader aws_offer_id: String?

              def aws_offer_id=: (String) -> String

              attr_reader aws_payer_reference_id: String?

              def aws_payer_reference_id=: (String) -> String

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader gcp_account_id: String?

              def gcp_account_id=: (String) -> String

              attr_reader gcp_offer_id: String?

              def gcp_offer_id=: (String) -> String

              attr_reader reseller_contract_value: Float?

              def reseller_contract_value=: (Float) -> Float

              def initialize: (
                fraction: Float,
                netsuite_reseller_id: String,
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty::reseller_type,
                starting_at: Time,
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?aws_account_number: String,
                ?aws_offer_id: String,
                ?aws_payer_reference_id: String,
                ?ending_before: Time,
                ?gcp_account_id: String,
                ?gcp_offer_id: String,
                ?reseller_contract_value: Float
              ) -> void

              def to_hash: -> {
                fraction: Float,
                netsuite_reseller_id: String,
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty::reseller_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                aws_account_number: String,
                aws_offer_id: String,
                aws_payer_reference_id: String,
                ending_before: Time,
                gcp_account_id: String,
                gcp_offer_id: String,
                reseller_contract_value: Float
              }

              type reseller_type =
                :AWS | :AWS_PRO_SERVICE | :GCP | :GCP_PRO_SERVICE

              module ResellerType
                extend MetronomeSDK::Internal::Type::Enum

                AWS: :AWS
                AWS_PRO_SERVICE: :AWS_PRO_SERVICE
                GCP: :GCP
                GCP_PRO_SERVICE: :GCP_PRO_SERVICE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::ResellerRoyalty::reseller_type]
              end
            end

            type scheduled_charges_on_usage_invoices = :ALL

            module ScheduledChargesOnUsageInvoices
              extend MetronomeSDK::Internal::Type::Enum

              ALL: :ALL

              def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::scheduled_charges_on_usage_invoices]
            end

            type spend_threshold_configuration =
              {
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig,
                threshold_amount: Float
              }

            class SpendThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::Commit

              attr_accessor is_enabled: bool

              attr_accessor payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig

              attr_accessor threshold_amount: Float

              def initialize: (
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig,
                threshold_amount: Float
              ) -> void

              def to_hash: -> {
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig,
                threshold_amount: Float
              }

              type commit =
                { product_id: String, description: String, name: String }

              class Commit < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor product_id: String

                attr_reader description: String?

                def description=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                def initialize: (
                  product_id: String,
                  ?description: String,
                  ?name: String
                ) -> void

                def to_hash: -> {
                  product_id: String,
                  description: String,
                  name: String
                }
              end

              type payment_gate_config =
                {
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::tax_type
                }

              class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type

                attr_reader stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig?

                def stripe_config=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig

                attr_reader tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::tax_type?

                def tax_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::tax_type
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::tax_type

                def initialize: (
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  ?stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  ?tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::tax_type
                ) -> void

                def to_hash: -> {
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::tax_type
                }

                type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

                module PaymentGateType
                  extend MetronomeSDK::Internal::Type::Enum

                  NONE: :NONE
                  STRIPE: :STRIPE
                  EXTERNAL: :EXTERNAL

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type]
                end

                type stripe_config =
                  {
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  }

                class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

                  def initialize: (
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  ) -> void

                  def to_hash: -> {
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  }

                  type payment_type = :INVOICE | :PAYMENT_INTENT

                  module PaymentType
                    extend MetronomeSDK::Internal::Type::Enum

                    INVOICE: :INVOICE
                    PAYMENT_INTENT: :PAYMENT_INTENT

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
                  end
                end

                type tax_type = :NONE | :STRIPE

                module TaxType
                  extend MetronomeSDK::Internal::Type::Enum

                  NONE: :NONE
                  STRIPE: :STRIPE

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::SpendThresholdConfiguration::PaymentGateConfig::tax_type]
                end
              end
            end

            type usage_filter =
              {
                current: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Current?,
                initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Initial,
                updates: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Update]
              }

            class UsageFilter < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor current: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Current?

              attr_accessor initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Initial

              attr_accessor updates: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Update]

              def initialize: (
                current: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Current?,
                initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Initial,
                updates: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Update]
              ) -> void

              def to_hash: -> {
                current: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Current?,
                initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Initial,
                updates: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Current::UsageFilter::Update]
              }

              type current =
                {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }

              class Current < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor group_key: String

                attr_accessor group_values: ::Array[String]

                attr_reader starting_at: Time?

                def starting_at=: (Time) -> Time

                def initialize: (
                  group_key: String,
                  group_values: ::Array[String],
                  ?starting_at: Time
                ) -> void

                def to_hash: -> {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }
              end

              type initial =
                {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }

              class Initial < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor group_key: String

                attr_accessor group_values: ::Array[String]

                attr_reader starting_at: Time?

                def starting_at=: (Time) -> Time

                def initialize: (
                  group_key: String,
                  group_values: ::Array[String],
                  ?starting_at: Time
                ) -> void

                def to_hash: -> {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }
              end

              type update =
                {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }

              class Update < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor group_key: String

                attr_accessor group_values: ::Array[String]

                attr_accessor starting_at: Time

                def initialize: (
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                ) -> void

                def to_hash: -> {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }
              end
            end
          end

          type initial =
            {
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge],
              starting_at: Time,
              transitions: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition],
              usage_statement_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule,
              credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit],
              discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount],
              ending_before: Time,
              name: String,
              net_payment_terms_days: Float,
              netsuite_sales_order_id: String,
              prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration,
              professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ProfessionalService],
              rate_card_id: String,
              recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit],
              recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit],
              reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty],
              salesforce_opportunity_id: String,
              scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::scheduled_charges_on_usage_invoices,
              spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration,
              total_contract_value: Float,
              usage_filter: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter
            }

          class Initial < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit]

            attr_accessor created_at: Time

            attr_accessor created_by: String

            attr_accessor overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override]

            attr_accessor scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge]

            attr_accessor starting_at: Time

            attr_accessor transitions: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition]

            attr_accessor usage_statement_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule

            attr_reader credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit]?

            def credits=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit]

            attr_reader discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount]?

            def discounts=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount]

            attr_reader ending_before: Time?

            def ending_before=: (Time) -> Time

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader net_payment_terms_days: Float?

            def net_payment_terms_days=: (Float) -> Float

            attr_reader netsuite_sales_order_id: String?

            def netsuite_sales_order_id=: (String) -> String

            attr_reader prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration?

            def prepaid_balance_threshold_configuration=: (
              MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration
            ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration

            attr_reader professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ProfessionalService]?

            def professional_services=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ProfessionalService]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ProfessionalService]

            attr_reader rate_card_id: String?

            def rate_card_id=: (String) -> String

            attr_reader recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit]?

            def recurring_commits=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit]

            attr_reader recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit]?

            def recurring_credits=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit]

            attr_reader reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty]?

            def reseller_royalties=: (
              ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty]

            attr_reader salesforce_opportunity_id: String?

            def salesforce_opportunity_id=: (String) -> String

            attr_reader scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::scheduled_charges_on_usage_invoices?

            def scheduled_charges_on_usage_invoices=: (
              MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::scheduled_charges_on_usage_invoices
            ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::scheduled_charges_on_usage_invoices

            attr_reader spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration?

            def spend_threshold_configuration=: (
              MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration
            ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration

            attr_reader total_contract_value: Float?

            def total_contract_value=: (Float) -> Float

            attr_reader usage_filter: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter?

            def usage_filter=: (
              MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter
            ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter

            def initialize: (
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge],
              starting_at: Time,
              transitions: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition],
              usage_statement_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule,
              ?credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit],
              ?discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount],
              ?ending_before: Time,
              ?name: String,
              ?net_payment_terms_days: Float,
              ?netsuite_sales_order_id: String,
              ?prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration,
              ?professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ProfessionalService],
              ?rate_card_id: String,
              ?recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit],
              ?recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit],
              ?reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty],
              ?salesforce_opportunity_id: String,
              ?scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::scheduled_charges_on_usage_invoices,
              ?spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration,
              ?total_contract_value: Float,
              ?usage_filter: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter
            ) -> void

            def to_hash: -> {
              commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit],
              created_at: Time,
              created_by: String,
              overrides: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override],
              scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge],
              starting_at: Time,
              transitions: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition],
              usage_statement_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule,
              credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit],
              discounts: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount],
              ending_before: Time,
              name: String,
              net_payment_terms_days: Float,
              netsuite_sales_order_id: String,
              prepaid_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration,
              professional_services: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ProfessionalService],
              rate_card_id: String,
              recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit],
              recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit],
              reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty],
              salesforce_opportunity_id: String,
              scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::scheduled_charges_on_usage_invoices,
              spend_threshold_configuration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration,
              total_contract_value: Float,
              usage_filter: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter
            }

            type commit =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule,
                amount: Float,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                archived_at: Time,
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceContract,
                invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::rate_type,
                rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::RolledOverFrom,
                rollover_fraction: Float,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Specifier],
                uniqueness_key: String
              }

            class Commit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Product

              attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::type_

              attr_reader access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule?

              def access_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader applicable_contract_ids: ::Array[String]?

              def applicable_contract_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader archived_at: Time?

              def archived_at=: (Time) -> Time

              attr_reader balance: Float?

              def balance=: (Float) -> Float

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Contract

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceContract?

              def invoice_contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceContract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceContract

              attr_reader invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule?

              def invoice_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule

              attr_reader ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::ledger]?

              def ledger=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::ledger]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::ledger]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::rate_type

              attr_reader rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::RolledOverFrom?

              def rolled_over_from=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::RolledOverFrom
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::RolledOverFrom

              attr_reader rollover_fraction: Float?

              def rollover_fraction=: (Float) -> Float

              attr_reader salesforce_opportunity_id: String?

              def salesforce_opportunity_id=: (String) -> String

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Specifier]

              attr_reader uniqueness_key: String?

              def uniqueness_key=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::type_,
                ?access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule,
                ?amount: Float,
                ?applicable_contract_ids: ::Array[String],
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?archived_at: Time,
                ?balance: Float,
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Contract,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceContract,
                ?invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule,
                ?ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::ledger],
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?priority: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::rate_type,
                ?rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::RolledOverFrom,
                ?rollover_fraction: Float,
                ?salesforce_opportunity_id: String,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Specifier],
                ?uniqueness_key: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule,
                amount: Float,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                archived_at: Time,
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                invoice_contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceContract,
                invoice_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::rate_type,
                rolled_over_from: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::RolledOverFrom,
                rollover_fraction: Float,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Specifier],
                uniqueness_key: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type type_ = :PREPAID | :POSTPAID

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                PREPAID: :PREPAID
                POSTPAID: :POSTPAID

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::type_]
              end

              type access_schedule =
                {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::CreditType
                }

              class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::ScheduleItem]

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::CreditType

                def initialize: (
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::ScheduleItem],
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::CreditType
                ) -> void

                def to_hash: -> {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::AccessSchedule::CreditType
                }

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor ending_before: Time

                  attr_accessor starting_at: Time

                  def initialize: (
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type invoice_contract = { id: String }

              class InvoiceContract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type invoice_schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::ScheduleItem]
                }

              class InvoiceSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::InvoiceSchedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end

              type ledger =
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember0
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember1
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember2
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember3
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember4
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember5
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember6
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember7
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember8
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember9
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember10
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember11
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember12

              module Ledger
                extend MetronomeSDK::Internal::Type::Union

                type union_member0 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember0::type_
                  }

                class UnionMember0 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember0::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember0::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember0::type_
                  }

                  type type_ = :PREPAID_COMMIT_SEGMENT_START

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_SEGMENT_START: :PREPAID_COMMIT_SEGMENT_START

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember0::type_]
                  end
                end

                type union_member1 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember1::type_
                  }

                class UnionMember1 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember1::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember1::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember1::type_
                  }

                  type type_ = :PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION: :PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember1::type_]
                  end
                end

                type union_member2 =
                  {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember2::type_
                  }

                class UnionMember2 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor new_contract_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember2::type_

                  def initialize: (
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember2::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember2::type_
                  }

                  type type_ = :PREPAID_COMMIT_ROLLOVER

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_ROLLOVER: :PREPAID_COMMIT_ROLLOVER

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember2::type_]
                  end
                end

                type union_member3 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember3::type_
                  }

                class UnionMember3 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember3::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember3::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember3::type_
                  }

                  type type_ = :PREPAID_COMMIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_EXPIRATION: :PREPAID_COMMIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember3::type_]
                  end
                end

                type union_member4 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember4::type_
                  }

                class UnionMember4 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember4::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember4::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember4::type_
                  }

                  type type_ = :PREPAID_COMMIT_CANCELED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_CANCELED: :PREPAID_COMMIT_CANCELED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember4::type_]
                  end
                end

                type union_member5 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember5::type_
                  }

                class UnionMember5 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember5::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember5::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember5::type_
                  }

                  type type_ = :PREPAID_COMMIT_CREDITED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_CREDITED: :PREPAID_COMMIT_CREDITED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember5::type_]
                  end
                end

                type union_member6 =
                  {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember6::type_
                  }

                class UnionMember6 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember6::type_

                  def initialize: (
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember6::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember6::type_
                  }

                  type type_ = :POSTPAID_COMMIT_INITIAL_BALANCE

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_INITIAL_BALANCE: :POSTPAID_COMMIT_INITIAL_BALANCE

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember6::type_]
                  end
                end

                type union_member7 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember7::type_
                  }

                class UnionMember7 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember7::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember7::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember7::type_
                  }

                  type type_ = :POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION: :POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember7::type_]
                  end
                end

                type union_member8 =
                  {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember8::type_
                  }

                class UnionMember8 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor new_contract_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember8::type_

                  def initialize: (
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember8::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    new_contract_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember8::type_
                  }

                  type type_ = :POSTPAID_COMMIT_ROLLOVER

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_ROLLOVER: :POSTPAID_COMMIT_ROLLOVER

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember8::type_]
                  end
                end

                type union_member9 =
                  {
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember9::type_
                  }

                class UnionMember9 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember9::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember9::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember9::type_
                  }

                  type type_ = :POSTPAID_COMMIT_TRUEUP

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_TRUEUP: :POSTPAID_COMMIT_TRUEUP

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember9::type_]
                  end
                end

                type union_member10 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember10::type_
                  }

                class UnionMember10 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember10::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember10::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember10::type_
                  }

                  type type_ = :PREPAID_COMMIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    PREPAID_COMMIT_MANUAL: :PREPAID_COMMIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember10::type_]
                  end
                end

                type union_member11 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember11::type_
                  }

                class UnionMember11 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember11::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember11::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember11::type_
                  }

                  type type_ = :POSTPAID_COMMIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_MANUAL: :POSTPAID_COMMIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember11::type_]
                  end
                end

                type union_member12 =
                  {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember12::type_
                  }

                class UnionMember12 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember12::type_

                  def initialize: (
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember12::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember12::type_
                  }

                  type type_ = :POSTPAID_COMMIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    POSTPAID_COMMIT_EXPIRATION: :POSTPAID_COMMIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::Ledger::UnionMember12::type_]
                  end
                end

                def self?.variants: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::ledger]
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Commit::rate_type]
              end

              type rolled_over_from = { commit_id: String, contract_id: String }

              class RolledOverFrom < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor commit_id: String

                attr_accessor contract_id: String

                def initialize: (commit_id: String, contract_id: String) -> void

                def to_hash: -> { commit_id: String, contract_id: String }
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type override =
              {
                id: String,
                starting_at: Time,
                applicable_product_tags: ::Array[String],
                credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::CreditType,
                ending_before: Time,
                entitled: bool,
                is_commit_specific: bool,
                is_prorated: bool,
                multiplier: Float,
                override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideSpecifier],
                override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideTier],
                overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate,
                price: Float,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Product,
                quantity: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::rate_type,
                target: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::target,
                tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Tier],
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::type_,
                value: ::Hash[Symbol, top]
              }

            class Override < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor starting_at: Time

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::CreditType?

              def credit_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::CreditType
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::CreditType

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader entitled: bool?

              def entitled=: (bool) -> bool

              attr_reader is_commit_specific: bool?

              def is_commit_specific=: (bool) -> bool

              attr_reader is_prorated: bool?

              def is_prorated=: (bool) -> bool

              attr_reader multiplier: Float?

              def multiplier=: (Float) -> Float

              attr_reader override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideSpecifier]?

              def override_specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideSpecifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideSpecifier]

              attr_reader override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideTier]?

              def override_tiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideTier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideTier]

              attr_reader overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate?

              def overwrite_rate=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate

              attr_reader price: Float?

              def price=: (Float) -> Float

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Product?

              def product=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Product
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Product

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::rate_type

              attr_reader target: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::target?

              def target=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::target
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::target

              attr_reader tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Tier]?

              def tiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Tier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Tier]

              attr_reader type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::type_?

              def type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::type_
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::type_

              attr_reader value: ::Hash[Symbol, top]?

              def value=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

              def initialize: (
                id: String,
                starting_at: Time,
                ?applicable_product_tags: ::Array[String],
                ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::CreditType,
                ?ending_before: Time,
                ?entitled: bool,
                ?is_commit_specific: bool,
                ?is_prorated: bool,
                ?multiplier: Float,
                ?override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideSpecifier],
                ?override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideTier],
                ?overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate,
                ?price: Float,
                ?priority: Float,
                ?product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Product,
                ?quantity: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::rate_type,
                ?target: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::target,
                ?tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Tier],
                ?type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::type_,
                ?value: ::Hash[Symbol, top]
              ) -> void

              def to_hash: -> {
                id: String,
                starting_at: Time,
                applicable_product_tags: ::Array[String],
                credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::CreditType,
                ending_before: Time,
                entitled: bool,
                is_commit_specific: bool,
                is_prorated: bool,
                multiplier: Float,
                override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideSpecifier],
                override_tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverrideTier],
                overwrite_rate: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate,
                price: Float,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Product,
                quantity: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::rate_type,
                target: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::target,
                tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::Tier],
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::type_,
                value: ::Hash[Symbol, top]
              }

              type credit_type = { id: String, name: String }

              class CreditType < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type override_specifier =
                {
                  commit_ids: ::Array[String],
                  presentation_group_values: ::Hash[Symbol, String?],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String],
                  recurring_commit_ids: ::Array[String],
                  recurring_credit_ids: ::Array[String]
                }

              class OverrideSpecifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader commit_ids: ::Array[String]?

                def commit_ids=: (::Array[String]) -> ::Array[String]

                attr_reader presentation_group_values: ::Hash[Symbol, String?]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String?]
                ) -> ::Hash[Symbol, String?]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                attr_reader recurring_commit_ids: ::Array[String]?

                def recurring_commit_ids=: (::Array[String]) -> ::Array[String]

                attr_reader recurring_credit_ids: ::Array[String]?

                def recurring_credit_ids=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?commit_ids: ::Array[String],
                  ?presentation_group_values: ::Hash[Symbol, String?],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String],
                  ?recurring_commit_ids: ::Array[String],
                  ?recurring_credit_ids: ::Array[String]
                ) -> void

                def to_hash: -> {
                  commit_ids: ::Array[String],
                  presentation_group_values: ::Hash[Symbol, String?],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String],
                  recurring_commit_ids: ::Array[String],
                  recurring_credit_ids: ::Array[String]
                }
              end

              type override_tier = { multiplier: Float, size: Float }

              class OverrideTier < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor multiplier: Float

                attr_reader size: Float?

                def size=: (Float) -> Float

                def initialize: (multiplier: Float, ?size: Float) -> void

                def to_hash: -> { multiplier: Float, size: Float }
              end

              type overwrite_rate =
                {
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::rate_type,
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::CreditType,
                  custom_rate: ::Hash[Symbol, top],
                  is_prorated: bool,
                  price: Float,
                  quantity: Float,
                  tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::Tier]
                }

              class OverwriteRate < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::rate_type

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::CreditType

                attr_reader custom_rate: ::Hash[Symbol, top]?

                def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

                attr_reader is_prorated: bool?

                def is_prorated=: (bool) -> bool

                attr_reader price: Float?

                def price=: (Float) -> Float

                attr_reader quantity: Float?

                def quantity=: (Float) -> Float

                attr_reader tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::Tier]?

                def tiers=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::Tier]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::Tier]

                def initialize: (
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::rate_type,
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::CreditType,
                  ?custom_rate: ::Hash[Symbol, top],
                  ?is_prorated: bool,
                  ?price: Float,
                  ?quantity: Float,
                  ?tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::Tier]
                ) -> void

                def to_hash: -> {
                  rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::rate_type,
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::CreditType,
                  custom_rate: ::Hash[Symbol, top],
                  is_prorated: bool,
                  price: Float,
                  quantity: Float,
                  tiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::Tier]
                }

                type rate_type =
                  :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

                module RateType
                  extend MetronomeSDK::Internal::Type::Enum

                  FLAT: :FLAT
                  PERCENTAGE: :PERCENTAGE
                  SUBSCRIPTION: :SUBSCRIPTION
                  TIERED: :TIERED
                  CUSTOM: :CUSTOM

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::OverwriteRate::rate_type]
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type tier = { price: Float, size: Float }

                class Tier < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor price: Float

                  attr_reader size: Float?

                  def size=: (Float) -> Float

                  def initialize: (price: Float, ?size: Float) -> void

                  def to_hash: -> { price: Float, size: Float }
                end
              end

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type rate_type =
                :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                FLAT: :FLAT
                PERCENTAGE: :PERCENTAGE
                SUBSCRIPTION: :SUBSCRIPTION
                TIERED: :TIERED
                CUSTOM: :CUSTOM

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::rate_type]
              end

              type target = :COMMIT_RATE | :LIST_RATE

              module Target
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::target]
              end

              type tier = { price: Float, size: Float }

              class Tier < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor price: Float

                attr_reader size: Float?

                def size=: (Float) -> Float

                def initialize: (price: Float, ?size: Float) -> void

                def to_hash: -> { price: Float, size: Float }
              end

              type type_ = :OVERWRITE | :MULTIPLIER | :TIERED

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                OVERWRITE: :OVERWRITE
                MULTIPLIER: :MULTIPLIER
                TIERED: :TIERED

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Override::type_]
              end
            end

            type scheduled_charge =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule,
                archived_at: Time,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

            class ScheduledCharge < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Product

              attr_accessor schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule

              attr_reader archived_at: Time?

              def archived_at=: (Time) -> Time

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule,
                ?archived_at: Time,
                ?custom_fields: ::Hash[Symbol, String],
                ?name: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule,
                archived_at: Time,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::ScheduleItem]
                }

              class Schedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ScheduledCharge::Schedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end
            end

            type transition =
              {
                from_contract_id: String,
                to_contract_id: String,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition::type_
              }

            class Transition < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor from_contract_id: String

              attr_accessor to_contract_id: String

              attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition::type_

              def initialize: (
                from_contract_id: String,
                to_contract_id: String,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition::type_
              ) -> void

              def to_hash: -> {
                from_contract_id: String,
                to_contract_id: String,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition::type_
              }

              type type_ = :SUPERSEDE | :RENEWAL

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                SUPERSEDE: :SUPERSEDE
                RENEWAL: :RENEWAL

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Transition::type_]
              end
            end

            type usage_statement_schedule =
              {
                billing_anchor_date: Time,
                frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule::frequency
              }

            class UsageStatementSchedule < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor billing_anchor_date: Time

              attr_accessor frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule::frequency

              def initialize: (
                billing_anchor_date: Time,
                frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule::frequency
              ) -> void

              def to_hash: -> {
                billing_anchor_date: Time,
                frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule::frequency
              }

              type frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

              module Frequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageStatementSchedule::frequency]
              end
            end

            type credit =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::rate_type,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Specifier],
                uniqueness_key: String
              }

            class Credit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Product

              attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::type_

              attr_reader access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule?

              def access_schedule=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule

              attr_reader applicable_contract_ids: ::Array[String]?

              def applicable_contract_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader balance: Float?

              def balance=: (Float) -> Float

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Contract

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::ledger]?

              def ledger=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::ledger]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::ledger]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader priority: Float?

              def priority=: (Float) -> Float

              attr_reader rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::rate_type?

              def rate_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::rate_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::rate_type

              attr_reader salesforce_opportunity_id: String?

              def salesforce_opportunity_id=: (String) -> String

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Specifier]

              attr_reader uniqueness_key: String?

              def uniqueness_key=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::type_,
                ?access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule,
                ?applicable_contract_ids: ::Array[String],
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?balance: Float,
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Contract,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::ledger],
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?priority: Float,
                ?rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::rate_type,
                ?salesforce_opportunity_id: String,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Specifier],
                ?uniqueness_key: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Product,
                type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::type_,
                access_schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule,
                applicable_contract_ids: ::Array[String],
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                balance: Float,
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Contract,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                ledger: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::ledger],
                name: String,
                netsuite_sales_order_id: String,
                priority: Float,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::rate_type,
                salesforce_opportunity_id: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Specifier],
                uniqueness_key: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type type_ = :CREDIT

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                CREDIT: :CREDIT

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::type_]
              end

              type access_schedule =
                {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::CreditType
                }

              class AccessSchedule < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::ScheduleItem]

                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::CreditType

                def initialize: (
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::ScheduleItem],
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::CreditType
                ) -> void

                def to_hash: -> {
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::ScheduleItem],
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::AccessSchedule::CreditType
                }

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor ending_before: Time

                  attr_accessor starting_at: Time

                  def initialize: (
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    ending_before: Time,
                    starting_at: Time
                  }
                end

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type ledger =
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember0
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember1
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember2
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember3
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember4
                | MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember5

              module Ledger
                extend MetronomeSDK::Internal::Type::Union

                type union_member0 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember0::type_
                  }

                class UnionMember0 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember0::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember0::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember0::type_
                  }

                  type type_ = :CREDIT_SEGMENT_START

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_SEGMENT_START: :CREDIT_SEGMENT_START

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember0::type_]
                  end
                end

                type union_member1 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember1::type_
                  }

                class UnionMember1 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember1::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember1::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember1::type_
                  }

                  type type_ = :CREDIT_AUTOMATED_INVOICE_DEDUCTION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_AUTOMATED_INVOICE_DEDUCTION: :CREDIT_AUTOMATED_INVOICE_DEDUCTION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember1::type_]
                  end
                end

                type union_member2 =
                  {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember2::type_
                  }

                class UnionMember2 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember2::type_

                  def initialize: (
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember2::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember2::type_
                  }

                  type type_ = :CREDIT_EXPIRATION

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_EXPIRATION: :CREDIT_EXPIRATION

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember2::type_]
                  end
                end

                type union_member3 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember3::type_
                  }

                class UnionMember3 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember3::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember3::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember3::type_
                  }

                  type type_ = :CREDIT_CANCELED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_CANCELED: :CREDIT_CANCELED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember3::type_]
                  end
                end

                type union_member4 =
                  {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember4::type_
                  }

                class UnionMember4 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor segment_id: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember4::type_

                  def initialize: (
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember4::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    invoice_id: String,
                    segment_id: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember4::type_
                  }

                  type type_ = :CREDIT_CREDITED

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_CREDITED: :CREDIT_CREDITED

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember4::type_]
                  end
                end

                type union_member5 =
                  {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember5::type_
                  }

                class UnionMember5 < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor amount: Float

                  attr_accessor reason: String

                  attr_accessor timestamp: Time

                  attr_accessor type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember5::type_

                  def initialize: (
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember5::type_
                  ) -> void

                  def to_hash: -> {
                    amount: Float,
                    reason: String,
                    timestamp: Time,
                    type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember5::type_
                  }

                  type type_ = :CREDIT_MANUAL

                  module Type
                    extend MetronomeSDK::Internal::Type::Enum

                    CREDIT_MANUAL: :CREDIT_MANUAL

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::Ledger::UnionMember5::type_]
                  end
                end

                def self?.variants: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::ledger]
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Credit::rate_type]
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type discount =
              {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

            class Discount < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Product

              attr_accessor schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule,
                ?custom_fields: ::Hash[Symbol, String],
                ?name: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Product,
                schedule: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule,
                custom_fields: ::Hash[Symbol, String],
                name: String,
                netsuite_sales_order_id: String
              }

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type schedule =
                {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::ScheduleItem]
                }

              class Schedule < MetronomeSDK::Internal::Type::BaseModel
                attr_reader credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::CreditType?

                def credit_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::CreditType
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::CreditType

                attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::ScheduleItem]?

                def schedule_items=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::ScheduleItem]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::ScheduleItem]

                def initialize: (
                  ?credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::CreditType,
                  ?schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::ScheduleItem]
                ) -> void

                def to_hash: -> {
                  credit_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::CreditType,
                  schedule_items: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::Discount::Schedule::ScheduleItem]
                }

                type credit_type = { id: String, name: String }

                class CreditType < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor name: String

                  def initialize: (id: String, name: String) -> void

                  def to_hash: -> { id: String, name: String }
                end

                type schedule_item =
                  {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }

                class ScheduleItem < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor id: String

                  attr_accessor amount: Float

                  attr_accessor invoice_id: String

                  attr_accessor quantity: Float

                  attr_accessor timestamp: Time

                  attr_accessor unit_price: Float

                  def initialize: (
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    amount: Float,
                    invoice_id: String,
                    quantity: Float,
                    timestamp: Time,
                    unit_price: Float
                  }
                end
              end
            end

            type prepaid_balance_threshold_configuration =
              {
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
                recharge_to_amount: Float,
                threshold_amount: Float
              }

            class PrepaidBalanceThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit

              attr_accessor is_enabled: bool

              attr_accessor payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig

              attr_accessor recharge_to_amount: Float

              attr_accessor threshold_amount: Float

              def initialize: (
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
                recharge_to_amount: Float,
                threshold_amount: Float
              ) -> void

              def to_hash: -> {
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
                recharge_to_amount: Float,
                threshold_amount: Float
              }

              type commit =
                {
                  product_id: String,
                  applicable_product_ids: ::Array[String],
                  applicable_product_tags: ::Array[String],
                  description: String,
                  name: String,
                  specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
                }

              class Commit < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor product_id: String

                attr_reader applicable_product_ids: ::Array[String]?

                def applicable_product_ids=: (
                  ::Array[String]
                ) -> ::Array[String]

                attr_reader applicable_product_tags: ::Array[String]?

                def applicable_product_tags=: (
                  ::Array[String]
                ) -> ::Array[String]

                attr_reader description: String?

                def description=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit::Specifier]?

                def specifiers=: (
                  ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
                ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit::Specifier]

                def initialize: (
                  product_id: String,
                  ?applicable_product_ids: ::Array[String],
                  ?applicable_product_tags: ::Array[String],
                  ?description: String,
                  ?name: String,
                  ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
                ) -> void

                def to_hash: -> {
                  product_id: String,
                  applicable_product_ids: ::Array[String],
                  applicable_product_tags: ::Array[String],
                  description: String,
                  name: String,
                  specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
                }

                type specifier =
                  {
                    presentation_group_values: ::Hash[Symbol, String],
                    pricing_group_values: ::Hash[Symbol, String],
                    product_id: String,
                    product_tags: ::Array[String]
                  }

                class Specifier < MetronomeSDK::Internal::Type::BaseModel
                  attr_reader presentation_group_values: ::Hash[Symbol, String]?

                  def presentation_group_values=: (
                    ::Hash[Symbol, String]
                  ) -> ::Hash[Symbol, String]

                  attr_reader pricing_group_values: ::Hash[Symbol, String]?

                  def pricing_group_values=: (
                    ::Hash[Symbol, String]
                  ) -> ::Hash[Symbol, String]

                  attr_reader product_id: String?

                  def product_id=: (String) -> String

                  attr_reader product_tags: ::Array[String]?

                  def product_tags=: (::Array[String]) -> ::Array[String]

                  def initialize: (
                    ?presentation_group_values: ::Hash[Symbol, String],
                    ?pricing_group_values: ::Hash[Symbol, String],
                    ?product_id: String,
                    ?product_tags: ::Array[String]
                  ) -> void

                  def to_hash: -> {
                    presentation_group_values: ::Hash[Symbol, String],
                    pricing_group_values: ::Hash[Symbol, String],
                    product_id: String,
                    product_tags: ::Array[String]
                  }
                end
              end

              type payment_gate_config =
                {
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
                }

              class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type

                attr_reader stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig?

                def stripe_config=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig

                attr_reader tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type?

                def tax_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type

                def initialize: (
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  ?stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  ?tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
                ) -> void

                def to_hash: -> {
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
                }

                type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

                module PaymentGateType
                  extend MetronomeSDK::Internal::Type::Enum

                  NONE: :NONE
                  STRIPE: :STRIPE
                  EXTERNAL: :EXTERNAL

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type]
                end

                type stripe_config =
                  {
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  }

                class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

                  def initialize: (
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  ) -> void

                  def to_hash: -> {
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  }

                  type payment_type = :INVOICE | :PAYMENT_INTENT

                  module PaymentType
                    extend MetronomeSDK::Internal::Type::Enum

                    INVOICE: :INVOICE
                    PAYMENT_INTENT: :PAYMENT_INTENT

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
                  end
                end

                type tax_type = :NONE | :STRIPE

                module TaxType
                  extend MetronomeSDK::Internal::Type::Enum

                  NONE: :NONE
                  STRIPE: :STRIPE

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type]
                end
              end
            end

            type professional_service =
              {
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                netsuite_sales_order_id: String
              }

            class ProfessionalService < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor max_amount: Float

              attr_accessor product_id: String

              attr_accessor quantity: Float

              attr_accessor unit_price: Float

              attr_reader custom_fields: ::Hash[Symbol, String]?

              def custom_fields=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              def initialize: (
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                ?custom_fields: ::Hash[Symbol, String],
                ?description: String,
                ?netsuite_sales_order_id: String
              ) -> void

              def to_hash: -> {
                id: String,
                max_amount: Float,
                product_id: String,
                quantity: Float,
                unit_price: Float,
                custom_fields: ::Hash[Symbol, String],
                description: String,
                netsuite_sales_order_id: String
              }
            end

            type recurring_commit =
              {
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::rate_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Contract,
                description: String,
                ending_before: Time,
                invoice_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::InvoiceAmount,
                name: String,
                netsuite_sales_order_id: String,
                proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::proration,
                recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::recurrence_frequency,
                rollover_fraction: Float,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Specifier]
              }

            class RecurringCommit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::AccessAmount

              attr_accessor commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration

              attr_accessor priority: Float

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Product

              attr_accessor rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::rate_type

              attr_accessor starting_at: Time

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Contract

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader invoice_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::InvoiceAmount?

              def invoice_amount=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::InvoiceAmount
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::InvoiceAmount

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::proration?

              def proration=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::proration
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::proration

              attr_reader recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::recurrence_frequency?

              def recurrence_frequency=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::recurrence_frequency
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::recurrence_frequency

              attr_reader rollover_fraction: Float?

              def rollover_fraction=: (Float) -> Float

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Specifier]

              def initialize: (
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::rate_type,
                starting_at: Time,
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Contract,
                ?description: String,
                ?ending_before: Time,
                ?invoice_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::InvoiceAmount,
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::proration,
                ?recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::recurrence_frequency,
                ?rollover_fraction: Float,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Specifier]
              ) -> void

              def to_hash: -> {
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::rate_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Contract,
                description: String,
                ending_before: Time,
                invoice_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::InvoiceAmount,
                name: String,
                netsuite_sales_order_id: String,
                proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::proration,
                recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::recurrence_frequency,
                rollover_fraction: Float,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::Specifier]
              }

              type access_amount =
                { credit_type_id: String, quantity: Float, unit_price: Float }

              class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor credit_type_id: String

                attr_accessor quantity: Float

                attr_accessor unit_price: Float

                def initialize: (
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                ) -> void

                def to_hash: -> {
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                }
              end

              type commit_duration =
                {
                  value: Float,
                  unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration::unit
                }

              class CommitDuration < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor value: Float

                attr_reader unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration::unit?

                def unit=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration::unit
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration::unit

                def initialize: (
                  value: Float,
                  ?unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration::unit
                ) -> void

                def to_hash: -> {
                  value: Float,
                  unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration::unit
                }

                type unit = :PERIODS

                module Unit
                  extend MetronomeSDK::Internal::Type::Enum

                  PERIODS: :PERIODS

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::CommitDuration::unit]
                end
              end

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::rate_type]
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type invoice_amount =
                { credit_type_id: String, quantity: Float, unit_price: Float }

              class InvoiceAmount < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor credit_type_id: String

                attr_accessor quantity: Float

                attr_accessor unit_price: Float

                def initialize: (
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                ) -> void

                def to_hash: -> {
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                }
              end

              type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

              module Proration
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE
                FIRST: :FIRST
                LAST: :LAST
                FIRST_AND_LAST: :FIRST_AND_LAST

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::proration]
              end

              type recurrence_frequency =
                :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

              module RecurrenceFrequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCommit::recurrence_frequency]
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type recurring_credit =
              {
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::rate_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Contract,
                description: String,
                ending_before: Time,
                name: String,
                netsuite_sales_order_id: String,
                proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::proration,
                recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::recurrence_frequency,
                rollover_fraction: Float,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Specifier]
              }

            class RecurringCredit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::AccessAmount

              attr_accessor commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration

              attr_accessor priority: Float

              attr_accessor product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Product

              attr_accessor rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::rate_type

              attr_accessor starting_at: Time

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Contract?

              def contract=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Contract
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Contract

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_sales_order_id: String?

              def netsuite_sales_order_id=: (String) -> String

              attr_reader proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::proration?

              def proration=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::proration
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::proration

              attr_reader recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::recurrence_frequency?

              def recurrence_frequency=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::recurrence_frequency
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::recurrence_frequency

              attr_reader rollover_fraction: Float?

              def rollover_fraction=: (Float) -> Float

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Specifier]

              def initialize: (
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::rate_type,
                starting_at: Time,
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Contract,
                ?description: String,
                ?ending_before: Time,
                ?name: String,
                ?netsuite_sales_order_id: String,
                ?proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::proration,
                ?recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::recurrence_frequency,
                ?rollover_fraction: Float,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Specifier]
              ) -> void

              def to_hash: -> {
                id: String,
                access_amount: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::AccessAmount,
                commit_duration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration,
                priority: Float,
                product: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Product,
                rate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::rate_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                contract: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Contract,
                description: String,
                ending_before: Time,
                name: String,
                netsuite_sales_order_id: String,
                proration: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::proration,
                recurrence_frequency: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::recurrence_frequency,
                rollover_fraction: Float,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::Specifier]
              }

              type access_amount =
                { credit_type_id: String, quantity: Float, unit_price: Float }

              class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor credit_type_id: String

                attr_accessor quantity: Float

                attr_accessor unit_price: Float

                def initialize: (
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                ) -> void

                def to_hash: -> {
                  credit_type_id: String,
                  quantity: Float,
                  unit_price: Float
                }
              end

              type commit_duration =
                {
                  value: Float,
                  unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration::unit
                }

              class CommitDuration < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor value: Float

                attr_reader unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration::unit?

                def unit=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration::unit
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration::unit

                def initialize: (
                  value: Float,
                  ?unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration::unit
                ) -> void

                def to_hash: -> {
                  value: Float,
                  unit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration::unit
                }

                type unit = :PERIODS

                module Unit
                  extend MetronomeSDK::Internal::Type::Enum

                  PERIODS: :PERIODS

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::CommitDuration::unit]
                end
              end

              type product = { id: String, name: String }

              class Product < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void

                def to_hash: -> { id: String, name: String }
              end

              type rate_type = :COMMIT_RATE | :LIST_RATE

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                COMMIT_RATE: :COMMIT_RATE
                LIST_RATE: :LIST_RATE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::rate_type]
              end

              type contract = { id: String }

              class Contract < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                def initialize: (id: String) -> void

                def to_hash: -> { id: String }
              end

              type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

              module Proration
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE
                FIRST: :FIRST
                LAST: :LAST
                FIRST_AND_LAST: :FIRST_AND_LAST

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::proration]
              end

              type recurrence_frequency =
                :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

              module RecurrenceFrequency
                extend MetronomeSDK::Internal::Type::Enum

                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                ANNUAL: :ANNUAL
                WEEKLY: :WEEKLY

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::RecurringCredit::recurrence_frequency]
              end

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type reseller_royalty =
              {
                fraction: Float,
                netsuite_reseller_id: String,
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty::reseller_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                aws_account_number: String,
                aws_offer_id: String,
                aws_payer_reference_id: String,
                ending_before: Time,
                gcp_account_id: String,
                gcp_offer_id: String,
                reseller_contract_value: Float
              }

            class ResellerRoyalty < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor fraction: Float

              attr_accessor netsuite_reseller_id: String

              attr_accessor reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty::reseller_type

              attr_accessor starting_at: Time

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader aws_account_number: String?

              def aws_account_number=: (String) -> String

              attr_reader aws_offer_id: String?

              def aws_offer_id=: (String) -> String

              attr_reader aws_payer_reference_id: String?

              def aws_payer_reference_id=: (String) -> String

              attr_reader ending_before: Time?

              def ending_before=: (Time) -> Time

              attr_reader gcp_account_id: String?

              def gcp_account_id=: (String) -> String

              attr_reader gcp_offer_id: String?

              def gcp_offer_id=: (String) -> String

              attr_reader reseller_contract_value: Float?

              def reseller_contract_value=: (Float) -> Float

              def initialize: (
                fraction: Float,
                netsuite_reseller_id: String,
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty::reseller_type,
                starting_at: Time,
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?aws_account_number: String,
                ?aws_offer_id: String,
                ?aws_payer_reference_id: String,
                ?ending_before: Time,
                ?gcp_account_id: String,
                ?gcp_offer_id: String,
                ?reseller_contract_value: Float
              ) -> void

              def to_hash: -> {
                fraction: Float,
                netsuite_reseller_id: String,
                reseller_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty::reseller_type,
                starting_at: Time,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                aws_account_number: String,
                aws_offer_id: String,
                aws_payer_reference_id: String,
                ending_before: Time,
                gcp_account_id: String,
                gcp_offer_id: String,
                reseller_contract_value: Float
              }

              type reseller_type =
                :AWS | :AWS_PRO_SERVICE | :GCP | :GCP_PRO_SERVICE

              module ResellerType
                extend MetronomeSDK::Internal::Type::Enum

                AWS: :AWS
                AWS_PRO_SERVICE: :AWS_PRO_SERVICE
                GCP: :GCP
                GCP_PRO_SERVICE: :GCP_PRO_SERVICE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::ResellerRoyalty::reseller_type]
              end
            end

            type scheduled_charges_on_usage_invoices = :ALL

            module ScheduledChargesOnUsageInvoices
              extend MetronomeSDK::Internal::Type::Enum

              ALL: :ALL

              def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::scheduled_charges_on_usage_invoices]
            end

            type spend_threshold_configuration =
              {
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig,
                threshold_amount: Float
              }

            class SpendThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::Commit

              attr_accessor is_enabled: bool

              attr_accessor payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig

              attr_accessor threshold_amount: Float

              def initialize: (
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig,
                threshold_amount: Float
              ) -> void

              def to_hash: -> {
                commit: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::Commit,
                is_enabled: bool,
                payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig,
                threshold_amount: Float
              }

              type commit =
                { product_id: String, description: String, name: String }

              class Commit < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor product_id: String

                attr_reader description: String?

                def description=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                def initialize: (
                  product_id: String,
                  ?description: String,
                  ?name: String
                ) -> void

                def to_hash: -> {
                  product_id: String,
                  description: String,
                  name: String
                }
              end

              type payment_gate_config =
                {
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::tax_type
                }

              class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type

                attr_reader stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig?

                def stripe_config=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig

                attr_reader tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::tax_type?

                def tax_type=: (
                  MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::tax_type
                ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::tax_type

                def initialize: (
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  ?stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  ?tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::tax_type
                ) -> void

                def to_hash: -> {
                  payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                  stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                  tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::tax_type
                }

                type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

                module PaymentGateType
                  extend MetronomeSDK::Internal::Type::Enum

                  NONE: :NONE
                  STRIPE: :STRIPE
                  EXTERNAL: :EXTERNAL

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type]
                end

                type stripe_config =
                  {
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  }

                class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

                  def initialize: (
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  ) -> void

                  def to_hash: -> {
                    payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                  }

                  type payment_type = :INVOICE | :PAYMENT_INTENT

                  module PaymentType
                    extend MetronomeSDK::Internal::Type::Enum

                    INVOICE: :INVOICE
                    PAYMENT_INTENT: :PAYMENT_INTENT

                    def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
                  end
                end

                type tax_type = :NONE | :STRIPE

                module TaxType
                  extend MetronomeSDK::Internal::Type::Enum

                  NONE: :NONE
                  STRIPE: :STRIPE

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::SpendThresholdConfiguration::PaymentGateConfig::tax_type]
                end
              end
            end

            type usage_filter =
              {
                current: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Current?,
                initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Initial,
                updates: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Update]
              }

            class UsageFilter < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor current: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Current?

              attr_accessor initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Initial

              attr_accessor updates: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Update]

              def initialize: (
                current: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Current?,
                initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Initial,
                updates: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Update]
              ) -> void

              def to_hash: -> {
                current: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Current?,
                initial: MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Initial,
                updates: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::Initial::UsageFilter::Update]
              }

              type current =
                {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }

              class Current < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor group_key: String

                attr_accessor group_values: ::Array[String]

                attr_reader starting_at: Time?

                def starting_at=: (Time) -> Time

                def initialize: (
                  group_key: String,
                  group_values: ::Array[String],
                  ?starting_at: Time
                ) -> void

                def to_hash: -> {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }
              end

              type initial =
                {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }

              class Initial < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor group_key: String

                attr_accessor group_values: ::Array[String]

                attr_reader starting_at: Time?

                def starting_at=: (Time) -> Time

                def initialize: (
                  group_key: String,
                  group_values: ::Array[String],
                  ?starting_at: Time
                ) -> void

                def to_hash: -> {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }
              end

              type update =
                {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }

              class Update < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor group_key: String

                attr_accessor group_values: ::Array[String]

                attr_accessor starting_at: Time

                def initialize: (
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                ) -> void

                def to_hash: -> {
                  group_key: String,
                  group_values: ::Array[String],
                  starting_at: Time
                }
              end
            end
          end

          type customer_billing_provider_configuration =
            {
              billing_provider: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::billing_provider,
              delivery_method: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::delivery_method,
              id: String,
              configuration: ::Hash[Symbol, top]
            }

          class CustomerBillingProviderConfiguration < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor billing_provider: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::billing_provider

            attr_accessor delivery_method: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::delivery_method

            attr_reader id: String?

            def id=: (String) -> String

            attr_reader configuration: ::Hash[Symbol, top]?

            def configuration=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

            def initialize: (
              billing_provider: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::billing_provider,
              delivery_method: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::delivery_method,
              ?id: String,
              ?configuration: ::Hash[Symbol, top]
            ) -> void

            def to_hash: -> {
              billing_provider: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::billing_provider,
              delivery_method: MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::delivery_method,
              id: String,
              configuration: ::Hash[Symbol, top]
            }

            type billing_provider =
              :aws_marketplace
              | :stripe
              | :netsuite
              | :custom
              | :azure_marketplace
              | :quickbooks_online
              | :workday
              | :gcp_marketplace

            module BillingProvider
              extend MetronomeSDK::Internal::Type::Enum

              AWS_MARKETPLACE: :aws_marketplace
              STRIPE: :stripe
              NETSUITE: :netsuite
              CUSTOM: :custom
              AZURE_MARKETPLACE: :azure_marketplace
              QUICKBOOKS_ONLINE: :quickbooks_online
              WORKDAY: :workday
              GCP_MARKETPLACE: :gcp_marketplace

              def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::billing_provider]
            end

            type delivery_method =
              :direct_to_billing_provider | :aws_sqs | :tackle | :aws_sns

            module DeliveryMethod
              extend MetronomeSDK::Internal::Type::Enum

              DIRECT_TO_BILLING_PROVIDER: :direct_to_billing_provider
              AWS_SQS: :aws_sqs
              TACKLE: :tackle
              AWS_SNS: :aws_sns

              def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::CustomerBillingProviderConfiguration::delivery_method]
            end
          end

          type prepaid_balance_threshold_configuration =
            {
              commit: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit,
              is_enabled: bool,
              payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
              recharge_to_amount: Float,
              threshold_amount: Float
            }

          class PrepaidBalanceThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor commit: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit

            attr_accessor is_enabled: bool

            attr_accessor payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig

            attr_accessor recharge_to_amount: Float

            attr_accessor threshold_amount: Float

            def initialize: (
              commit: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit,
              is_enabled: bool,
              payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
              recharge_to_amount: Float,
              threshold_amount: Float
            ) -> void

            def to_hash: -> {
              commit: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit,
              is_enabled: bool,
              payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
              recharge_to_amount: Float,
              threshold_amount: Float
            }

            type commit =
              {
                product_id: String,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                description: String,
                name: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
              }

            class Commit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor product_id: String

              attr_reader applicable_product_ids: ::Array[String]?

              def applicable_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader applicable_product_tags: ::Array[String]?

              def applicable_product_tags=: (::Array[String]) -> ::Array[String]

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit::Specifier]?

              def specifiers=: (
                ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
              ) -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit::Specifier]

              def initialize: (
                product_id: String,
                ?applicable_product_ids: ::Array[String],
                ?applicable_product_tags: ::Array[String],
                ?description: String,
                ?name: String,
                ?specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
              ) -> void

              def to_hash: -> {
                product_id: String,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                description: String,
                name: String,
                specifiers: ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
              }

              type specifier =
                {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }

              class Specifier < MetronomeSDK::Internal::Type::BaseModel
                attr_reader presentation_group_values: ::Hash[Symbol, String]?

                def presentation_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader pricing_group_values: ::Hash[Symbol, String]?

                def pricing_group_values=: (
                  ::Hash[Symbol, String]
                ) -> ::Hash[Symbol, String]

                attr_reader product_id: String?

                def product_id=: (String) -> String

                attr_reader product_tags: ::Array[String]?

                def product_tags=: (::Array[String]) -> ::Array[String]

                def initialize: (
                  ?presentation_group_values: ::Hash[Symbol, String],
                  ?pricing_group_values: ::Hash[Symbol, String],
                  ?product_id: String,
                  ?product_tags: ::Array[String]
                ) -> void

                def to_hash: -> {
                  presentation_group_values: ::Hash[Symbol, String],
                  pricing_group_values: ::Hash[Symbol, String],
                  product_id: String,
                  product_tags: ::Array[String]
                }
              end
            end

            type payment_gate_config =
              {
                payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
              }

            class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type

              attr_reader stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig?

              def stripe_config=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig

              attr_reader tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type?

              def tax_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type

              def initialize: (
                payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                ?stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                ?tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
              ) -> void

              def to_hash: -> {
                payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
              }

              type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

              module PaymentGateType
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE
                STRIPE: :STRIPE
                EXTERNAL: :EXTERNAL

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type]
              end

              type stripe_config =
                {
                  payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                }

              class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

                def initialize: (
                  payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                ) -> void

                def to_hash: -> {
                  payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                }

                type payment_type = :INVOICE | :PAYMENT_INTENT

                module PaymentType
                  extend MetronomeSDK::Internal::Type::Enum

                  INVOICE: :INVOICE
                  PAYMENT_INTENT: :PAYMENT_INTENT

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
                end
              end

              type tax_type = :NONE | :STRIPE

              module TaxType
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE
                STRIPE: :STRIPE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type]
              end
            end
          end

          type scheduled_charges_on_usage_invoices = :ALL

          module ScheduledChargesOnUsageInvoices
            extend MetronomeSDK::Internal::Type::Enum

            ALL: :ALL

            def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::scheduled_charges_on_usage_invoices]
          end

          type spend_threshold_configuration =
            {
              commit: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::Commit,
              is_enabled: bool,
              payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig,
              threshold_amount: Float
            }

          class SpendThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor commit: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::Commit

            attr_accessor is_enabled: bool

            attr_accessor payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig

            attr_accessor threshold_amount: Float

            def initialize: (
              commit: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::Commit,
              is_enabled: bool,
              payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig,
              threshold_amount: Float
            ) -> void

            def to_hash: -> {
              commit: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::Commit,
              is_enabled: bool,
              payment_gate_config: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig,
              threshold_amount: Float
            }

            type commit =
              { product_id: String, description: String, name: String }

            class Commit < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor product_id: String

              attr_reader description: String?

              def description=: (String) -> String

              attr_reader name: String?

              def name=: (String) -> String

              def initialize: (
                product_id: String,
                ?description: String,
                ?name: String
              ) -> void

              def to_hash: -> {
                product_id: String,
                description: String,
                name: String
              }
            end

            type payment_gate_config =
              {
                payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::tax_type
              }

            class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type

              attr_reader stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig?

              def stripe_config=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig

              attr_reader tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::tax_type?

              def tax_type=: (
                MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::tax_type
              ) -> MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::tax_type

              def initialize: (
                payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                ?stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                ?tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::tax_type
              ) -> void

              def to_hash: -> {
                payment_gate_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                stripe_config: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                tax_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::tax_type
              }

              type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

              module PaymentGateType
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE
                STRIPE: :STRIPE
                EXTERNAL: :EXTERNAL

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type]
              end

              type stripe_config =
                {
                  payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                }

              class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

                def initialize: (
                  payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                ) -> void

                def to_hash: -> {
                  payment_type: MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                }

                type payment_type = :INVOICE | :PAYMENT_INTENT

                module PaymentType
                  extend MetronomeSDK::Internal::Type::Enum

                  INVOICE: :INVOICE
                  PAYMENT_INTENT: :PAYMENT_INTENT

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
                end
              end

              type tax_type = :NONE | :STRIPE

              module TaxType
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE
                STRIPE: :STRIPE

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::ContractListResponse::Data::SpendThresholdConfiguration::PaymentGateConfig::tax_type]
              end
            end
          end
        end
      end
    end
  end
end
