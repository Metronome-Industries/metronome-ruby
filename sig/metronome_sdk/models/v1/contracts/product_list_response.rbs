module MetronomeSDK
  module Models
    module V1
      module Contracts
        type product_list_response =
          {
            id: String,
            current: MetronomeSDK::Models::V1::Contracts::ProductListItemState,
            initial: MetronomeSDK::Models::V1::Contracts::ProductListItemState,
            type: MetronomeSDK::Models::V1::Contracts::ProductListResponse::type_,
            updates: ::Array[MetronomeSDK::Models::V1::Contracts::ProductListResponse::Update],
            archived_at: Time?,
            custom_fields: ::Hash[Symbol, String]
          }

        class ProductListResponse < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor current: MetronomeSDK::Models::V1::Contracts::ProductListItemState

          attr_accessor initial: MetronomeSDK::Models::V1::Contracts::ProductListItemState

          attr_accessor type: MetronomeSDK::Models::V1::Contracts::ProductListResponse::type_

          attr_accessor updates: ::Array[MetronomeSDK::Models::V1::Contracts::ProductListResponse::Update]

          attr_accessor archived_at: Time?

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          def initialize: (
            id: String,
            current: MetronomeSDK::Models::V1::Contracts::ProductListItemState,
            initial: MetronomeSDK::Models::V1::Contracts::ProductListItemState,
            type: MetronomeSDK::Models::V1::Contracts::ProductListResponse::type_,
            updates: ::Array[MetronomeSDK::Models::V1::Contracts::ProductListResponse::Update],
            ?archived_at: Time?,
            ?custom_fields: ::Hash[Symbol, String]
          ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::Contracts::product_list_response

          type type_ =
            :USAGE | :SUBSCRIPTION | :COMPOSITE | :FIXED | :PRO_SERVICE

          module Type
            extend MetronomeSDK::Internal::Type::Enum

            USAGE: :USAGE
            SUBSCRIPTION: :SUBSCRIPTION
            COMPOSITE: :COMPOSITE
            FIXED: :FIXED
            PRO_SERVICE: :PRO_SERVICE

            def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::ProductListResponse::type_]
          end

          type update =
            {
              created_at: Time,
              created_by: String,
              billable_metric_id: String,
              composite_product_ids: ::Array[String],
              composite_tags: ::Array[String],
              exclude_free_usage: bool,
              is_refundable: bool,
              name: String,
              netsuite_internal_item_id: String,
              netsuite_overage_item_id: String,
              presentation_group_key: ::Array[String],
              pricing_group_key: ::Array[String],
              quantity_conversion: MetronomeSDK::Models::V1::Contracts::QuantityConversion?,
              quantity_rounding: MetronomeSDK::Models::V1::Contracts::QuantityRounding?,
              starting_at: Time,
              tags: ::Array[String]
            }

          class Update < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor created_at: Time

            attr_accessor created_by: String

            attr_reader billable_metric_id: String?

            def billable_metric_id=: (String) -> String

            attr_reader composite_product_ids: ::Array[String]?

            def composite_product_ids=: (::Array[String]) -> ::Array[String]

            attr_reader composite_tags: ::Array[String]?

            def composite_tags=: (::Array[String]) -> ::Array[String]

            attr_reader exclude_free_usage: bool?

            def exclude_free_usage=: (bool) -> bool

            attr_reader is_refundable: bool?

            def is_refundable=: (bool) -> bool

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader netsuite_internal_item_id: String?

            def netsuite_internal_item_id=: (String) -> String

            attr_reader netsuite_overage_item_id: String?

            def netsuite_overage_item_id=: (String) -> String

            attr_reader presentation_group_key: ::Array[String]?

            def presentation_group_key=: (::Array[String]) -> ::Array[String]

            attr_reader pricing_group_key: ::Array[String]?

            def pricing_group_key=: (::Array[String]) -> ::Array[String]

            attr_accessor quantity_conversion: MetronomeSDK::Models::V1::Contracts::QuantityConversion?

            attr_accessor quantity_rounding: MetronomeSDK::Models::V1::Contracts::QuantityRounding?

            attr_reader starting_at: Time?

            def starting_at=: (Time) -> Time

            attr_reader tags: ::Array[String]?

            def tags=: (::Array[String]) -> ::Array[String]

            def initialize: (
              created_at: Time,
              created_by: String,
              ?billable_metric_id: String,
              ?composite_product_ids: ::Array[String],
              ?composite_tags: ::Array[String],
              ?exclude_free_usage: bool,
              ?is_refundable: bool,
              ?name: String,
              ?netsuite_internal_item_id: String,
              ?netsuite_overage_item_id: String,
              ?presentation_group_key: ::Array[String],
              ?pricing_group_key: ::Array[String],
              ?quantity_conversion: MetronomeSDK::Models::V1::Contracts::QuantityConversion?,
              ?quantity_rounding: MetronomeSDK::Models::V1::Contracts::QuantityRounding?,
              ?starting_at: Time,
              ?tags: ::Array[String]
            ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::Contracts::ProductListResponse::update
          end
        end
      end
    end
  end
end
