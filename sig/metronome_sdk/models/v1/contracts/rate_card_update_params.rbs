module MetronomeSDK
  module Models
    module V1
      module Contracts
        type rate_card_update_params =
          {
            rate_card_id: String,
            aliases: ::Array[MetronomeSDK::V1::Contracts::RateCardUpdateParams::Alias],
            description: String,
            name: String
          }
          & MetronomeSDK::Internal::Type::request_parameters

        class RateCardUpdateParams < MetronomeSDK::Internal::Type::BaseModel
          extend MetronomeSDK::Internal::Type::RequestParameters::Converter
          include MetronomeSDK::Internal::Type::RequestParameters

          attr_accessor rate_card_id: String

          attr_reader aliases: ::Array[MetronomeSDK::V1::Contracts::RateCardUpdateParams::Alias]?

          def aliases=: (
            ::Array[MetronomeSDK::V1::Contracts::RateCardUpdateParams::Alias]
          ) -> ::Array[MetronomeSDK::V1::Contracts::RateCardUpdateParams::Alias]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          def initialize: (
            rate_card_id: String,
            ?aliases: ::Array[MetronomeSDK::V1::Contracts::RateCardUpdateParams::Alias],
            ?description: String,
            ?name: String,
            ?request_options: MetronomeSDK::request_opts
          ) -> void

          type alias_ = { name: String, ending_before: Time, starting_at: Time }

          class Alias < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor name: String

            attr_reader ending_before: Time?

            def ending_before=: (Time) -> Time

            attr_reader starting_at: Time?

            def starting_at=: (Time) -> Time

            def initialize: (
              name: String,
              ?ending_before: Time,
              ?starting_at: Time
            ) -> void
          end
        end
      end
    end
  end
end
