module MetronomeSDK
  module Models
    module V1
      module Contracts
        type product_retrieve_response =
          {
            data: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data
          }

        class ProductRetrieveResponse < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor data: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data

          def initialize: (
            data: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data
          ) -> void

          type data =
            {
              id: String,
              current: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current,
              initial: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial,
              type: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::type_,
              updates: ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update],
              archived_at: Time?,
              custom_fields: ::Hash[Symbol, String]
            }

          class Data < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor current: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current

            attr_accessor initial: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial

            attr_accessor type: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::type_

            attr_accessor updates: ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update]

            attr_accessor archived_at: Time?

            attr_reader custom_fields: ::Hash[Symbol, String]?

            def custom_fields=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            def initialize: (
              id: String,
              current: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current,
              initial: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial,
              type: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::type_,
              updates: ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update],
              ?archived_at: Time?,
              ?custom_fields: ::Hash[Symbol, String]
            ) -> void

            type current =
              {
                created_at: Time,
                created_by: String,
                name: String,
                billable_metric_id: String,
                composite_product_ids: ::Array[String],
                composite_tags: ::Array[String],
                exclude_free_usage: bool,
                is_refundable: bool,
                netsuite_internal_item_id: String,
                netsuite_overage_item_id: String,
                presentation_group_key: ::Array[String],
                pricing_group_key: ::Array[String],
                quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityConversion?,
                quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityRounding?,
                starting_at: Time,
                tags: ::Array[String]
              }

            class Current < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor created_at: Time

              attr_accessor created_by: String

              attr_accessor name: String

              attr_reader billable_metric_id: String?

              def billable_metric_id=: (String) -> String

              attr_reader composite_product_ids: ::Array[String]?

              def composite_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader composite_tags: ::Array[String]?

              def composite_tags=: (::Array[String]) -> ::Array[String]

              attr_reader exclude_free_usage: bool?

              def exclude_free_usage=: (bool) -> bool

              attr_reader is_refundable: bool?

              def is_refundable=: (bool) -> bool

              attr_reader netsuite_internal_item_id: String?

              def netsuite_internal_item_id=: (String) -> String

              attr_reader netsuite_overage_item_id: String?

              def netsuite_overage_item_id=: (String) -> String

              attr_reader presentation_group_key: ::Array[String]?

              def presentation_group_key=: (::Array[String]) -> ::Array[String]

              attr_reader pricing_group_key: ::Array[String]?

              def pricing_group_key=: (::Array[String]) -> ::Array[String]

              attr_accessor quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityConversion?

              attr_accessor quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityRounding?

              attr_reader starting_at: Time?

              def starting_at=: (Time) -> Time

              attr_reader tags: ::Array[String]?

              def tags=: (::Array[String]) -> ::Array[String]

              def initialize: (
                created_at: Time,
                created_by: String,
                name: String,
                ?billable_metric_id: String,
                ?composite_product_ids: ::Array[String],
                ?composite_tags: ::Array[String],
                ?exclude_free_usage: bool,
                ?is_refundable: bool,
                ?netsuite_internal_item_id: String,
                ?netsuite_overage_item_id: String,
                ?presentation_group_key: ::Array[String],
                ?pricing_group_key: ::Array[String],
                ?quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityConversion?,
                ?quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityRounding?,
                ?starting_at: Time,
                ?tags: ::Array[String]
              ) -> void

              type quantity_conversion =
                {
                  conversion_factor: Float,
                  operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityConversion::operation,
                  name: String
                }

              class QuantityConversion < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor conversion_factor: Float

                attr_accessor operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityConversion::operation

                attr_reader name: String?

                def name=: (String) -> String

                def initialize: (
                  conversion_factor: Float,
                  operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityConversion::operation,
                  ?name: String
                ) -> void

                type operation = :MULTIPLY | :DIVIDE

                module Operation
                  extend MetronomeSDK::Internal::Type::Enum

                  MULTIPLY: :MULTIPLY
                  DIVIDE: :DIVIDE

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityConversion::operation]
                end
              end

              type quantity_rounding =
                {
                  decimal_places: Float,
                  rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityRounding::rounding_method
                }

              class QuantityRounding < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor decimal_places: Float

                attr_accessor rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityRounding::rounding_method

                def initialize: (
                  decimal_places: Float,
                  rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityRounding::rounding_method
                ) -> void

                type rounding_method = :ROUND_UP | :ROUND_DOWN | :ROUND_HALF_UP

                module RoundingMethod
                  extend MetronomeSDK::Internal::Type::Enum

                  ROUND_UP: :ROUND_UP
                  ROUND_DOWN: :ROUND_DOWN
                  ROUND_HALF_UP: :ROUND_HALF_UP

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Current::QuantityRounding::rounding_method]
                end
              end
            end

            type initial =
              {
                created_at: Time,
                created_by: String,
                name: String,
                billable_metric_id: String,
                composite_product_ids: ::Array[String],
                composite_tags: ::Array[String],
                exclude_free_usage: bool,
                is_refundable: bool,
                netsuite_internal_item_id: String,
                netsuite_overage_item_id: String,
                presentation_group_key: ::Array[String],
                pricing_group_key: ::Array[String],
                quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityConversion?,
                quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityRounding?,
                starting_at: Time,
                tags: ::Array[String]
              }

            class Initial < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor created_at: Time

              attr_accessor created_by: String

              attr_accessor name: String

              attr_reader billable_metric_id: String?

              def billable_metric_id=: (String) -> String

              attr_reader composite_product_ids: ::Array[String]?

              def composite_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader composite_tags: ::Array[String]?

              def composite_tags=: (::Array[String]) -> ::Array[String]

              attr_reader exclude_free_usage: bool?

              def exclude_free_usage=: (bool) -> bool

              attr_reader is_refundable: bool?

              def is_refundable=: (bool) -> bool

              attr_reader netsuite_internal_item_id: String?

              def netsuite_internal_item_id=: (String) -> String

              attr_reader netsuite_overage_item_id: String?

              def netsuite_overage_item_id=: (String) -> String

              attr_reader presentation_group_key: ::Array[String]?

              def presentation_group_key=: (::Array[String]) -> ::Array[String]

              attr_reader pricing_group_key: ::Array[String]?

              def pricing_group_key=: (::Array[String]) -> ::Array[String]

              attr_accessor quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityConversion?

              attr_accessor quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityRounding?

              attr_reader starting_at: Time?

              def starting_at=: (Time) -> Time

              attr_reader tags: ::Array[String]?

              def tags=: (::Array[String]) -> ::Array[String]

              def initialize: (
                created_at: Time,
                created_by: String,
                name: String,
                ?billable_metric_id: String,
                ?composite_product_ids: ::Array[String],
                ?composite_tags: ::Array[String],
                ?exclude_free_usage: bool,
                ?is_refundable: bool,
                ?netsuite_internal_item_id: String,
                ?netsuite_overage_item_id: String,
                ?presentation_group_key: ::Array[String],
                ?pricing_group_key: ::Array[String],
                ?quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityConversion?,
                ?quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityRounding?,
                ?starting_at: Time,
                ?tags: ::Array[String]
              ) -> void

              type quantity_conversion =
                {
                  conversion_factor: Float,
                  operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityConversion::operation,
                  name: String
                }

              class QuantityConversion < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor conversion_factor: Float

                attr_accessor operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityConversion::operation

                attr_reader name: String?

                def name=: (String) -> String

                def initialize: (
                  conversion_factor: Float,
                  operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityConversion::operation,
                  ?name: String
                ) -> void

                type operation = :MULTIPLY | :DIVIDE

                module Operation
                  extend MetronomeSDK::Internal::Type::Enum

                  MULTIPLY: :MULTIPLY
                  DIVIDE: :DIVIDE

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityConversion::operation]
                end
              end

              type quantity_rounding =
                {
                  decimal_places: Float,
                  rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityRounding::rounding_method
                }

              class QuantityRounding < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor decimal_places: Float

                attr_accessor rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityRounding::rounding_method

                def initialize: (
                  decimal_places: Float,
                  rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityRounding::rounding_method
                ) -> void

                type rounding_method = :ROUND_UP | :ROUND_DOWN | :ROUND_HALF_UP

                module RoundingMethod
                  extend MetronomeSDK::Internal::Type::Enum

                  ROUND_UP: :ROUND_UP
                  ROUND_DOWN: :ROUND_DOWN
                  ROUND_HALF_UP: :ROUND_HALF_UP

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Initial::QuantityRounding::rounding_method]
                end
              end
            end

            type type_ =
              :USAGE | :SUBSCRIPTION | :COMPOSITE | :FIXED | :PRO_SERVICE

            module Type
              extend MetronomeSDK::Internal::Type::Enum

              USAGE: :USAGE
              SUBSCRIPTION: :SUBSCRIPTION
              COMPOSITE: :COMPOSITE
              FIXED: :FIXED
              PRO_SERVICE: :PRO_SERVICE

              def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::type_]
            end

            type update =
              {
                created_at: Time,
                created_by: String,
                billable_metric_id: String,
                composite_product_ids: ::Array[String],
                composite_tags: ::Array[String],
                exclude_free_usage: bool,
                is_refundable: bool,
                name: String,
                netsuite_internal_item_id: String,
                netsuite_overage_item_id: String,
                presentation_group_key: ::Array[String],
                pricing_group_key: ::Array[String],
                quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityConversion?,
                quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityRounding?,
                starting_at: Time,
                tags: ::Array[String]
              }

            class Update < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor created_at: Time

              attr_accessor created_by: String

              attr_reader billable_metric_id: String?

              def billable_metric_id=: (String) -> String

              attr_reader composite_product_ids: ::Array[String]?

              def composite_product_ids=: (::Array[String]) -> ::Array[String]

              attr_reader composite_tags: ::Array[String]?

              def composite_tags=: (::Array[String]) -> ::Array[String]

              attr_reader exclude_free_usage: bool?

              def exclude_free_usage=: (bool) -> bool

              attr_reader is_refundable: bool?

              def is_refundable=: (bool) -> bool

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader netsuite_internal_item_id: String?

              def netsuite_internal_item_id=: (String) -> String

              attr_reader netsuite_overage_item_id: String?

              def netsuite_overage_item_id=: (String) -> String

              attr_reader presentation_group_key: ::Array[String]?

              def presentation_group_key=: (::Array[String]) -> ::Array[String]

              attr_reader pricing_group_key: ::Array[String]?

              def pricing_group_key=: (::Array[String]) -> ::Array[String]

              attr_accessor quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityConversion?

              attr_accessor quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityRounding?

              attr_reader starting_at: Time?

              def starting_at=: (Time) -> Time

              attr_reader tags: ::Array[String]?

              def tags=: (::Array[String]) -> ::Array[String]

              def initialize: (
                created_at: Time,
                created_by: String,
                ?billable_metric_id: String,
                ?composite_product_ids: ::Array[String],
                ?composite_tags: ::Array[String],
                ?exclude_free_usage: bool,
                ?is_refundable: bool,
                ?name: String,
                ?netsuite_internal_item_id: String,
                ?netsuite_overage_item_id: String,
                ?presentation_group_key: ::Array[String],
                ?pricing_group_key: ::Array[String],
                ?quantity_conversion: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityConversion?,
                ?quantity_rounding: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityRounding?,
                ?starting_at: Time,
                ?tags: ::Array[String]
              ) -> void

              type quantity_conversion =
                {
                  conversion_factor: Float,
                  operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityConversion::operation,
                  name: String
                }

              class QuantityConversion < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor conversion_factor: Float

                attr_accessor operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityConversion::operation

                attr_reader name: String?

                def name=: (String) -> String

                def initialize: (
                  conversion_factor: Float,
                  operation: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityConversion::operation,
                  ?name: String
                ) -> void

                type operation = :MULTIPLY | :DIVIDE

                module Operation
                  extend MetronomeSDK::Internal::Type::Enum

                  MULTIPLY: :MULTIPLY
                  DIVIDE: :DIVIDE

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityConversion::operation]
                end
              end

              type quantity_rounding =
                {
                  decimal_places: Float,
                  rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityRounding::rounding_method
                }

              class QuantityRounding < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor decimal_places: Float

                attr_accessor rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityRounding::rounding_method

                def initialize: (
                  decimal_places: Float,
                  rounding_method: MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityRounding::rounding_method
                ) -> void

                type rounding_method = :ROUND_UP | :ROUND_DOWN | :ROUND_HALF_UP

                module RoundingMethod
                  extend MetronomeSDK::Internal::Type::Enum

                  ROUND_UP: :ROUND_UP
                  ROUND_DOWN: :ROUND_DOWN
                  ROUND_HALF_UP: :ROUND_HALF_UP

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::ProductRetrieveResponse::Data::Update::QuantityRounding::rounding_method]
                end
              end
            end
          end
        end
      end
    end
  end
end
