module MetronomeSDK
  module Models
    module V1
      module Contracts
        module RateCards
          type rate_add_params =
            {
              entitled: bool,
              product_id: String,
              rate_card_id: String,
              rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddParams::rate_type,
              starting_at: Time,
              commit_rate: MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate,
              credit_type_id: String,
              custom_rate: ::Hash[Symbol, top],
              ending_before: Time,
              is_prorated: bool,
              price: Float,
              pricing_group_values: ::Hash[Symbol, String],
              quantity: Float,
              tiers: ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::Tier],
              use_list_prices: bool
            }
            & MetronomeSDK::Internal::Type::request_parameters

          class RateAddParams < MetronomeSDK::Internal::Type::BaseModel
            extend MetronomeSDK::Internal::Type::RequestParameters::Converter
            include MetronomeSDK::Internal::Type::RequestParameters

            attr_accessor entitled: bool

            attr_accessor product_id: String

            attr_accessor rate_card_id: String

            attr_accessor rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddParams::rate_type

            attr_accessor starting_at: Time

            attr_reader commit_rate: MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate?

            def commit_rate=: (
              MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate
            ) -> MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate

            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader custom_rate: ::Hash[Symbol, top]?

            def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

            attr_reader ending_before: Time?

            def ending_before=: (Time) -> Time

            attr_reader is_prorated: bool?

            def is_prorated=: (bool) -> bool

            attr_reader price: Float?

            def price=: (Float) -> Float

            attr_reader pricing_group_values: ::Hash[Symbol, String]?

            def pricing_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            attr_reader tiers: ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::Tier]?

            def tiers=: (
              ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::Tier]
            ) -> ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::Tier]

            attr_reader use_list_prices: bool?

            def use_list_prices=: (bool) -> bool

            def initialize: (
              entitled: bool,
              product_id: String,
              rate_card_id: String,
              rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddParams::rate_type,
              starting_at: Time,
              ?commit_rate: MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate,
              ?credit_type_id: String,
              ?custom_rate: ::Hash[Symbol, top],
              ?ending_before: Time,
              ?is_prorated: bool,
              ?price: Float,
              ?pricing_group_values: ::Hash[Symbol, String],
              ?quantity: Float,
              ?tiers: ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::Tier],
              ?use_list_prices: bool,
              ?request_options: MetronomeSDK::request_opts
            ) -> void

            type rate_type =
              :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

            module RateType
              extend MetronomeSDK::Internal::Type::Enum

              FLAT: :FLAT
              PERCENTAGE: :PERCENTAGE
              SUBSCRIPTION: :SUBSCRIPTION
              TIERED: :TIERED
              CUSTOM: :CUSTOM

              def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddParams::rate_type]
            end

            type commit_rate =
              {
                rate_type: MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::rate_type,
                price: Float,
                tiers: ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::Tier]
              }

            class CommitRate < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor rate_type: MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::rate_type

              attr_reader price: Float?

              def price=: (Float) -> Float

              attr_reader tiers: ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::Tier]?

              def tiers=: (
                ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::Tier]
              ) -> ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::Tier]

              def initialize: (
                rate_type: MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::rate_type,
                ?price: Float,
                ?tiers: ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::Tier]
              ) -> void

              type rate_type =
                :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                FLAT: :FLAT
                PERCENTAGE: :PERCENTAGE
                SUBSCRIPTION: :SUBSCRIPTION
                TIERED: :TIERED
                CUSTOM: :CUSTOM

                def self?.values: -> ::Array[MetronomeSDK::V1::Contracts::RateCards::RateAddParams::CommitRate::rate_type]
              end

              type tier = { price: Float, size: Float }

              class Tier < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor price: Float

                attr_reader size: Float?

                def size=: (Float) -> Float

                def initialize: (price: Float, ?size: Float) -> void
              end
            end

            type tier = { price: Float, size: Float }

            class Tier < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor price: Float

              attr_reader size: Float?

              def size=: (Float) -> Float

              def initialize: (price: Float, ?size: Float) -> void
            end
          end
        end
      end
    end
  end
end
