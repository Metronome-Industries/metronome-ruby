module MetronomeSDK
  module Models
    module V1
      module Contracts
        module RateCards
          type rate_add_response =
            {
              data: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data
            }

          class RateAddResponse < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor data: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data

            def initialize: (
              data: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data
            ) -> void

            def to_hash: -> {
              data: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data
            }

            type data =
              {
                rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type,
                commit_rate: MetronomeSDK::CommitRate,
                credit_type: MetronomeSDK::CreditTypeData,
                custom_rate: ::Hash[Symbol, top],
                is_prorated: bool,
                price: Float,
                pricing_group_values: ::Hash[Symbol, String],
                quantity: Float,
                tiers: ::Array[MetronomeSDK::Tier],
                use_list_prices: bool
              }

            class Data < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type

              attr_reader commit_rate: MetronomeSDK::CommitRate?

              def commit_rate=: (
                MetronomeSDK::CommitRate
              ) -> MetronomeSDK::CommitRate

              attr_reader credit_type: MetronomeSDK::CreditTypeData?

              def credit_type=: (
                MetronomeSDK::CreditTypeData
              ) -> MetronomeSDK::CreditTypeData

              attr_reader custom_rate: ::Hash[Symbol, top]?

              def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

              attr_reader is_prorated: bool?

              def is_prorated=: (bool) -> bool

              attr_reader price: Float?

              def price=: (Float) -> Float

              attr_reader pricing_group_values: ::Hash[Symbol, String]?

              def pricing_group_values=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader tiers: ::Array[MetronomeSDK::Tier]?

              def tiers=: (
                ::Array[MetronomeSDK::Tier]
              ) -> ::Array[MetronomeSDK::Tier]

              attr_reader use_list_prices: bool?

              def use_list_prices=: (bool) -> bool

              def initialize: (
                rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type,
                ?commit_rate: MetronomeSDK::CommitRate,
                ?credit_type: MetronomeSDK::CreditTypeData,
                ?custom_rate: ::Hash[Symbol, top],
                ?is_prorated: bool,
                ?price: Float,
                ?pricing_group_values: ::Hash[Symbol, String],
                ?quantity: Float,
                ?tiers: ::Array[MetronomeSDK::Tier],
                ?use_list_prices: bool
              ) -> void

              def to_hash: -> {
                rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type,
                commit_rate: MetronomeSDK::CommitRate,
                credit_type: MetronomeSDK::CreditTypeData,
                custom_rate: ::Hash[Symbol, top],
                is_prorated: bool,
                price: Float,
                pricing_group_values: ::Hash[Symbol, String],
                quantity: Float,
                tiers: ::Array[MetronomeSDK::Tier],
                use_list_prices: bool
              }

              type rate_type =
                :FLAT | :PERCENTAGE | :SUBSCRIPTION | :CUSTOM | :TIERED

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                FLAT: :FLAT
                PERCENTAGE: :PERCENTAGE
                SUBSCRIPTION: :SUBSCRIPTION
                CUSTOM: :CUSTOM
                TIERED: :TIERED

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type]
              end
            end
          end
        end
      end
    end
  end
end
