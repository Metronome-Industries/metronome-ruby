module MetronomeSDK
  module Models
    module V1
      module Contracts
        module RateCards
          type rate_add_response =
            {
              data: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data
            }

          class RateAddResponse < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor data: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data

            def initialize: (
              data: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data
            ) -> void

            type data =
              {
                rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type,
                commit_rate: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate,
                credit_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CreditType,
                custom_rate: ::Hash[Symbol, top],
                is_prorated: bool,
                price: Float,
                pricing_group_values: ::Hash[Symbol, String],
                quantity: Float,
                tiers: ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::Tier],
                use_list_prices: bool
              }

            class Data < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type

              attr_reader commit_rate: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate?

              def commit_rate=: (
                MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate
              ) -> MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate

              attr_reader credit_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CreditType?

              def credit_type=: (
                MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CreditType
              ) -> MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CreditType

              attr_reader custom_rate: ::Hash[Symbol, top]?

              def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

              attr_reader is_prorated: bool?

              def is_prorated=: (bool) -> bool

              attr_reader price: Float?

              def price=: (Float) -> Float

              attr_reader pricing_group_values: ::Hash[Symbol, String]?

              def pricing_group_values=: (
                ::Hash[Symbol, String]
              ) -> ::Hash[Symbol, String]

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader tiers: ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::Tier]?

              def tiers=: (
                ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::Tier]
              ) -> ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::Tier]

              attr_reader use_list_prices: bool?

              def use_list_prices=: (bool) -> bool

              def initialize: (
                rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type,
                ?commit_rate: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate,
                ?credit_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CreditType,
                ?custom_rate: ::Hash[Symbol, top],
                ?is_prorated: bool,
                ?price: Float,
                ?pricing_group_values: ::Hash[Symbol, String],
                ?quantity: Float,
                ?tiers: ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::Tier],
                ?use_list_prices: bool
              ) -> void

              type rate_type =
                :FLAT | :PERCENTAGE | :SUBSCRIPTION | :CUSTOM | :TIERED

              module RateType
                extend MetronomeSDK::Internal::Type::Enum

                FLAT: :FLAT
                PERCENTAGE: :PERCENTAGE
                SUBSCRIPTION: :SUBSCRIPTION
                CUSTOM: :CUSTOM
                TIERED: :TIERED

                def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::rate_type]
              end

              type commit_rate =
                {
                  rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::rate_type,
                  price: Float,
                  tiers: ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::Tier]
                }

              class CommitRate < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::rate_type

                attr_reader price: Float?

                def price=: (Float) -> Float

                attr_reader tiers: ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::Tier]?

                def tiers=: (
                  ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::Tier]
                ) -> ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::Tier]

                def initialize: (
                  rate_type: MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::rate_type,
                  ?price: Float,
                  ?tiers: ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::Tier]
                ) -> void

                type rate_type =
                  :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

                module RateType
                  extend MetronomeSDK::Internal::Type::Enum

                  FLAT: :FLAT
                  PERCENTAGE: :PERCENTAGE
                  SUBSCRIPTION: :SUBSCRIPTION
                  TIERED: :TIERED
                  CUSTOM: :CUSTOM

                  def self?.values: -> ::Array[MetronomeSDK::Models::V1::Contracts::RateCards::RateAddResponse::Data::CommitRate::rate_type]
                end

                type tier = { price: Float, size: Float }

                class Tier < MetronomeSDK::Internal::Type::BaseModel
                  attr_accessor price: Float

                  attr_reader size: Float?

                  def size=: (Float) -> Float

                  def initialize: (price: Float, ?size: Float) -> void
                end
              end

              type credit_type = { id: String, name: String }

              class CreditType < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor name: String

                def initialize: (id: String, name: String) -> void
              end

              type tier = { price: Float, size: Float }

              class Tier < MetronomeSDK::Internal::Type::BaseModel
                attr_accessor price: Float

                attr_reader size: Float?

                def size=: (Float) -> Float

                def initialize: (price: Float, ?size: Float) -> void
              end
            end
          end
        end
      end
    end
  end
end
