module MetronomeSDK
  module Models
    module V1
      type usage_search_response_item =
        {
          id: String,
          customer_id: String,
          event_type: String,
          timestamp: Time,
          transaction_id: String,
          is_duplicate: bool,
          matched_billable_metrics: ::Array[MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric],
          matched_customer: MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedCustomer,
          processed_at: Time,
          properties: ::Hash[Symbol, top]
        }

      class UsageSearchResponseItem < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor customer_id: String

        attr_accessor event_type: String

        attr_accessor timestamp: Time

        attr_accessor transaction_id: String

        attr_reader is_duplicate: bool?

        def is_duplicate=: (bool) -> bool

        attr_reader matched_billable_metrics: ::Array[MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric]?

        def matched_billable_metrics=: (
          ::Array[MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric]
        ) -> ::Array[MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric]

        attr_reader matched_customer: MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedCustomer?

        def matched_customer=: (
          MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedCustomer
        ) -> MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedCustomer

        attr_reader processed_at: Time?

        def processed_at=: (Time) -> Time

        attr_reader properties: ::Hash[Symbol, top]?

        def properties=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

        def initialize: (
          id: String,
          customer_id: String,
          event_type: String,
          timestamp: Time,
          transaction_id: String,
          ?is_duplicate: bool,
          ?matched_billable_metrics: ::Array[MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric],
          ?matched_customer: MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedCustomer,
          ?processed_at: Time,
          ?properties: ::Hash[Symbol, top]
        ) -> void

        def to_hash: -> {
          id: String,
          customer_id: String,
          event_type: String,
          timestamp: Time,
          transaction_id: String,
          is_duplicate: bool,
          matched_billable_metrics: ::Array[MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric],
          matched_customer: MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedCustomer,
          processed_at: Time,
          properties: ::Hash[Symbol, top]
        }

        type matched_billable_metric =
          {
            id: String,
            name: String,
            aggregate: String,
            aggregate_keys: ::Array[String],
            aggregation_key: String,
            aggregation_type: MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric::aggregation_type,
            archived_at: Time,
            custom_fields: ::Hash[Symbol, String],
            event_type_filter: MetronomeSDK::EventTypeFilter,
            filter: ::Hash[Symbol, top],
            group_by: ::Array[String],
            group_keys: ::Array[::Array[String]],
            property_filters: ::Array[MetronomeSDK::PropertyFilter],
            sql: String
          }

        class MatchedBillableMetric < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor name: String

          attr_reader aggregate: String?

          def aggregate=: (String) -> String

          attr_reader aggregate_keys: ::Array[String]?

          def aggregate_keys=: (::Array[String]) -> ::Array[String]

          attr_reader aggregation_key: String?

          def aggregation_key=: (String) -> String

          attr_reader aggregation_type: MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric::aggregation_type?

          def aggregation_type=: (
            MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric::aggregation_type
          ) -> MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric::aggregation_type

          attr_reader archived_at: Time?

          def archived_at=: (Time) -> Time

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader event_type_filter: MetronomeSDK::EventTypeFilter?

          def event_type_filter=: (
            MetronomeSDK::EventTypeFilter
          ) -> MetronomeSDK::EventTypeFilter

          attr_reader filter: ::Hash[Symbol, top]?

          def filter=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

          attr_reader group_by: ::Array[String]?

          def group_by=: (::Array[String]) -> ::Array[String]

          attr_reader group_keys: ::Array[::Array[String]]?

          def group_keys=: (
            ::Array[::Array[String]]
          ) -> ::Array[::Array[String]]

          attr_reader property_filters: ::Array[MetronomeSDK::PropertyFilter]?

          def property_filters=: (
            ::Array[MetronomeSDK::PropertyFilter]
          ) -> ::Array[MetronomeSDK::PropertyFilter]

          attr_reader sql: String?

          def sql=: (String) -> String

          def initialize: (
            id: String,
            name: String,
            ?aggregate: String,
            ?aggregate_keys: ::Array[String],
            ?aggregation_key: String,
            ?aggregation_type: MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric::aggregation_type,
            ?archived_at: Time,
            ?custom_fields: ::Hash[Symbol, String],
            ?event_type_filter: MetronomeSDK::EventTypeFilter,
            ?filter: ::Hash[Symbol, top],
            ?group_by: ::Array[String],
            ?group_keys: ::Array[::Array[String]],
            ?property_filters: ::Array[MetronomeSDK::PropertyFilter],
            ?sql: String
          ) -> void

          def to_hash: -> {
            id: String,
            name: String,
            aggregate: String,
            aggregate_keys: ::Array[String],
            aggregation_key: String,
            aggregation_type: MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric::aggregation_type,
            archived_at: Time,
            custom_fields: ::Hash[Symbol, String],
            event_type_filter: MetronomeSDK::EventTypeFilter,
            filter: ::Hash[Symbol, top],
            group_by: ::Array[String],
            group_keys: ::Array[::Array[String]],
            property_filters: ::Array[MetronomeSDK::PropertyFilter],
            sql: String
          }

          type aggregation_type = :COUNT | :LATEST | :MAX | :SUM | :UNIQUE

          module AggregationType
            extend MetronomeSDK::Internal::Type::Enum

            COUNT: :COUNT
            LATEST: :LATEST
            MAX: :MAX
            SUM: :SUM
            UNIQUE: :UNIQUE

            def self?.values: -> ::Array[MetronomeSDK::Models::V1::UsageSearchResponseItem::MatchedBillableMetric::aggregation_type]
          end
        end

        type matched_customer = { id: String, name: String }

        class MatchedCustomer < MetronomeSDK::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          def initialize: (?id: String, ?name: String) -> void

          def to_hash: -> { id: String, name: String }
        end
      end

      type usage_search_response =
        ::Array[MetronomeSDK::Models::V1::UsageSearchResponseItem]

      UsageSearchResponse: MetronomeSDK::Internal::Type::Converter
    end
  end
end
