module MetronomeSDK
  module Models
    module V1
      type customer_preview_events_params =
        {
          customer_id: String,
          events: ::Array[MetronomeSDK::V1::CustomerPreviewEventsParams::Event],
          mode: MetronomeSDK::Models::V1::CustomerPreviewEventsParams::mode,
          skip_zero_qty_line_items: bool
        }
        & MetronomeSDK::Internal::Type::request_parameters

      class CustomerPreviewEventsParams < MetronomeSDK::Internal::Type::BaseModel
        extend MetronomeSDK::Internal::Type::RequestParameters::Converter
        include MetronomeSDK::Internal::Type::RequestParameters

        attr_accessor customer_id: String

        attr_accessor events: ::Array[MetronomeSDK::V1::CustomerPreviewEventsParams::Event]

        attr_reader mode: MetronomeSDK::Models::V1::CustomerPreviewEventsParams::mode?

        def mode=: (
          MetronomeSDK::Models::V1::CustomerPreviewEventsParams::mode
        ) -> MetronomeSDK::Models::V1::CustomerPreviewEventsParams::mode

        attr_reader skip_zero_qty_line_items: bool?

        def skip_zero_qty_line_items=: (bool) -> bool

        def initialize: (
          customer_id: String,
          events: ::Array[MetronomeSDK::V1::CustomerPreviewEventsParams::Event],
          ?mode: MetronomeSDK::Models::V1::CustomerPreviewEventsParams::mode,
          ?skip_zero_qty_line_items: bool,
          ?request_options: MetronomeSDK::request_opts
        ) -> void

        def to_hash: -> {
          customer_id: String,
          events: ::Array[MetronomeSDK::V1::CustomerPreviewEventsParams::Event],
          mode: MetronomeSDK::Models::V1::CustomerPreviewEventsParams::mode,
          skip_zero_qty_line_items: bool,
          request_options: MetronomeSDK::RequestOptions
        }

        type event =
          {
            event_type: String,
            properties: ::Hash[Symbol, top],
            timestamp: String,
            transaction_id: String
          }

        class Event < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor event_type: String

          attr_reader properties: ::Hash[Symbol, top]?

          def properties=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

          attr_reader timestamp: String?

          def timestamp=: (String) -> String

          attr_reader transaction_id: String?

          def transaction_id=: (String) -> String

          def initialize: (
            event_type: String,
            ?properties: ::Hash[Symbol, top],
            ?timestamp: String,
            ?transaction_id: String
          ) -> void

          def to_hash: -> {
            event_type: String,
            properties: ::Hash[Symbol, top],
            timestamp: String,
            transaction_id: String
          }
        end

        type mode = :replace | :merge

        module Mode
          extend MetronomeSDK::Internal::Type::Enum

          REPLACE: :replace
          MERGE: :merge

          def self?.values: -> ::Array[MetronomeSDK::Models::V1::CustomerPreviewEventsParams::mode]
        end
      end
    end
  end
end
