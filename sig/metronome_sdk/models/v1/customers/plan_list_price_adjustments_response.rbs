module MetronomeSDK
  module Models
    module V1
      module Customers
        type plan_list_price_adjustments_response =
          {
            charge_id: String,
            charge_type: MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::charge_type,
            prices: ::Array[MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price],
            start_period: Float,
            quantity: Float
          }

        class PlanListPriceAdjustmentsResponse < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor charge_id: String

          attr_accessor charge_type: MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::charge_type

          attr_accessor prices: ::Array[MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price]

          attr_accessor start_period: Float

          attr_reader quantity: Float?

          def quantity=: (Float) -> Float

          def initialize: (
            charge_id: String,
            charge_type: MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::charge_type,
            prices: ::Array[MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price],
            start_period: Float,
            ?quantity: Float
          ) -> void

          def to_hash: -> {
            charge_id: String,
            charge_type: MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::charge_type,
            prices: ::Array[MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price],
            start_period: Float,
            quantity: Float
          }

          type charge_type = :usage | :fixed | :composite | :minimum | :seat

          module ChargeType
            extend MetronomeSDK::Internal::Type::Enum

            USAGE: :usage
            FIXED: :fixed
            COMPOSITE: :composite
            MINIMUM: :minimum
            SEAT: :seat

            def self?.values: -> ::Array[MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::charge_type]
          end

          type price =
            {
              adjustment_type: MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price::adjustment_type,
              tier: Float,
              value: Float
            }

          class Price < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor adjustment_type: MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price::adjustment_type

            attr_reader tier: Float?

            def tier=: (Float) -> Float

            attr_reader value: Float?

            def value=: (Float) -> Float

            def initialize: (
              adjustment_type: MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price::adjustment_type,
              ?tier: Float,
              ?value: Float
            ) -> void

            def to_hash: -> {
              adjustment_type: MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price::adjustment_type,
              tier: Float,
              value: Float
            }

            type adjustment_type = :fixed | :quantity | :percentage | :override

            module AdjustmentType
              extend MetronomeSDK::Internal::Type::Enum

              FIXED: :fixed
              QUANTITY: :quantity
              PERCENTAGE: :percentage
              OVERRIDE: :override

              def self?.values: -> ::Array[MetronomeSDK::Models::V1::Customers::PlanListPriceAdjustmentsResponse::Price::adjustment_type]
            end
          end
        end
      end
    end
  end
end
