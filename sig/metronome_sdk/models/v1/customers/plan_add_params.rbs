module MetronomeSDK
  module Models
    module V1
      module Customers
        type plan_add_params =
          {
            customer_id: String,
            plan_id: String,
            starting_on: Time,
            ending_before: Time,
            net_payment_terms_days: Float,
            overage_rate_adjustments: ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::OverageRateAdjustment],
            price_adjustments: ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment],
            trial_spec: MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec
          }
          & MetronomeSDK::Internal::Type::request_parameters

        class PlanAddParams < MetronomeSDK::Internal::Type::BaseModel
          extend MetronomeSDK::Internal::Type::RequestParameters::Converter
          include MetronomeSDK::Internal::Type::RequestParameters

          attr_accessor customer_id: String

          attr_accessor plan_id: String

          attr_accessor starting_on: Time

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader net_payment_terms_days: Float?

          def net_payment_terms_days=: (Float) -> Float

          attr_reader overage_rate_adjustments: ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::OverageRateAdjustment]?

          def overage_rate_adjustments=: (
            ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::OverageRateAdjustment]
          ) -> ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::OverageRateAdjustment]

          attr_reader price_adjustments: ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment]?

          def price_adjustments=: (
            ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment]
          ) -> ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment]

          attr_reader trial_spec: MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec?

          def trial_spec=: (
            MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec
          ) -> MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec

          def initialize: (
            customer_id: String,
            plan_id: String,
            starting_on: Time,
            ?ending_before: Time,
            ?net_payment_terms_days: Float,
            ?overage_rate_adjustments: ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::OverageRateAdjustment],
            ?price_adjustments: ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment],
            ?trial_spec: MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec,
            ?request_options: MetronomeSDK::request_opts
          ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::Customers::plan_add_params

          type overage_rate_adjustment =
            {
              custom_credit_type_id: String,
              fiat_currency_credit_type_id: String,
              to_fiat_conversion_factor: Float
            }

          class OverageRateAdjustment < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor custom_credit_type_id: String

            attr_accessor fiat_currency_credit_type_id: String

            attr_accessor to_fiat_conversion_factor: Float

            def initialize: (
              custom_credit_type_id: String,
              fiat_currency_credit_type_id: String,
              to_fiat_conversion_factor: Float
            ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::Customers::PlanAddParams::overage_rate_adjustment
          end

          type price_adjustment =
            {
              adjustment_type: MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment::adjustment_type,
              charge_id: String,
              start_period: Float,
              quantity: Float,
              tier: Float,
              value: Float
            }

          class PriceAdjustment < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor adjustment_type: MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment::adjustment_type

            attr_accessor charge_id: String

            attr_accessor start_period: Float

            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            attr_reader tier: Float?

            def tier=: (Float) -> Float

            attr_reader value: Float?

            def value=: (Float) -> Float

            def initialize: (
              adjustment_type: MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment::adjustment_type,
              charge_id: String,
              start_period: Float,
              ?quantity: Float,
              ?tier: Float,
              ?value: Float
            ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::Customers::PlanAddParams::price_adjustment

            type adjustment_type = :percentage | :fixed | :override | :quantity

            module AdjustmentType
              extend MetronomeSDK::Internal::Type::Enum

              PERCENTAGE: :percentage
              FIXED: :fixed
              OVERRIDE: :override
              QUANTITY: :quantity

              def self?.values: -> ::Array[MetronomeSDK::Models::V1::Customers::PlanAddParams::PriceAdjustment::adjustment_type]
            end
          end

          type trial_spec =
            {
              length_in_days: Float,
              spending_cap: MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec::SpendingCap
            }

          class TrialSpec < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor length_in_days: Float

            attr_reader spending_cap: MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec::SpendingCap?

            def spending_cap=: (
              MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec::SpendingCap
            ) -> MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec::SpendingCap

            def initialize: (
              length_in_days: Float,
              ?spending_cap: MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec::SpendingCap
            ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::Customers::PlanAddParams::trial_spec

            type spending_cap = { amount: Float, credit_type_id: String }

            class SpendingCap < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor amount: Float

              attr_accessor credit_type_id: String

              def initialize: (amount: Float, credit_type_id: String) -> void

              def to_hash: -> MetronomeSDK::Models::V1::Customers::PlanAddParams::TrialSpec::spending_cap
            end
          end
        end
      end
    end
  end
end
