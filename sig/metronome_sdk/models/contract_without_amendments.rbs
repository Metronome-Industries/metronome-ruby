module MetronomeSDK
  module Models
    type contract_without_amendments =
      {
        commits: ::Array[MetronomeSDK::Commit],
        created_at: Time,
        created_by: String,
        overrides: ::Array[MetronomeSDK::Override],
        scheduled_charges: ::Array[MetronomeSDK::ScheduledCharge],
        starting_at: Time,
        transitions: ::Array[MetronomeSDK::ContractWithoutAmendments::Transition],
        usage_statement_schedule: MetronomeSDK::ContractWithoutAmendments::UsageStatementSchedule,
        credits: ::Array[MetronomeSDK::Credit],
        discounts: ::Array[MetronomeSDK::Discount],
        ending_before: Time,
        hierarchy_configuration: MetronomeSDK::Models::ContractWithoutAmendments::hierarchy_configuration,
        name: String,
        net_payment_terms_days: Float,
        netsuite_sales_order_id: String,
        prepaid_balance_threshold_configuration: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration,
        professional_services: ::Array[MetronomeSDK::ProService],
        rate_card_id: String,
        recurring_commits: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit],
        recurring_credits: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit],
        reseller_royalties: ::Array[MetronomeSDK::ContractWithoutAmendments::ResellerRoyalty],
        salesforce_opportunity_id: String,
        scheduled_charges_on_usage_invoices: MetronomeSDK::Models::ContractWithoutAmendments::scheduled_charges_on_usage_invoices,
        spend_threshold_configuration: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration,
        total_contract_value: Float,
        usage_filter: MetronomeSDK::ContractWithoutAmendments::UsageFilter
      }

    class ContractWithoutAmendments < MetronomeSDK::Internal::Type::BaseModel
      attr_accessor commits: ::Array[MetronomeSDK::Commit]

      attr_accessor created_at: Time

      attr_accessor created_by: String

      attr_accessor overrides: ::Array[MetronomeSDK::Override]

      attr_accessor scheduled_charges: ::Array[MetronomeSDK::ScheduledCharge]

      attr_accessor starting_at: Time

      attr_accessor transitions: ::Array[MetronomeSDK::ContractWithoutAmendments::Transition]

      attr_accessor usage_statement_schedule: MetronomeSDK::ContractWithoutAmendments::UsageStatementSchedule

      attr_reader credits: ::Array[MetronomeSDK::Credit]?

      def credits=: (
        ::Array[MetronomeSDK::Credit]
      ) -> ::Array[MetronomeSDK::Credit]

      attr_reader discounts: ::Array[MetronomeSDK::Discount]?

      def discounts=: (
        ::Array[MetronomeSDK::Discount]
      ) -> ::Array[MetronomeSDK::Discount]

      attr_reader ending_before: Time?

      def ending_before=: (Time) -> Time

      attr_reader hierarchy_configuration: MetronomeSDK::Models::ContractWithoutAmendments::hierarchy_configuration?

      def hierarchy_configuration=: (
        MetronomeSDK::Models::ContractWithoutAmendments::hierarchy_configuration
      ) -> MetronomeSDK::Models::ContractWithoutAmendments::hierarchy_configuration

      attr_reader name: String?

      def name=: (String) -> String

      attr_reader net_payment_terms_days: Float?

      def net_payment_terms_days=: (Float) -> Float

      attr_reader netsuite_sales_order_id: String?

      def netsuite_sales_order_id=: (String) -> String

      attr_reader prepaid_balance_threshold_configuration: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration?

      def prepaid_balance_threshold_configuration=: (
        MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration
      ) -> MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration

      attr_reader professional_services: ::Array[MetronomeSDK::ProService]?

      def professional_services=: (
        ::Array[MetronomeSDK::ProService]
      ) -> ::Array[MetronomeSDK::ProService]

      attr_reader rate_card_id: String?

      def rate_card_id=: (String) -> String

      attr_reader recurring_commits: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit]?

      def recurring_commits=: (
        ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit]
      ) -> ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit]

      attr_reader recurring_credits: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit]?

      def recurring_credits=: (
        ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit]
      ) -> ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit]

      attr_reader reseller_royalties: ::Array[MetronomeSDK::ContractWithoutAmendments::ResellerRoyalty]?

      def reseller_royalties=: (
        ::Array[MetronomeSDK::ContractWithoutAmendments::ResellerRoyalty]
      ) -> ::Array[MetronomeSDK::ContractWithoutAmendments::ResellerRoyalty]

      attr_reader salesforce_opportunity_id: String?

      def salesforce_opportunity_id=: (String) -> String

      attr_reader scheduled_charges_on_usage_invoices: MetronomeSDK::Models::ContractWithoutAmendments::scheduled_charges_on_usage_invoices?

      def scheduled_charges_on_usage_invoices=: (
        MetronomeSDK::Models::ContractWithoutAmendments::scheduled_charges_on_usage_invoices
      ) -> MetronomeSDK::Models::ContractWithoutAmendments::scheduled_charges_on_usage_invoices

      attr_reader spend_threshold_configuration: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration?

      def spend_threshold_configuration=: (
        MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration
      ) -> MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration

      attr_reader total_contract_value: Float?

      def total_contract_value=: (Float) -> Float

      attr_reader usage_filter: MetronomeSDK::ContractWithoutAmendments::UsageFilter?

      def usage_filter=: (
        MetronomeSDK::ContractWithoutAmendments::UsageFilter
      ) -> MetronomeSDK::ContractWithoutAmendments::UsageFilter

      def initialize: (
        commits: ::Array[MetronomeSDK::Commit],
        created_at: Time,
        created_by: String,
        overrides: ::Array[MetronomeSDK::Override],
        scheduled_charges: ::Array[MetronomeSDK::ScheduledCharge],
        starting_at: Time,
        transitions: ::Array[MetronomeSDK::ContractWithoutAmendments::Transition],
        usage_statement_schedule: MetronomeSDK::ContractWithoutAmendments::UsageStatementSchedule,
        ?credits: ::Array[MetronomeSDK::Credit],
        ?discounts: ::Array[MetronomeSDK::Discount],
        ?ending_before: Time,
        ?hierarchy_configuration: MetronomeSDK::Models::ContractWithoutAmendments::hierarchy_configuration,
        ?name: String,
        ?net_payment_terms_days: Float,
        ?netsuite_sales_order_id: String,
        ?prepaid_balance_threshold_configuration: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration,
        ?professional_services: ::Array[MetronomeSDK::ProService],
        ?rate_card_id: String,
        ?recurring_commits: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit],
        ?recurring_credits: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit],
        ?reseller_royalties: ::Array[MetronomeSDK::ContractWithoutAmendments::ResellerRoyalty],
        ?salesforce_opportunity_id: String,
        ?scheduled_charges_on_usage_invoices: MetronomeSDK::Models::ContractWithoutAmendments::scheduled_charges_on_usage_invoices,
        ?spend_threshold_configuration: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration,
        ?total_contract_value: Float,
        ?usage_filter: MetronomeSDK::ContractWithoutAmendments::UsageFilter
      ) -> void

      def to_hash: -> {
        commits: ::Array[MetronomeSDK::Commit],
        created_at: Time,
        created_by: String,
        overrides: ::Array[MetronomeSDK::Override],
        scheduled_charges: ::Array[MetronomeSDK::ScheduledCharge],
        starting_at: Time,
        transitions: ::Array[MetronomeSDK::ContractWithoutAmendments::Transition],
        usage_statement_schedule: MetronomeSDK::ContractWithoutAmendments::UsageStatementSchedule,
        credits: ::Array[MetronomeSDK::Credit],
        discounts: ::Array[MetronomeSDK::Discount],
        ending_before: Time,
        hierarchy_configuration: MetronomeSDK::Models::ContractWithoutAmendments::hierarchy_configuration,
        name: String,
        net_payment_terms_days: Float,
        netsuite_sales_order_id: String,
        prepaid_balance_threshold_configuration: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration,
        professional_services: ::Array[MetronomeSDK::ProService],
        rate_card_id: String,
        recurring_commits: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit],
        recurring_credits: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit],
        reseller_royalties: ::Array[MetronomeSDK::ContractWithoutAmendments::ResellerRoyalty],
        salesforce_opportunity_id: String,
        scheduled_charges_on_usage_invoices: MetronomeSDK::Models::ContractWithoutAmendments::scheduled_charges_on_usage_invoices,
        spend_threshold_configuration: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration,
        total_contract_value: Float,
        usage_filter: MetronomeSDK::ContractWithoutAmendments::UsageFilter
      }

      type transition =
        {
          from_contract_id: String,
          to_contract_id: String,
          type: MetronomeSDK::Models::ContractWithoutAmendments::Transition::type_
        }

      class Transition < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor from_contract_id: String

        attr_accessor to_contract_id: String

        attr_accessor type: MetronomeSDK::Models::ContractWithoutAmendments::Transition::type_

        def initialize: (
          from_contract_id: String,
          to_contract_id: String,
          type: MetronomeSDK::Models::ContractWithoutAmendments::Transition::type_
        ) -> void

        def to_hash: -> {
          from_contract_id: String,
          to_contract_id: String,
          type: MetronomeSDK::Models::ContractWithoutAmendments::Transition::type_
        }

        type type_ = :SUPERSEDE | :RENEWAL

        module Type
          extend MetronomeSDK::Internal::Type::Enum

          SUPERSEDE: :SUPERSEDE
          RENEWAL: :RENEWAL

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::Transition::type_]
        end
      end

      type usage_statement_schedule =
        {
          billing_anchor_date: Time,
          frequency: MetronomeSDK::Models::ContractWithoutAmendments::UsageStatementSchedule::frequency
        }

      class UsageStatementSchedule < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor billing_anchor_date: Time

        attr_accessor frequency: MetronomeSDK::Models::ContractWithoutAmendments::UsageStatementSchedule::frequency

        def initialize: (
          billing_anchor_date: Time,
          frequency: MetronomeSDK::Models::ContractWithoutAmendments::UsageStatementSchedule::frequency
        ) -> void

        def to_hash: -> {
          billing_anchor_date: Time,
          frequency: MetronomeSDK::Models::ContractWithoutAmendments::UsageStatementSchedule::frequency
        }

        type frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

        module Frequency
          extend MetronomeSDK::Internal::Type::Enum

          MONTHLY: :MONTHLY
          QUARTERLY: :QUARTERLY
          ANNUAL: :ANNUAL
          WEEKLY: :WEEKLY

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::UsageStatementSchedule::frequency]
        end
      end

      type hierarchy_configuration =
        MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ParentHierarchyConfiguration
        | MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ChildHierarchyConfiguration

      module HierarchyConfiguration
        extend MetronomeSDK::Internal::Type::Union

        type parent_hierarchy_configuration =
          {
            children: ::Array[MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ParentHierarchyConfiguration::Child]
          }

        class ParentHierarchyConfiguration < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor children: ::Array[MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ParentHierarchyConfiguration::Child]

          def initialize: (
            children: ::Array[MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ParentHierarchyConfiguration::Child]
          ) -> void

          def to_hash: -> {
            children: ::Array[MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ParentHierarchyConfiguration::Child]
          }

          type child = { contract_id: String, customer_id: String }

          class Child < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor contract_id: String

            attr_accessor customer_id: String

            def initialize: (contract_id: String, customer_id: String) -> void

            def to_hash: -> { contract_id: String, customer_id: String }
          end
        end

        type child_hierarchy_configuration =
          {
            parent: MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ChildHierarchyConfiguration::Parent
          }

        class ChildHierarchyConfiguration < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor parent: MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ChildHierarchyConfiguration::Parent

          def initialize: (
            parent: MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ChildHierarchyConfiguration::Parent
          ) -> void

          def to_hash: -> {
            parent: MetronomeSDK::ContractWithoutAmendments::HierarchyConfiguration::ChildHierarchyConfiguration::Parent
          }

          type parent = { contract_id: String, customer_id: String }

          class Parent < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor contract_id: String

            attr_accessor customer_id: String

            def initialize: (contract_id: String, customer_id: String) -> void

            def to_hash: -> { contract_id: String, customer_id: String }
          end
        end

        def self?.variants: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::hierarchy_configuration]
      end

      type prepaid_balance_threshold_configuration =
        {
          commit: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit,
          is_enabled: bool,
          payment_gate_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
          recharge_to_amount: Float,
          threshold_amount: Float,
          custom_credit_type_id: String
        }

      class PrepaidBalanceThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor commit: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit

        attr_accessor is_enabled: bool

        attr_accessor payment_gate_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig

        attr_accessor recharge_to_amount: Float

        attr_accessor threshold_amount: Float

        attr_reader custom_credit_type_id: String?

        def custom_credit_type_id=: (String) -> String

        def initialize: (
          commit: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit,
          is_enabled: bool,
          payment_gate_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
          recharge_to_amount: Float,
          threshold_amount: Float,
          ?custom_credit_type_id: String
        ) -> void

        def to_hash: -> {
          commit: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit,
          is_enabled: bool,
          payment_gate_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig,
          recharge_to_amount: Float,
          threshold_amount: Float,
          custom_credit_type_id: String
        }

        type commit =
          {
            product_id: String,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            description: String,
            name: String,
            specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
          }

        class Commit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor product_id: String

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit::Specifier]?

          def specifiers=: (
            ::Array[MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
          ) -> ::Array[MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit::Specifier]

          def initialize: (
            product_id: String,
            ?applicable_product_ids: ::Array[String],
            ?applicable_product_tags: ::Array[String],
            ?description: String,
            ?name: String,
            ?specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
          ) -> void

          def to_hash: -> {
            product_id: String,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            description: String,
            name: String,
            specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::Commit::Specifier]
          }

          type specifier =
            {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }

          class Specifier < MetronomeSDK::Internal::Type::BaseModel
            attr_reader presentation_group_values: ::Hash[Symbol, String]?

            def presentation_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader pricing_group_values: ::Hash[Symbol, String]?

            def pricing_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader product_id: String?

            def product_id=: (String) -> String

            attr_reader product_tags: ::Array[String]?

            def product_tags=: (::Array[String]) -> ::Array[String]

            def initialize: (
              ?presentation_group_values: ::Hash[Symbol, String],
              ?pricing_group_values: ::Hash[Symbol, String],
              ?product_id: String,
              ?product_tags: ::Array[String]
            ) -> void

            def to_hash: -> {
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String]
            }
          end
        end

        type payment_gate_config =
          {
            payment_gate_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
            precalculated_tax_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig,
            stripe_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
            tax_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
          }

        class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor payment_gate_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type

          attr_reader precalculated_tax_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig?

          def precalculated_tax_config=: (
            MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig
          ) -> MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig

          attr_reader stripe_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig?

          def stripe_config=: (
            MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig
          ) -> MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig

          attr_reader tax_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type?

          def tax_type=: (
            MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
          ) -> MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type

          def initialize: (
            payment_gate_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
            ?precalculated_tax_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig,
            ?stripe_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
            ?tax_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
          ) -> void

          def to_hash: -> {
            payment_gate_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
            precalculated_tax_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig,
            stripe_config: MetronomeSDK::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
            tax_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type
          }

          type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

          module PaymentGateType
            extend MetronomeSDK::Internal::Type::Enum

            NONE: :NONE
            STRIPE: :STRIPE
            EXTERNAL: :EXTERNAL

            def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type]
          end

          type precalculated_tax_config =
            { tax_amount: Float, tax_name: String }

          class PrecalculatedTaxConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor tax_amount: Float

            attr_reader tax_name: String?

            def tax_name=: (String) -> String

            def initialize: (tax_amount: Float, ?tax_name: String) -> void

            def to_hash: -> { tax_amount: Float, tax_name: String }
          end

          type stripe_config =
            {
              payment_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type,
              invoice_metadata: ::Hash[Symbol, String]
            }

          class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor payment_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

            attr_reader invoice_metadata: ::Hash[Symbol, String]?

            def invoice_metadata=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            def initialize: (
              payment_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type,
              ?invoice_metadata: ::Hash[Symbol, String]
            ) -> void

            def to_hash: -> {
              payment_type: MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type,
              invoice_metadata: ::Hash[Symbol, String]
            }

            type payment_type = :INVOICE | :PAYMENT_INTENT

            module PaymentType
              extend MetronomeSDK::Internal::Type::Enum

              INVOICE: :INVOICE
              PAYMENT_INTENT: :PAYMENT_INTENT

              def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
            end
          end

          type tax_type = :NONE | :STRIPE | :ANROK | :PRECALCULATED

          module TaxType
            extend MetronomeSDK::Internal::Type::Enum

            NONE: :NONE
            STRIPE: :STRIPE
            ANROK: :ANROK
            PRECALCULATED: :PRECALCULATED

            def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::PrepaidBalanceThresholdConfiguration::PaymentGateConfig::tax_type]
          end
        end
      end

      type recurring_commit =
        {
          id: String,
          access_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::AccessAmount,
          commit_duration: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::CommitDuration,
          priority: Float,
          product: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Product,
          rate_type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::rate_type,
          starting_at: Time,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          contract: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Contract,
          description: String,
          ending_before: Time,
          hierarchy_configuration: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration,
          invoice_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::InvoiceAmount,
          name: String,
          netsuite_sales_order_id: String,
          proration: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::proration,
          recurrence_frequency: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::recurrence_frequency,
          rollover_fraction: Float,
          specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Specifier],
          subscription_config: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig
        }

      class RecurringCommit < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor access_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::AccessAmount

        attr_accessor commit_duration: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::CommitDuration

        attr_accessor priority: Float

        attr_accessor product: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Product

        attr_accessor rate_type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::rate_type

        attr_accessor starting_at: Time

        attr_reader applicable_product_ids: ::Array[String]?

        def applicable_product_ids=: (::Array[String]) -> ::Array[String]

        attr_reader applicable_product_tags: ::Array[String]?

        def applicable_product_tags=: (::Array[String]) -> ::Array[String]

        attr_reader contract: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Contract?

        def contract=: (
          MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Contract
        ) -> MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Contract

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader ending_before: Time?

        def ending_before=: (Time) -> Time

        attr_reader hierarchy_configuration: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration?

        def hierarchy_configuration=: (
          MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration
        ) -> MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration

        attr_reader invoice_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::InvoiceAmount?

        def invoice_amount=: (
          MetronomeSDK::ContractWithoutAmendments::RecurringCommit::InvoiceAmount
        ) -> MetronomeSDK::ContractWithoutAmendments::RecurringCommit::InvoiceAmount

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader netsuite_sales_order_id: String?

        def netsuite_sales_order_id=: (String) -> String

        attr_reader proration: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::proration?

        def proration=: (
          MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::proration
        ) -> MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::proration

        attr_reader recurrence_frequency: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::recurrence_frequency?

        def recurrence_frequency=: (
          MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::recurrence_frequency
        ) -> MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::recurrence_frequency

        attr_reader rollover_fraction: Float?

        def rollover_fraction=: (Float) -> Float

        attr_reader specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Specifier]?

        def specifiers=: (
          ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Specifier]
        ) -> ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Specifier]

        attr_reader subscription_config: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig?

        def subscription_config=: (
          MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig
        ) -> MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig

        def initialize: (
          id: String,
          access_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::AccessAmount,
          commit_duration: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::CommitDuration,
          priority: Float,
          product: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Product,
          rate_type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::rate_type,
          starting_at: Time,
          ?applicable_product_ids: ::Array[String],
          ?applicable_product_tags: ::Array[String],
          ?contract: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Contract,
          ?description: String,
          ?ending_before: Time,
          ?hierarchy_configuration: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration,
          ?invoice_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::InvoiceAmount,
          ?name: String,
          ?netsuite_sales_order_id: String,
          ?proration: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::proration,
          ?recurrence_frequency: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::recurrence_frequency,
          ?rollover_fraction: Float,
          ?specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Specifier],
          ?subscription_config: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig
        ) -> void

        def to_hash: -> {
          id: String,
          access_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::AccessAmount,
          commit_duration: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::CommitDuration,
          priority: Float,
          product: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Product,
          rate_type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::rate_type,
          starting_at: Time,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          contract: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Contract,
          description: String,
          ending_before: Time,
          hierarchy_configuration: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration,
          invoice_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::InvoiceAmount,
          name: String,
          netsuite_sales_order_id: String,
          proration: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::proration,
          recurrence_frequency: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::recurrence_frequency,
          rollover_fraction: Float,
          specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCommit::Specifier],
          subscription_config: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig
        }

        type access_amount =
          { credit_type_id: String, unit_price: Float, quantity: Float }

        class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor credit_type_id: String

          attr_accessor unit_price: Float

          attr_reader quantity: Float?

          def quantity=: (Float) -> Float

          def initialize: (
            credit_type_id: String,
            unit_price: Float,
            ?quantity: Float
          ) -> void

          def to_hash: -> {
            credit_type_id: String,
            unit_price: Float,
            quantity: Float
          }
        end

        type commit_duration =
          {
            value: Float,
            unit: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::CommitDuration::unit
          }

        class CommitDuration < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor value: Float

          attr_reader unit: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::CommitDuration::unit?

          def unit=: (
            MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::CommitDuration::unit
          ) -> MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::CommitDuration::unit

          def initialize: (
            value: Float,
            ?unit: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::CommitDuration::unit
          ) -> void

          def to_hash: -> {
            value: Float,
            unit: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::CommitDuration::unit
          }

          type unit = :PERIODS

          module Unit
            extend MetronomeSDK::Internal::Type::Enum

            PERIODS: :PERIODS

            def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::CommitDuration::unit]
          end
        end

        type product = { id: String, name: String }

        class Product < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor name: String

          def initialize: (id: String, name: String) -> void

          def to_hash: -> { id: String, name: String }
        end

        type rate_type = :COMMIT_RATE | :LIST_RATE

        module RateType
          extend MetronomeSDK::Internal::Type::Enum

          COMMIT_RATE: :COMMIT_RATE
          LIST_RATE: :LIST_RATE

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::rate_type]
        end

        type contract = { id: String }

        class Contract < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          def initialize: (id: String) -> void

          def to_hash: -> { id: String }
        end

        type hierarchy_configuration =
          {
            child_access: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::child_access
          }

        class HierarchyConfiguration < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor child_access: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::child_access

          def initialize: (
            child_access: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::child_access
          ) -> void

          def to_hash: -> {
            child_access: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::child_access
          }

          type child_access =
            MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll
            | MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone
            | MetronomeSDK::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs

          module ChildAccess
            extend MetronomeSDK::Internal::Type::Union

            type commit_hierarchy_child_access_all =
              {
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_
              }

            class CommitHierarchyChildAccessAll < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_

              def initialize: (
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_
              ) -> void

              def to_hash: -> {
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_
              }

              type type_ = :ALL

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                ALL: :ALL

                def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_]
              end
            end

            type commit_hierarchy_child_access_none =
              {
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_
              }

            class CommitHierarchyChildAccessNone < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_

              def initialize: (
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_
              ) -> void

              def to_hash: -> {
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_
              }

              type type_ = :NONE

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE

                def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_]
              end
            end

            type commit_hierarchy_child_access_contract_ids =
              {
                contract_ids: ::Array[String],
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_
              }

            class CommitHierarchyChildAccessContractIDs < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor contract_ids: ::Array[String]

              attr_accessor type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_

              def initialize: (
                contract_ids: ::Array[String],
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_
              ) -> void

              def to_hash: -> {
                contract_ids: ::Array[String],
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_
              }

              type type_ = :CONTRACT_IDS

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                CONTRACT_IDS: :CONTRACT_IDS

                def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_]
              end
            end

            def self?.variants: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::HierarchyConfiguration::child_access]
          end
        end

        type invoice_amount =
          { credit_type_id: String, quantity: Float, unit_price: Float }

        class InvoiceAmount < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor credit_type_id: String

          attr_accessor quantity: Float

          attr_accessor unit_price: Float

          def initialize: (
            credit_type_id: String,
            quantity: Float,
            unit_price: Float
          ) -> void

          def to_hash: -> {
            credit_type_id: String,
            quantity: Float,
            unit_price: Float
          }
        end

        type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

        module Proration
          extend MetronomeSDK::Internal::Type::Enum

          NONE: :NONE
          FIRST: :FIRST
          LAST: :LAST
          FIRST_AND_LAST: :FIRST_AND_LAST

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::proration]
        end

        type recurrence_frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

        module RecurrenceFrequency
          extend MetronomeSDK::Internal::Type::Enum

          MONTHLY: :MONTHLY
          QUARTERLY: :QUARTERLY
          ANNUAL: :ANNUAL
          WEEKLY: :WEEKLY

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::recurrence_frequency]
        end

        type specifier =
          {
            presentation_group_values: ::Hash[Symbol, String],
            pricing_group_values: ::Hash[Symbol, String],
            product_id: String,
            product_tags: ::Array[String]
          }

        class Specifier < MetronomeSDK::Internal::Type::BaseModel
          attr_reader presentation_group_values: ::Hash[Symbol, String]?

          def presentation_group_values=: (
            ::Hash[Symbol, String]
          ) -> ::Hash[Symbol, String]

          attr_reader pricing_group_values: ::Hash[Symbol, String]?

          def pricing_group_values=: (
            ::Hash[Symbol, String]
          ) -> ::Hash[Symbol, String]

          attr_reader product_id: String?

          def product_id=: (String) -> String

          attr_reader product_tags: ::Array[String]?

          def product_tags=: (::Array[String]) -> ::Array[String]

          def initialize: (
            ?presentation_group_values: ::Hash[Symbol, String],
            ?pricing_group_values: ::Hash[Symbol, String],
            ?product_id: String,
            ?product_tags: ::Array[String]
          ) -> void

          def to_hash: -> {
            presentation_group_values: ::Hash[Symbol, String],
            pricing_group_values: ::Hash[Symbol, String],
            product_id: String,
            product_tags: ::Array[String]
          }
        end

        type subscription_config =
          {
            allocation: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::allocation,
            apply_seat_increase_config: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::ApplySeatIncreaseConfig,
            subscription_id: String
          }

        class SubscriptionConfig < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor allocation: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::allocation

          attr_accessor apply_seat_increase_config: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::ApplySeatIncreaseConfig

          attr_accessor subscription_id: String

          def initialize: (
            allocation: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::allocation,
            apply_seat_increase_config: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::ApplySeatIncreaseConfig,
            subscription_id: String
          ) -> void

          def to_hash: -> {
            allocation: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::allocation,
            apply_seat_increase_config: MetronomeSDK::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::ApplySeatIncreaseConfig,
            subscription_id: String
          }

          type allocation = :INDIVIDUAL | :POOLED

          module Allocation
            extend MetronomeSDK::Internal::Type::Enum

            INDIVIDUAL: :INDIVIDUAL
            POOLED: :POOLED

            def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCommit::SubscriptionConfig::allocation]
          end

          type apply_seat_increase_config = { is_prorated: bool }

          class ApplySeatIncreaseConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor is_prorated: bool

            def initialize: (is_prorated: bool) -> void

            def to_hash: -> { is_prorated: bool }
          end
        end
      end

      type recurring_credit =
        {
          id: String,
          access_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::AccessAmount,
          commit_duration: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::CommitDuration,
          priority: Float,
          product: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Product,
          rate_type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::rate_type,
          starting_at: Time,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          contract: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Contract,
          description: String,
          ending_before: Time,
          hierarchy_configuration: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration,
          name: String,
          netsuite_sales_order_id: String,
          proration: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::proration,
          recurrence_frequency: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::recurrence_frequency,
          rollover_fraction: Float,
          specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Specifier],
          subscription_config: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig
        }

      class RecurringCredit < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor access_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::AccessAmount

        attr_accessor commit_duration: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::CommitDuration

        attr_accessor priority: Float

        attr_accessor product: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Product

        attr_accessor rate_type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::rate_type

        attr_accessor starting_at: Time

        attr_reader applicable_product_ids: ::Array[String]?

        def applicable_product_ids=: (::Array[String]) -> ::Array[String]

        attr_reader applicable_product_tags: ::Array[String]?

        def applicable_product_tags=: (::Array[String]) -> ::Array[String]

        attr_reader contract: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Contract?

        def contract=: (
          MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Contract
        ) -> MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Contract

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader ending_before: Time?

        def ending_before=: (Time) -> Time

        attr_reader hierarchy_configuration: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration?

        def hierarchy_configuration=: (
          MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration
        ) -> MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader netsuite_sales_order_id: String?

        def netsuite_sales_order_id=: (String) -> String

        attr_reader proration: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::proration?

        def proration=: (
          MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::proration
        ) -> MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::proration

        attr_reader recurrence_frequency: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::recurrence_frequency?

        def recurrence_frequency=: (
          MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::recurrence_frequency
        ) -> MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::recurrence_frequency

        attr_reader rollover_fraction: Float?

        def rollover_fraction=: (Float) -> Float

        attr_reader specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Specifier]?

        def specifiers=: (
          ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Specifier]
        ) -> ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Specifier]

        attr_reader subscription_config: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig?

        def subscription_config=: (
          MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig
        ) -> MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig

        def initialize: (
          id: String,
          access_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::AccessAmount,
          commit_duration: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::CommitDuration,
          priority: Float,
          product: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Product,
          rate_type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::rate_type,
          starting_at: Time,
          ?applicable_product_ids: ::Array[String],
          ?applicable_product_tags: ::Array[String],
          ?contract: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Contract,
          ?description: String,
          ?ending_before: Time,
          ?hierarchy_configuration: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration,
          ?name: String,
          ?netsuite_sales_order_id: String,
          ?proration: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::proration,
          ?recurrence_frequency: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::recurrence_frequency,
          ?rollover_fraction: Float,
          ?specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Specifier],
          ?subscription_config: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig
        ) -> void

        def to_hash: -> {
          id: String,
          access_amount: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::AccessAmount,
          commit_duration: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::CommitDuration,
          priority: Float,
          product: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Product,
          rate_type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::rate_type,
          starting_at: Time,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          contract: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Contract,
          description: String,
          ending_before: Time,
          hierarchy_configuration: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration,
          name: String,
          netsuite_sales_order_id: String,
          proration: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::proration,
          recurrence_frequency: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::recurrence_frequency,
          rollover_fraction: Float,
          specifiers: ::Array[MetronomeSDK::ContractWithoutAmendments::RecurringCredit::Specifier],
          subscription_config: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig
        }

        type access_amount =
          { credit_type_id: String, unit_price: Float, quantity: Float }

        class AccessAmount < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor credit_type_id: String

          attr_accessor unit_price: Float

          attr_reader quantity: Float?

          def quantity=: (Float) -> Float

          def initialize: (
            credit_type_id: String,
            unit_price: Float,
            ?quantity: Float
          ) -> void

          def to_hash: -> {
            credit_type_id: String,
            unit_price: Float,
            quantity: Float
          }
        end

        type commit_duration =
          {
            value: Float,
            unit: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::CommitDuration::unit
          }

        class CommitDuration < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor value: Float

          attr_reader unit: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::CommitDuration::unit?

          def unit=: (
            MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::CommitDuration::unit
          ) -> MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::CommitDuration::unit

          def initialize: (
            value: Float,
            ?unit: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::CommitDuration::unit
          ) -> void

          def to_hash: -> {
            value: Float,
            unit: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::CommitDuration::unit
          }

          type unit = :PERIODS

          module Unit
            extend MetronomeSDK::Internal::Type::Enum

            PERIODS: :PERIODS

            def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::CommitDuration::unit]
          end
        end

        type product = { id: String, name: String }

        class Product < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor name: String

          def initialize: (id: String, name: String) -> void

          def to_hash: -> { id: String, name: String }
        end

        type rate_type = :COMMIT_RATE | :LIST_RATE

        module RateType
          extend MetronomeSDK::Internal::Type::Enum

          COMMIT_RATE: :COMMIT_RATE
          LIST_RATE: :LIST_RATE

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::rate_type]
        end

        type contract = { id: String }

        class Contract < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor id: String

          def initialize: (id: String) -> void

          def to_hash: -> { id: String }
        end

        type hierarchy_configuration =
          {
            child_access: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::child_access
          }

        class HierarchyConfiguration < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor child_access: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::child_access

          def initialize: (
            child_access: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::child_access
          ) -> void

          def to_hash: -> {
            child_access: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::child_access
          }

          type child_access =
            MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll
            | MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone
            | MetronomeSDK::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs

          module ChildAccess
            extend MetronomeSDK::Internal::Type::Union

            type commit_hierarchy_child_access_all =
              {
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_
              }

            class CommitHierarchyChildAccessAll < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_

              def initialize: (
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_
              ) -> void

              def to_hash: -> {
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_
              }

              type type_ = :ALL

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                ALL: :ALL

                def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessAll::type_]
              end
            end

            type commit_hierarchy_child_access_none =
              {
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_
              }

            class CommitHierarchyChildAccessNone < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_

              def initialize: (
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_
              ) -> void

              def to_hash: -> {
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_
              }

              type type_ = :NONE

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                NONE: :NONE

                def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessNone::type_]
              end
            end

            type commit_hierarchy_child_access_contract_ids =
              {
                contract_ids: ::Array[String],
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_
              }

            class CommitHierarchyChildAccessContractIDs < MetronomeSDK::Internal::Type::BaseModel
              attr_accessor contract_ids: ::Array[String]

              attr_accessor type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_

              def initialize: (
                contract_ids: ::Array[String],
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_
              ) -> void

              def to_hash: -> {
                contract_ids: ::Array[String],
                type: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_
              }

              type type_ = :CONTRACT_IDS

              module Type
                extend MetronomeSDK::Internal::Type::Enum

                CONTRACT_IDS: :CONTRACT_IDS

                def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::ChildAccess::CommitHierarchyChildAccessContractIDs::type_]
              end
            end

            def self?.variants: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::HierarchyConfiguration::child_access]
          end
        end

        type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

        module Proration
          extend MetronomeSDK::Internal::Type::Enum

          NONE: :NONE
          FIRST: :FIRST
          LAST: :LAST
          FIRST_AND_LAST: :FIRST_AND_LAST

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::proration]
        end

        type recurrence_frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

        module RecurrenceFrequency
          extend MetronomeSDK::Internal::Type::Enum

          MONTHLY: :MONTHLY
          QUARTERLY: :QUARTERLY
          ANNUAL: :ANNUAL
          WEEKLY: :WEEKLY

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::recurrence_frequency]
        end

        type specifier =
          {
            presentation_group_values: ::Hash[Symbol, String],
            pricing_group_values: ::Hash[Symbol, String],
            product_id: String,
            product_tags: ::Array[String]
          }

        class Specifier < MetronomeSDK::Internal::Type::BaseModel
          attr_reader presentation_group_values: ::Hash[Symbol, String]?

          def presentation_group_values=: (
            ::Hash[Symbol, String]
          ) -> ::Hash[Symbol, String]

          attr_reader pricing_group_values: ::Hash[Symbol, String]?

          def pricing_group_values=: (
            ::Hash[Symbol, String]
          ) -> ::Hash[Symbol, String]

          attr_reader product_id: String?

          def product_id=: (String) -> String

          attr_reader product_tags: ::Array[String]?

          def product_tags=: (::Array[String]) -> ::Array[String]

          def initialize: (
            ?presentation_group_values: ::Hash[Symbol, String],
            ?pricing_group_values: ::Hash[Symbol, String],
            ?product_id: String,
            ?product_tags: ::Array[String]
          ) -> void

          def to_hash: -> {
            presentation_group_values: ::Hash[Symbol, String],
            pricing_group_values: ::Hash[Symbol, String],
            product_id: String,
            product_tags: ::Array[String]
          }
        end

        type subscription_config =
          {
            allocation: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::allocation,
            apply_seat_increase_config: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::ApplySeatIncreaseConfig,
            subscription_id: String
          }

        class SubscriptionConfig < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor allocation: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::allocation

          attr_accessor apply_seat_increase_config: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::ApplySeatIncreaseConfig

          attr_accessor subscription_id: String

          def initialize: (
            allocation: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::allocation,
            apply_seat_increase_config: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::ApplySeatIncreaseConfig,
            subscription_id: String
          ) -> void

          def to_hash: -> {
            allocation: MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::allocation,
            apply_seat_increase_config: MetronomeSDK::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::ApplySeatIncreaseConfig,
            subscription_id: String
          }

          type allocation = :INDIVIDUAL | :POOLED

          module Allocation
            extend MetronomeSDK::Internal::Type::Enum

            INDIVIDUAL: :INDIVIDUAL
            POOLED: :POOLED

            def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::RecurringCredit::SubscriptionConfig::allocation]
          end

          type apply_seat_increase_config = { is_prorated: bool }

          class ApplySeatIncreaseConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor is_prorated: bool

            def initialize: (is_prorated: bool) -> void

            def to_hash: -> { is_prorated: bool }
          end
        end
      end

      type reseller_royalty =
        {
          fraction: Float,
          netsuite_reseller_id: String,
          reseller_type: MetronomeSDK::Models::ContractWithoutAmendments::ResellerRoyalty::reseller_type,
          starting_at: Time,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          aws_account_number: String,
          aws_offer_id: String,
          aws_payer_reference_id: String,
          ending_before: Time,
          gcp_account_id: String,
          gcp_offer_id: String,
          reseller_contract_value: Float
        }

      class ResellerRoyalty < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor fraction: Float

        attr_accessor netsuite_reseller_id: String

        attr_accessor reseller_type: MetronomeSDK::Models::ContractWithoutAmendments::ResellerRoyalty::reseller_type

        attr_accessor starting_at: Time

        attr_reader applicable_product_ids: ::Array[String]?

        def applicable_product_ids=: (::Array[String]) -> ::Array[String]

        attr_reader applicable_product_tags: ::Array[String]?

        def applicable_product_tags=: (::Array[String]) -> ::Array[String]

        attr_reader aws_account_number: String?

        def aws_account_number=: (String) -> String

        attr_reader aws_offer_id: String?

        def aws_offer_id=: (String) -> String

        attr_reader aws_payer_reference_id: String?

        def aws_payer_reference_id=: (String) -> String

        attr_reader ending_before: Time?

        def ending_before=: (Time) -> Time

        attr_reader gcp_account_id: String?

        def gcp_account_id=: (String) -> String

        attr_reader gcp_offer_id: String?

        def gcp_offer_id=: (String) -> String

        attr_reader reseller_contract_value: Float?

        def reseller_contract_value=: (Float) -> Float

        def initialize: (
          fraction: Float,
          netsuite_reseller_id: String,
          reseller_type: MetronomeSDK::Models::ContractWithoutAmendments::ResellerRoyalty::reseller_type,
          starting_at: Time,
          ?applicable_product_ids: ::Array[String],
          ?applicable_product_tags: ::Array[String],
          ?aws_account_number: String,
          ?aws_offer_id: String,
          ?aws_payer_reference_id: String,
          ?ending_before: Time,
          ?gcp_account_id: String,
          ?gcp_offer_id: String,
          ?reseller_contract_value: Float
        ) -> void

        def to_hash: -> {
          fraction: Float,
          netsuite_reseller_id: String,
          reseller_type: MetronomeSDK::Models::ContractWithoutAmendments::ResellerRoyalty::reseller_type,
          starting_at: Time,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          aws_account_number: String,
          aws_offer_id: String,
          aws_payer_reference_id: String,
          ending_before: Time,
          gcp_account_id: String,
          gcp_offer_id: String,
          reseller_contract_value: Float
        }

        type reseller_type = :AWS | :AWS_PRO_SERVICE | :GCP | :GCP_PRO_SERVICE

        module ResellerType
          extend MetronomeSDK::Internal::Type::Enum

          AWS: :AWS
          AWS_PRO_SERVICE: :AWS_PRO_SERVICE
          GCP: :GCP
          GCP_PRO_SERVICE: :GCP_PRO_SERVICE

          def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::ResellerRoyalty::reseller_type]
        end
      end

      type scheduled_charges_on_usage_invoices = :ALL

      module ScheduledChargesOnUsageInvoices
        extend MetronomeSDK::Internal::Type::Enum

        ALL: :ALL

        def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::scheduled_charges_on_usage_invoices]
      end

      type spend_threshold_configuration =
        {
          commit: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::Commit,
          is_enabled: bool,
          payment_gate_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig,
          threshold_amount: Float
        }

      class SpendThresholdConfiguration < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor commit: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::Commit

        attr_accessor is_enabled: bool

        attr_accessor payment_gate_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig

        attr_accessor threshold_amount: Float

        def initialize: (
          commit: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::Commit,
          is_enabled: bool,
          payment_gate_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig,
          threshold_amount: Float
        ) -> void

        def to_hash: -> {
          commit: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::Commit,
          is_enabled: bool,
          payment_gate_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig,
          threshold_amount: Float
        }

        type commit = { product_id: String, description: String, name: String }

        class Commit < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor product_id: String

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          def initialize: (
            product_id: String,
            ?description: String,
            ?name: String
          ) -> void

          def to_hash: -> {
            product_id: String,
            description: String,
            name: String
          }
        end

        type payment_gate_config =
          {
            payment_gate_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
            precalculated_tax_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig,
            stripe_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
            tax_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::tax_type
          }

        class PaymentGateConfig < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor payment_gate_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type

          attr_reader precalculated_tax_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig?

          def precalculated_tax_config=: (
            MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig
          ) -> MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig

          attr_reader stripe_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig?

          def stripe_config=: (
            MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig
          ) -> MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig

          attr_reader tax_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::tax_type?

          def tax_type=: (
            MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::tax_type
          ) -> MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::tax_type

          def initialize: (
            payment_gate_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
            ?precalculated_tax_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig,
            ?stripe_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
            ?tax_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::tax_type
          ) -> void

          def to_hash: -> {
            payment_gate_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
            precalculated_tax_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::PrecalculatedTaxConfig,
            stripe_config: MetronomeSDK::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
            tax_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::tax_type
          }

          type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

          module PaymentGateType
            extend MetronomeSDK::Internal::Type::Enum

            NONE: :NONE
            STRIPE: :STRIPE
            EXTERNAL: :EXTERNAL

            def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type]
          end

          type precalculated_tax_config =
            { tax_amount: Float, tax_name: String }

          class PrecalculatedTaxConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor tax_amount: Float

            attr_reader tax_name: String?

            def tax_name=: (String) -> String

            def initialize: (tax_amount: Float, ?tax_name: String) -> void

            def to_hash: -> { tax_amount: Float, tax_name: String }
          end

          type stripe_config =
            {
              payment_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type,
              invoice_metadata: ::Hash[Symbol, String]
            }

          class StripeConfig < MetronomeSDK::Internal::Type::BaseModel
            attr_accessor payment_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

            attr_reader invoice_metadata: ::Hash[Symbol, String]?

            def invoice_metadata=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            def initialize: (
              payment_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type,
              ?invoice_metadata: ::Hash[Symbol, String]
            ) -> void

            def to_hash: -> {
              payment_type: MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type,
              invoice_metadata: ::Hash[Symbol, String]
            }

            type payment_type = :INVOICE | :PAYMENT_INTENT

            module PaymentType
              extend MetronomeSDK::Internal::Type::Enum

              INVOICE: :INVOICE
              PAYMENT_INTENT: :PAYMENT_INTENT

              def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
            end
          end

          type tax_type = :NONE | :STRIPE | :ANROK | :PRECALCULATED

          module TaxType
            extend MetronomeSDK::Internal::Type::Enum

            NONE: :NONE
            STRIPE: :STRIPE
            ANROK: :ANROK
            PRECALCULATED: :PRECALCULATED

            def self?.values: -> ::Array[MetronomeSDK::Models::ContractWithoutAmendments::SpendThresholdConfiguration::PaymentGateConfig::tax_type]
          end
        end
      end

      type usage_filter =
        {
          current: MetronomeSDK::BaseUsageFilter?,
          initial: MetronomeSDK::BaseUsageFilter,
          updates: ::Array[MetronomeSDK::ContractWithoutAmendments::UsageFilter::Update]
        }

      class UsageFilter < MetronomeSDK::Internal::Type::BaseModel
        attr_accessor current: MetronomeSDK::BaseUsageFilter?

        attr_accessor initial: MetronomeSDK::BaseUsageFilter

        attr_accessor updates: ::Array[MetronomeSDK::ContractWithoutAmendments::UsageFilter::Update]

        def initialize: (
          current: MetronomeSDK::BaseUsageFilter?,
          initial: MetronomeSDK::BaseUsageFilter,
          updates: ::Array[MetronomeSDK::ContractWithoutAmendments::UsageFilter::Update]
        ) -> void

        def to_hash: -> {
          current: MetronomeSDK::BaseUsageFilter?,
          initial: MetronomeSDK::BaseUsageFilter,
          updates: ::Array[MetronomeSDK::ContractWithoutAmendments::UsageFilter::Update]
        }

        type update =
          {
            group_key: String,
            group_values: ::Array[String],
            starting_at: Time
          }

        class Update < MetronomeSDK::Internal::Type::BaseModel
          attr_accessor group_key: String

          attr_accessor group_values: ::Array[String]

          attr_accessor starting_at: Time

          def initialize: (
            group_key: String,
            group_values: ::Array[String],
            starting_at: Time
          ) -> void

          def to_hash: -> {
            group_key: String,
            group_values: ::Array[String],
            starting_at: Time
          }
        end
      end
    end
  end
end
