module Metronome
  class Error < StandardError
    attr_reader cause: StandardError?
  end

  class ConversionError < Metronome::Error
  end

  class APIError < Metronome::Error
    attr_reader url: URI::Generic

    attr_reader status: Integer?

    attr_reader body: top?

    def initialize: (
      url: URI::Generic,
      status: Integer?,
      body: Object?,
      request: nil,
      response: nil,
      message: String?
    ) -> void
  end

  class APIConnectionError < Metronome::APIError
    def initialize: (
      url: URI::Generic,
      status: nil,
      body: nil,
      request: nil,
      response: nil,
      message: String?
    ) -> void
  end

  class APITimeoutError < Metronome::APIConnectionError
    def initialize: (
      url: URI::Generic,
      status: nil,
      body: nil,
      request: nil,
      response: nil,
      message: String?
    ) -> void
  end

  class APIStatusError < Metronome::APIError
    def self.for: (
      url: URI::Generic,
      status: Integer,
      body: Object?,
      request: nil,
      response: nil
    ) -> instance

    def initialize: (
      url: URI::Generic,
      status: Integer,
      body: Object?,
      request: nil,
      response: nil,
      message: String?
    ) -> void
  end

  class BadRequestError < Metronome::APIStatusError
    HTTP_STATUS: 400
  end

  class AuthenticationError < Metronome::APIStatusError
    HTTP_STATUS: 401
  end

  class PermissionDeniedError < Metronome::APIStatusError
    HTTP_STATUS: 403
  end

  class NotFoundError < Metronome::APIStatusError
    HTTP_STATUS: 404
  end

  class ConflictError < Metronome::APIStatusError
    HTTP_STATUS: 409
  end

  class UnprocessableEntityError < Metronome::APIStatusError
    HTTP_STATUS: 422
  end

  class RateLimitError < Metronome::APIStatusError
    HTTP_STATUS: 429
  end

  class InternalServerError < Metronome::APIStatusError
    HTTP_STATUS: Range[Integer]
  end
end
