module Metronome
  module Models
    type usage_list_params =
      {
        ending_before: Time,
        starting_on: Time,
        window_size: Metronome::Models::UsageListParams::window_size,
        next_page: String,
        billable_metrics: ::Array[Metronome::Models::UsageListParams::BillableMetric],
        customer_ids: ::Array[String]
      }
      & Metronome::request_parameters

    class UsageListParams < Metronome::BaseModel
      extend Metronome::RequestParameters::Converter
      include Metronome::RequestParameters

      attr_accessor ending_before: Time

      attr_accessor starting_on: Time

      attr_accessor window_size: Metronome::Models::UsageListParams::window_size

      attr_reader next_page: String?

      def next_page=: (String) -> String

      attr_reader billable_metrics: ::Array[Metronome::Models::UsageListParams::BillableMetric]?

      def billable_metrics=: (
        ::Array[Metronome::Models::UsageListParams::BillableMetric]
      ) -> ::Array[Metronome::Models::UsageListParams::BillableMetric]

      attr_reader customer_ids: ::Array[String]?

      def customer_ids=: (::Array[String]) -> ::Array[String]

      def initialize:
        (
          ending_before: Time,
          starting_on: Time,
          window_size: Metronome::Models::UsageListParams::window_size,
          next_page: String,
          billable_metrics: ::Array[Metronome::Models::UsageListParams::BillableMetric],
          customer_ids: ::Array[String],
          request_options: Metronome::request_opts
        ) -> void
        | (
          ?Metronome::Models::usage_list_params | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::usage_list_params

      type window_size = :HOUR | :DAY | :NONE

      class WindowSize < Metronome::Enum
        HOUR: :HOUR
        DAY: :DAY
        NONE: :NONE

        def self.values: -> ::Array[Metronome::Models::UsageListParams::window_size]
      end

      type billable_metric =
        {
          id: String,
          group_by: Metronome::Models::UsageListParams::BillableMetric::GroupBy
        }

      class BillableMetric < Metronome::BaseModel
        attr_accessor id: String

        attr_reader group_by: Metronome::Models::UsageListParams::BillableMetric::GroupBy?

        def group_by=: (
          Metronome::Models::UsageListParams::BillableMetric::GroupBy
        ) -> Metronome::Models::UsageListParams::BillableMetric::GroupBy

        def initialize:
          (
            id: String,
            group_by: Metronome::Models::UsageListParams::BillableMetric::GroupBy
          ) -> void
          | (
            ?Metronome::Models::UsageListParams::billable_metric
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::UsageListParams::billable_metric

        type group_by = { key: String, values: ::Array[String] }

        class GroupBy < Metronome::BaseModel
          attr_accessor key: String

          attr_reader values: ::Array[String]?

          def values=: (::Array[String]) -> ::Array[String]

          def initialize:
            (key: String, values: ::Array[String]) -> void
            | (
              ?Metronome::Models::UsageListParams::BillableMetric::group_by
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::UsageListParams::BillableMetric::group_by
        end
      end
    end
  end
end
