module Metronome
  module Models
    module Customers
      type plan_list_response =
        {
          id: String,
          custom_fields: ::Hash[Symbol, String],
          plan_description: String,
          plan_id: String,
          plan_name: String,
          starting_on: Time,
          ending_before: Time,
          net_payment_terms_days: Float,
          trial_info: Metronome::Models::Customers::PlanListResponse::TrialInfo
        }

      class PlanListResponse < Metronome::BaseModel
        attr_accessor id: String

        attr_accessor custom_fields: ::Hash[Symbol, String]

        attr_accessor plan_description: String

        attr_accessor plan_id: String

        attr_accessor plan_name: String

        attr_accessor starting_on: Time

        attr_reader ending_before: Time?

        def ending_before=: (Time) -> Time

        attr_reader net_payment_terms_days: Float?

        def net_payment_terms_days=: (Float) -> Float

        attr_reader trial_info: Metronome::Models::Customers::PlanListResponse::TrialInfo?

        def trial_info=: (
          Metronome::Models::Customers::PlanListResponse::TrialInfo
        ) -> Metronome::Models::Customers::PlanListResponse::TrialInfo

        def initialize:
          (
            id: String,
            custom_fields: ::Hash[Symbol, String],
            plan_description: String,
            plan_id: String,
            plan_name: String,
            starting_on: Time,
            ending_before: Time,
            net_payment_terms_days: Float,
            trial_info: Metronome::Models::Customers::PlanListResponse::TrialInfo
          ) -> void
          | (
            ?Metronome::Models::Customers::plan_list_response
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::Customers::plan_list_response

        type trial_info =
          {
            ending_before: Time,
            spending_caps: ::Array[Metronome::Models::Customers::PlanListResponse::TrialInfo::SpendingCap]
          }

        class TrialInfo < Metronome::BaseModel
          attr_accessor ending_before: Time

          attr_accessor spending_caps: ::Array[Metronome::Models::Customers::PlanListResponse::TrialInfo::SpendingCap]

          def initialize:
            (
              ending_before: Time,
              spending_caps: ::Array[Metronome::Models::Customers::PlanListResponse::TrialInfo::SpendingCap]
            ) -> void
            | (
              ?Metronome::Models::Customers::PlanListResponse::trial_info
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Customers::PlanListResponse::trial_info

          type spending_cap =
            {
              amount: Float,
              amount_remaining: Float,
              credit_type: Metronome::Models::CreditTypeData
            }

          class SpendingCap < Metronome::BaseModel
            attr_accessor amount: Float

            attr_accessor amount_remaining: Float

            attr_accessor credit_type: Metronome::Models::CreditTypeData

            def initialize:
              (
                amount: Float,
                amount_remaining: Float,
                credit_type: Metronome::Models::CreditTypeData
              ) -> void
              | (
                ?Metronome::Models::Customers::PlanListResponse::TrialInfo::spending_cap
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::Customers::PlanListResponse::TrialInfo::spending_cap
          end
        end
      end
    end
  end
end
