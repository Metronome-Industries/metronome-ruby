module Metronome
  module Models
    
    class CustomerAlert = Customers::CustomerAlert

    module Customers
      type customer_alert =
        {
          alert: Metronome::Models::Customers::CustomerAlert::Alert,
          customer_status: Metronome::Models::Customers::CustomerAlert::customer_status?,
          triggered_by: String?
        }

      class CustomerAlert < Metronome::BaseModel
        attr_accessor alert: Metronome::Models::Customers::CustomerAlert::Alert

        attr_accessor customer_status: Metronome::Models::Customers::CustomerAlert::customer_status?

        attr_accessor triggered_by: String?

        def initialize:
          (
            alert: Metronome::Models::Customers::CustomerAlert::Alert,
            customer_status: Metronome::Models::Customers::CustomerAlert::customer_status?,
            triggered_by: String?
          ) -> void
          | (
            ?Metronome::Models::Customers::customer_alert
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::Customers::customer_alert

        type alert =
          {
            id: String,
            name: String,
            status: Metronome::Models::Customers::CustomerAlert::Alert::status,
            threshold: Float,
            type: Metronome::Models::Customers::CustomerAlert::Alert::type_,
            updated_at: Time,
            credit_grant_type_filters: ::Array[String],
            credit_type: Metronome::Models::CreditTypeData?,
            custom_field_filters: ::Array[Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter],
            group_key_filter: Metronome::Models::Customers::CustomerAlert::Alert::GroupKeyFilter,
            invoice_types_filter: ::Array[String],
            uniqueness_key: String
          }

        class Alert < Metronome::BaseModel
          attr_accessor id: String

          attr_accessor name: String

          attr_accessor status: Metronome::Models::Customers::CustomerAlert::Alert::status

          attr_accessor threshold: Float

          attr_accessor type: Metronome::Models::Customers::CustomerAlert::Alert::type_

          attr_accessor updated_at: Time

          attr_reader credit_grant_type_filters: ::Array[String]?

          def credit_grant_type_filters=: (::Array[String]) -> ::Array[String]

          attr_accessor credit_type: Metronome::Models::CreditTypeData?

          attr_reader custom_field_filters: ::Array[Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter]?

          def custom_field_filters=: (
            ::Array[Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter]
          ) -> ::Array[Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter]

          attr_reader group_key_filter: Metronome::Models::Customers::CustomerAlert::Alert::GroupKeyFilter?

          def group_key_filter=: (
            Metronome::Models::Customers::CustomerAlert::Alert::GroupKeyFilter
          ) -> Metronome::Models::Customers::CustomerAlert::Alert::GroupKeyFilter

          attr_reader invoice_types_filter: ::Array[String]?

          def invoice_types_filter=: (::Array[String]) -> ::Array[String]

          attr_reader uniqueness_key: String?

          def uniqueness_key=: (String) -> String

          def initialize:
            (
              id: String,
              name: String,
              status: Metronome::Models::Customers::CustomerAlert::Alert::status,
              threshold: Float,
              type: Metronome::Models::Customers::CustomerAlert::Alert::type_,
              updated_at: Time,
              credit_grant_type_filters: ::Array[String],
              credit_type: Metronome::Models::CreditTypeData?,
              custom_field_filters: ::Array[Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter],
              group_key_filter: Metronome::Models::Customers::CustomerAlert::Alert::GroupKeyFilter,
              invoice_types_filter: ::Array[String],
              uniqueness_key: String
            ) -> void
            | (
              ?Metronome::Models::Customers::CustomerAlert::alert
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Customers::CustomerAlert::alert

          type status = :enabled | :archived | :disabled

          class Status < Metronome::Enum
            ENABLED: :enabled
            ARCHIVED: :archived
            DISABLED: :disabled

            def self.values: -> ::Array[Metronome::Models::Customers::CustomerAlert::Alert::status]
          end

          type type_ =
            :low_credit_balance_reached
            | :spend_threshold_reached
            | :monthly_invoice_total_spend_threshold_reached
            | :low_remaining_days_in_plan_reached
            | :low_remaining_credit_percentage_reached
            | :usage_threshold_reached
            | :low_remaining_days_for_commit_segment_reached
            | :low_remaining_commit_balance_reached
            | :low_remaining_commit_percentage_reached
            | :low_remaining_days_for_contract_credit_segment_reached
            | :low_remaining_contract_credit_balance_reached
            | :low_remaining_contract_credit_percentage_reached
            | :low_remaining_contract_credit_and_commit_balance_reached
            | :invoice_total_reached

          class Type < Metronome::Enum
            LOW_CREDIT_BALANCE_REACHED: :low_credit_balance_reached
            SPEND_THRESHOLD_REACHED: :spend_threshold_reached
            MONTHLY_INVOICE_TOTAL_SPEND_THRESHOLD_REACHED: :monthly_invoice_total_spend_threshold_reached
            LOW_REMAINING_DAYS_IN_PLAN_REACHED: :low_remaining_days_in_plan_reached
            LOW_REMAINING_CREDIT_PERCENTAGE_REACHED: :low_remaining_credit_percentage_reached
            USAGE_THRESHOLD_REACHED: :usage_threshold_reached
            LOW_REMAINING_DAYS_FOR_COMMIT_SEGMENT_REACHED: :low_remaining_days_for_commit_segment_reached
            LOW_REMAINING_COMMIT_BALANCE_REACHED: :low_remaining_commit_balance_reached
            LOW_REMAINING_COMMIT_PERCENTAGE_REACHED: :low_remaining_commit_percentage_reached
            LOW_REMAINING_DAYS_FOR_CONTRACT_CREDIT_SEGMENT_REACHED: :low_remaining_days_for_contract_credit_segment_reached
            LOW_REMAINING_CONTRACT_CREDIT_BALANCE_REACHED: :low_remaining_contract_credit_balance_reached
            LOW_REMAINING_CONTRACT_CREDIT_PERCENTAGE_REACHED: :low_remaining_contract_credit_percentage_reached
            LOW_REMAINING_CONTRACT_CREDIT_AND_COMMIT_BALANCE_REACHED: :low_remaining_contract_credit_and_commit_balance_reached
            INVOICE_TOTAL_REACHED: :invoice_total_reached

            def self.values: -> ::Array[Metronome::Models::Customers::CustomerAlert::Alert::type_]
          end

          type custom_field_filter =
            {
              entity: Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter::entity,
              key: String,
              value: String
            }

          class CustomFieldFilter < Metronome::BaseModel
            attr_accessor entity: Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter::entity

            attr_accessor key: String

            attr_accessor value: String

            def initialize:
              (
                entity: Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter::entity,
                key: String,
                value: String
              ) -> void
              | (
                ?Metronome::Models::Customers::CustomerAlert::Alert::custom_field_filter
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::Customers::CustomerAlert::Alert::custom_field_filter

            type entity = :Contract | :Commit | :ContractCredit

            class Entity < Metronome::Enum
              CONTRACT: :Contract
              COMMIT: :Commit
              CONTRACT_CREDIT: :ContractCredit

              def self.values: -> ::Array[Metronome::Models::Customers::CustomerAlert::Alert::CustomFieldFilter::entity]
            end
          end

          type group_key_filter = { key: String, value: String }

          class GroupKeyFilter < Metronome::BaseModel
            attr_accessor key: String

            attr_accessor value: String

            def initialize:
              (key: String, value: String) -> void
              | (
                ?Metronome::Models::Customers::CustomerAlert::Alert::group_key_filter
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::Customers::CustomerAlert::Alert::group_key_filter
          end
        end

        type customer_status = :ok | :in_alarm | :evaluating

        class CustomerStatus < Metronome::Enum
          OK: :ok
          IN_ALARM: :in_alarm
          EVALUATING: :evaluating

          def self.values: -> ::Array[Metronome::Models::Customers::CustomerAlert::customer_status]
        end
      end
    end
  end
end
