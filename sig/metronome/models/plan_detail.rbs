module Metronome
  module Models
    type plan_detail =
      {
        id: String,
        custom_fields: Hash[Symbol, String],
        name: String,
        credit_grants: Array[Metronome::Models::PlanDetail::CreditGrant],
        description: String,
        minimums: Array[Metronome::Models::PlanDetail::Minimum],
        overage_rates: Array[Metronome::Models::PlanDetail::OverageRate]
      }

    class PlanDetail < Metronome::BaseModel
      attr_accessor id: String

      attr_accessor custom_fields: Hash[Symbol, String]

      attr_accessor name: String

      attr_reader credit_grants: Array[Metronome::Models::PlanDetail::CreditGrant]?

      def credit_grants=: (
        Array[Metronome::Models::PlanDetail::CreditGrant]
      ) -> void

      attr_reader description: String?

      def description=: (String) -> void

      attr_reader minimums: Array[Metronome::Models::PlanDetail::Minimum]?

      def minimums=: (Array[Metronome::Models::PlanDetail::Minimum]) -> void

      attr_reader overage_rates: Array[Metronome::Models::PlanDetail::OverageRate]?

      def overage_rates=: (
        Array[Metronome::Models::PlanDetail::OverageRate]
      ) -> void

      def initialize:
        (
          id: String,
          custom_fields: Hash[Symbol, String],
          name: String,
          credit_grants: Array[Metronome::Models::PlanDetail::CreditGrant],
          description: String,
          minimums: Array[Metronome::Models::PlanDetail::Minimum],
          overage_rates: Array[Metronome::Models::PlanDetail::OverageRate]
        ) -> void
        | (?Metronome::Models::plan_detail | Metronome::BaseModel data) -> void

      def to_h: -> Metronome::Models::plan_detail

      type credit_grant =
        {
          amount_granted: Float,
          amount_granted_credit_type: Metronome::Models::CreditTypeData,
          amount_paid: Float,
          amount_paid_credit_type: Metronome::Models::CreditTypeData,
          effective_duration: Float,
          name: String,
          priority: String,
          send_invoice: bool,
          reason: String,
          recurrence_duration: Float,
          recurrence_interval: Float
        }

      class CreditGrant < Metronome::BaseModel
        attr_accessor amount_granted: Float

        attr_accessor amount_granted_credit_type: Metronome::Models::CreditTypeData

        attr_accessor amount_paid: Float

        attr_accessor amount_paid_credit_type: Metronome::Models::CreditTypeData

        attr_accessor effective_duration: Float

        attr_accessor name: String

        attr_accessor priority: String

        attr_accessor send_invoice: bool

        attr_reader reason: String?

        def reason=: (String) -> void

        attr_reader recurrence_duration: Float?

        def recurrence_duration=: (Float) -> void

        attr_reader recurrence_interval: Float?

        def recurrence_interval=: (Float) -> void

        def initialize:
          (
            amount_granted: Float,
            amount_granted_credit_type: Metronome::Models::CreditTypeData,
            amount_paid: Float,
            amount_paid_credit_type: Metronome::Models::CreditTypeData,
            effective_duration: Float,
            name: String,
            priority: String,
            send_invoice: bool,
            reason: String,
            recurrence_duration: Float,
            recurrence_interval: Float
          ) -> void
          | (
            ?Metronome::Models::PlanDetail::credit_grant
            | Metronome::BaseModel data
          ) -> void

        def to_h: -> Metronome::Models::PlanDetail::credit_grant
      end

      type minimum =
        {
          credit_type: Metronome::Models::CreditTypeData,
          name: String,
          start_period: Float,
          value: Float
        }

      class Minimum < Metronome::BaseModel
        attr_accessor credit_type: Metronome::Models::CreditTypeData

        attr_accessor name: String

        attr_accessor start_period: Float

        attr_accessor value: Float

        def initialize:
          (
            credit_type: Metronome::Models::CreditTypeData,
            name: String,
            start_period: Float,
            value: Float
          ) -> void
          | (
            ?Metronome::Models::PlanDetail::minimum | Metronome::BaseModel data
          ) -> void

        def to_h: -> Metronome::Models::PlanDetail::minimum
      end

      type overage_rate =
        {
          credit_type: Metronome::Models::CreditTypeData,
          fiat_credit_type: Metronome::Models::CreditTypeData,
          start_period: Float,
          to_fiat_conversion_factor: Float
        }

      class OverageRate < Metronome::BaseModel
        attr_accessor credit_type: Metronome::Models::CreditTypeData

        attr_accessor fiat_credit_type: Metronome::Models::CreditTypeData

        attr_accessor start_period: Float

        attr_accessor to_fiat_conversion_factor: Float

        def initialize:
          (
            credit_type: Metronome::Models::CreditTypeData,
            fiat_credit_type: Metronome::Models::CreditTypeData,
            start_period: Float,
            to_fiat_conversion_factor: Float
          ) -> void
          | (
            ?Metronome::Models::PlanDetail::overage_rate
            | Metronome::BaseModel data
          ) -> void

        def to_h: -> Metronome::Models::PlanDetail::overage_rate
      end
    end
  end
end
