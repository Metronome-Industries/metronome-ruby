module Metronome
  module Models
    type billable_metric_retrieve_response =
      { data: Metronome::Models::BillableMetricRetrieveResponse::Data }

    class BillableMetricRetrieveResponse < Metronome::BaseModel
      attr_accessor data: Metronome::Models::BillableMetricRetrieveResponse::Data

      def initialize:
        (data: Metronome::Models::BillableMetricRetrieveResponse::Data) -> void
        | (
          ?Metronome::Models::billable_metric_retrieve_response
          | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::billable_metric_retrieve_response

      type data =
        {
          id: String,
          name: String,
          aggregation_key: String,
          aggregation_type: Metronome::Models::BillableMetricRetrieveResponse::Data::aggregation_type,
          archived_at: Time,
          custom_fields: Hash[Symbol, String],
          event_type_filter: Metronome::Models::EventTypeFilter,
          group_keys: Array[Array[String]],
          property_filters: Array[Metronome::Models::PropertyFilter],
          sql: String
        }

      class Data < Metronome::BaseModel
        attr_accessor id: String

        attr_accessor name: String

        attr_reader aggregation_key: String?

        def aggregation_key=: (String) -> void

        attr_reader aggregation_type: Metronome::Models::BillableMetricRetrieveResponse::Data::aggregation_type?

        def aggregation_type=: (
          Metronome::Models::BillableMetricRetrieveResponse::Data::aggregation_type
        ) -> void

        attr_reader archived_at: Time?

        def archived_at=: (Time) -> void

        attr_reader custom_fields: Hash[Symbol, String]?

        def custom_fields=: (Hash[Symbol, String]) -> void

        attr_reader event_type_filter: Metronome::Models::EventTypeFilter?

        def event_type_filter=: (Metronome::Models::EventTypeFilter) -> void

        attr_reader group_keys: Array[Array[String]]?

        def group_keys=: (Array[Array[String]]) -> void

        attr_reader property_filters: Array[Metronome::Models::PropertyFilter]?

        def property_filters=: (
          Array[Metronome::Models::PropertyFilter]
        ) -> void

        attr_reader sql: String?

        def sql=: (String) -> void

        def initialize:
          (
            id: String,
            name: String,
            aggregation_key: String,
            aggregation_type: Metronome::Models::BillableMetricRetrieveResponse::Data::aggregation_type,
            archived_at: Time,
            custom_fields: Hash[Symbol, String],
            event_type_filter: Metronome::Models::EventTypeFilter,
            group_keys: Array[Array[String]],
            property_filters: Array[Metronome::Models::PropertyFilter],
            sql: String
          ) -> void
          | (
            ?Metronome::Models::BillableMetricRetrieveResponse::data
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::BillableMetricRetrieveResponse::data

        type aggregation_type = :COUNT | :LATEST | :MAX | :SUM | :UNIQUE

        class AggregationType < Metronome::Enum
          COUNT: :COUNT
          LATEST: :LATEST
          MAX: :MAX
          SUM: :SUM
          UNIQUE: :UNIQUE

          def self.values: -> Array[Metronome::Models::BillableMetricRetrieveResponse::Data::aggregation_type]
        end
      end
    end
  end
end
