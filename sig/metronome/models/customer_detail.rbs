module Metronome
  module Models
    type customer_detail =
      {
        id: String,
        custom_fields: Hash[Symbol, String],
        customer_config: Metronome::Models::CustomerDetail::CustomerConfig,
        external_id: String,
        ingest_aliases: Array[String],
        name: String,
        current_billable_status: Metronome::Models::CustomerDetail::CurrentBillableStatus
      }

    class CustomerDetail < Metronome::BaseModel
      attr_accessor id: String

      attr_accessor custom_fields: Hash[Symbol, String]

      attr_accessor customer_config: Metronome::Models::CustomerDetail::CustomerConfig

      attr_accessor external_id: String

      attr_accessor ingest_aliases: Array[String]

      attr_accessor name: String

      attr_reader current_billable_status: Metronome::Models::CustomerDetail::CurrentBillableStatus?

      def current_billable_status=: (
        Metronome::Models::CustomerDetail::CurrentBillableStatus
      ) -> void

      def initialize:
        (
          id: String,
          custom_fields: Hash[Symbol, String],
          customer_config: Metronome::Models::CustomerDetail::CustomerConfig,
          external_id: String,
          ingest_aliases: Array[String],
          name: String,
          current_billable_status: Metronome::Models::CustomerDetail::CurrentBillableStatus
        ) -> void
        | (
          ?Metronome::Models::customer_detail | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::customer_detail

      type customer_config = { salesforce_account_id: String? }

      class CustomerConfig < Metronome::BaseModel
        attr_accessor salesforce_account_id: String?

        def initialize:
          (salesforce_account_id: String?) -> void
          | (
            ?Metronome::Models::CustomerDetail::customer_config
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::CustomerDetail::customer_config
      end

      type current_billable_status =
        {
          value: Metronome::Models::CustomerDetail::CurrentBillableStatus::value,
          effective_at: Time?
        }

      class CurrentBillableStatus < Metronome::BaseModel
        attr_accessor value: Metronome::Models::CustomerDetail::CurrentBillableStatus::value

        attr_accessor effective_at: Time?

        def initialize:
          (
            value: Metronome::Models::CustomerDetail::CurrentBillableStatus::value,
            effective_at: Time?
          ) -> void
          | (
            ?Metronome::Models::CustomerDetail::current_billable_status
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::CustomerDetail::current_billable_status

        type value = :billable | :unbillable

        class Value < Metronome::Enum
          BILLABLE: :billable
          UNBILLABLE: :unbillable

          def self.values: -> Array[Metronome::Models::CustomerDetail::CurrentBillableStatus::value]
        end
      end
    end
  end
end
