module Metronome
  module Models
    module Contracts
      type product_retrieve_response =
        { data: Metronome::Models::Contracts::ProductRetrieveResponse::Data }

      class ProductRetrieveResponse < Metronome::BaseModel
        attr_accessor data: Metronome::Models::Contracts::ProductRetrieveResponse::Data

        def initialize:
          (
            data: Metronome::Models::Contracts::ProductRetrieveResponse::Data
          ) -> void
          | (
            ?Metronome::Models::Contracts::product_retrieve_response
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::Contracts::product_retrieve_response

        type data =
          {
            id: String,
            current: Metronome::Models::Contracts::ProductListItemState,
            initial: Metronome::Models::Contracts::ProductListItemState,
            type: Metronome::Models::Contracts::ProductRetrieveResponse::Data::type_,
            updates: ::Array[Metronome::Models::Contracts::ProductRetrieveResponse::Data::Update],
            archived_at: Time?,
            custom_fields: ::Hash[Symbol, String]
          }

        class Data < Metronome::BaseModel
          attr_accessor id: String

          attr_accessor current: Metronome::Models::Contracts::ProductListItemState

          attr_accessor initial: Metronome::Models::Contracts::ProductListItemState

          attr_accessor type: Metronome::Models::Contracts::ProductRetrieveResponse::Data::type_

          attr_accessor updates: ::Array[Metronome::Models::Contracts::ProductRetrieveResponse::Data::Update]

          attr_accessor archived_at: Time?

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          def initialize:
            (
              id: String,
              current: Metronome::Models::Contracts::ProductListItemState,
              initial: Metronome::Models::Contracts::ProductListItemState,
              type: Metronome::Models::Contracts::ProductRetrieveResponse::Data::type_,
              updates: ::Array[Metronome::Models::Contracts::ProductRetrieveResponse::Data::Update],
              archived_at: Time?,
              custom_fields: ::Hash[Symbol, String]
            ) -> void
            | (
              ?Metronome::Models::Contracts::ProductRetrieveResponse::data
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Contracts::ProductRetrieveResponse::data

          type type_ =
            :USAGE | :SUBSCRIPTION | :COMPOSITE | :FIXED | :PRO_SERVICE

          class Type < Metronome::Enum
            USAGE: :USAGE
            SUBSCRIPTION: :SUBSCRIPTION
            COMPOSITE: :COMPOSITE
            FIXED: :FIXED
            PRO_SERVICE: :PRO_SERVICE

            def self.values: -> ::Array[Metronome::Models::Contracts::ProductRetrieveResponse::Data::type_]
          end

          type update =
            {
              created_at: Time,
              created_by: String,
              billable_metric_id: String,
              composite_product_ids: ::Array[String],
              composite_tags: ::Array[String],
              exclude_free_usage: bool,
              is_refundable: bool,
              name: String,
              netsuite_internal_item_id: String,
              netsuite_overage_item_id: String,
              presentation_group_key: ::Array[String],
              pricing_group_key: ::Array[String],
              quantity_conversion: Metronome::Models::Contracts::QuantityConversion?,
              quantity_rounding: Metronome::Models::Contracts::QuantityRounding?,
              starting_at: Time,
              tags: ::Array[String]
            }

          class Update < Metronome::BaseModel
            attr_accessor created_at: Time

            attr_accessor created_by: String

            attr_reader billable_metric_id: String?

            def billable_metric_id=: (String) -> String

            attr_reader composite_product_ids: ::Array[String]?

            def composite_product_ids=: (::Array[String]) -> ::Array[String]

            attr_reader composite_tags: ::Array[String]?

            def composite_tags=: (::Array[String]) -> ::Array[String]

            attr_reader exclude_free_usage: bool?

            def exclude_free_usage=: (bool) -> bool

            attr_reader is_refundable: bool?

            def is_refundable=: (bool) -> bool

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader netsuite_internal_item_id: String?

            def netsuite_internal_item_id=: (String) -> String

            attr_reader netsuite_overage_item_id: String?

            def netsuite_overage_item_id=: (String) -> String

            attr_reader presentation_group_key: ::Array[String]?

            def presentation_group_key=: (::Array[String]) -> ::Array[String]

            attr_reader pricing_group_key: ::Array[String]?

            def pricing_group_key=: (::Array[String]) -> ::Array[String]

            attr_accessor quantity_conversion: Metronome::Models::Contracts::QuantityConversion?

            attr_accessor quantity_rounding: Metronome::Models::Contracts::QuantityRounding?

            attr_reader starting_at: Time?

            def starting_at=: (Time) -> Time

            attr_reader tags: ::Array[String]?

            def tags=: (::Array[String]) -> ::Array[String]

            def initialize:
              (
                created_at: Time,
                created_by: String,
                billable_metric_id: String,
                composite_product_ids: ::Array[String],
                composite_tags: ::Array[String],
                exclude_free_usage: bool,
                is_refundable: bool,
                name: String,
                netsuite_internal_item_id: String,
                netsuite_overage_item_id: String,
                presentation_group_key: ::Array[String],
                pricing_group_key: ::Array[String],
                quantity_conversion: Metronome::Models::Contracts::QuantityConversion?,
                quantity_rounding: Metronome::Models::Contracts::QuantityRounding?,
                starting_at: Time,
                tags: ::Array[String]
              ) -> void
              | (
                ?Metronome::Models::Contracts::ProductRetrieveResponse::Data::update
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::Contracts::ProductRetrieveResponse::Data::update
          end
        end
      end
    end
  end
end
