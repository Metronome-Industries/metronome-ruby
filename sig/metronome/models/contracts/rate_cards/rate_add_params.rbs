module Metronome
  module Models
    module Contracts
      module RateCards
        type rate_add_params =
          {
            entitled: bool,
            product_id: String,
            rate_card_id: String,
            rate_type: Metronome::Models::Contracts::RateCards::RateAddParams::rate_type,
            starting_at: Time,
            commit_rate: Metronome::Models::Contracts::RateCards::RateAddParams::CommitRate,
            credit_type_id: String,
            custom_rate: Hash[Symbol, top],
            ending_before: Time,
            is_prorated: bool,
            price: Float,
            pricing_group_values: Hash[Symbol, String],
            quantity: Float,
            tiers: Array[Metronome::Models::Tier],
            use_list_prices: bool
          }
          & Metronome::request_parameters

        class RateAddParams < Metronome::BaseModel
          extend Metronome::RequestParameters::Converter
          include Metronome::RequestParameters

          attr_accessor entitled: bool

          attr_accessor product_id: String

          attr_accessor rate_card_id: String

          attr_accessor rate_type: Metronome::Models::Contracts::RateCards::RateAddParams::rate_type

          attr_accessor starting_at: Time

          attr_reader commit_rate: Metronome::Models::Contracts::RateCards::RateAddParams::CommitRate?

          def commit_rate=: (
            Metronome::Models::Contracts::RateCards::RateAddParams::CommitRate
          ) -> void

          attr_reader credit_type_id: String?

          def credit_type_id=: (String) -> void

          attr_reader custom_rate: Hash[Symbol, top]?

          def custom_rate=: (Hash[Symbol, top]) -> void

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> void

          attr_reader is_prorated: bool?

          def is_prorated=: (bool) -> void

          attr_reader price: Float?

          def price=: (Float) -> void

          attr_reader pricing_group_values: Hash[Symbol, String]?

          def pricing_group_values=: (Hash[Symbol, String]) -> void

          attr_reader quantity: Float?

          def quantity=: (Float) -> void

          attr_reader tiers: Array[Metronome::Models::Tier]?

          def tiers=: (Array[Metronome::Models::Tier]) -> void

          attr_reader use_list_prices: bool?

          def use_list_prices=: (bool) -> void

          def initialize:
            (
              entitled: bool,
              product_id: String,
              rate_card_id: String,
              rate_type: Metronome::Models::Contracts::RateCards::RateAddParams::rate_type,
              starting_at: Time,
              commit_rate: Metronome::Models::Contracts::RateCards::RateAddParams::CommitRate,
              credit_type_id: String,
              custom_rate: Hash[Symbol, top],
              ending_before: Time,
              is_prorated: bool,
              price: Float,
              pricing_group_values: Hash[Symbol, String],
              quantity: Float,
              tiers: Array[Metronome::Models::Tier],
              use_list_prices: bool,
              request_options: Metronome::request_opts
            ) -> void
            | (
              ?Metronome::Models::Contracts::RateCards::rate_add_params
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Contracts::RateCards::rate_add_params

          type rate_type =
            :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

          class RateType < Metronome::Enum
            FLAT: :FLAT
            PERCENTAGE: :PERCENTAGE
            SUBSCRIPTION: :SUBSCRIPTION
            TIERED: :TIERED
            CUSTOM: :CUSTOM

            def self.values: -> Array[Metronome::Models::Contracts::RateCards::RateAddParams::rate_type]
          end

          type commit_rate =
            {
              rate_type: Metronome::Models::Contracts::RateCards::RateAddParams::CommitRate::rate_type,
              price: Float,
              tiers: Array[Metronome::Models::Tier]
            }

          class CommitRate < Metronome::BaseModel
            attr_accessor rate_type: Metronome::Models::Contracts::RateCards::RateAddParams::CommitRate::rate_type

            attr_reader price: Float?

            def price=: (Float) -> void

            attr_reader tiers: Array[Metronome::Models::Tier]?

            def tiers=: (Array[Metronome::Models::Tier]) -> void

            def initialize:
              (
                rate_type: Metronome::Models::Contracts::RateCards::RateAddParams::CommitRate::rate_type,
                price: Float,
                tiers: Array[Metronome::Models::Tier]
              ) -> void
              | (
                ?Metronome::Models::Contracts::RateCards::RateAddParams::commit_rate
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::Contracts::RateCards::RateAddParams::commit_rate

            type rate_type =
              :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

            class RateType < Metronome::Enum
              FLAT: :FLAT
              PERCENTAGE: :PERCENTAGE
              SUBSCRIPTION: :SUBSCRIPTION
              TIERED: :TIERED
              CUSTOM: :CUSTOM

              def self.values: -> Array[Metronome::Models::Contracts::RateCards::RateAddParams::CommitRate::rate_type]
            end
          end
        end
      end
    end
  end
end
