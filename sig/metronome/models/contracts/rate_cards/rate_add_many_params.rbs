module Metronome
  module Models
    module Contracts
      module RateCards
        type rate_add_many_params =
          {
            rate_card_id: String,
            rates: Array[Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate]
          }
          & Metronome::request_parameters

        class RateAddManyParams < Metronome::BaseModel
          extend Metronome::RequestParameters::Converter
          include Metronome::RequestParameters

          attr_accessor rate_card_id: String

          attr_accessor rates: Array[Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate]

          def initialize:
            (
              rate_card_id: String,
              rates: Array[Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate],
              request_options: Metronome::request_opts
            ) -> void
            | (
              ?Metronome::Models::Contracts::RateCards::rate_add_many_params
              | Metronome::BaseModel data
            ) -> void

          def to_h: -> Metronome::Models::Contracts::RateCards::rate_add_many_params

          type rate =
            {
              entitled: bool,
              product_id: String,
              rate_type: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::rate_type,
              starting_at: Time,
              commit_rate: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::CommitRate,
              credit_type_id: String,
              custom_rate: Hash[Symbol, top],
              ending_before: Time,
              is_prorated: bool,
              price: Float,
              pricing_group_values: Hash[Symbol, String],
              quantity: Float,
              tiers: Array[Metronome::Models::Tier],
              use_list_prices: bool
            }

          class Rate < Metronome::BaseModel
            attr_accessor entitled: bool

            attr_accessor product_id: String

            attr_accessor rate_type: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::rate_type

            attr_accessor starting_at: Time

            attr_reader commit_rate: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::CommitRate?

            def commit_rate=: (
              Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::CommitRate
            ) -> void

            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> void

            attr_reader custom_rate: Hash[Symbol, top]?

            def custom_rate=: (Hash[Symbol, top]) -> void

            attr_reader ending_before: Time?

            def ending_before=: (Time) -> void

            attr_reader is_prorated: bool?

            def is_prorated=: (bool) -> void

            attr_reader price: Float?

            def price=: (Float) -> void

            attr_reader pricing_group_values: Hash[Symbol, String]?

            def pricing_group_values=: (Hash[Symbol, String]) -> void

            attr_reader quantity: Float?

            def quantity=: (Float) -> void

            attr_reader tiers: Array[Metronome::Models::Tier]?

            def tiers=: (Array[Metronome::Models::Tier]) -> void

            attr_reader use_list_prices: bool?

            def use_list_prices=: (bool) -> void

            def initialize:
              (
                entitled: bool,
                product_id: String,
                rate_type: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::rate_type,
                starting_at: Time,
                commit_rate: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::CommitRate,
                credit_type_id: String,
                custom_rate: Hash[Symbol, top],
                ending_before: Time,
                is_prorated: bool,
                price: Float,
                pricing_group_values: Hash[Symbol, String],
                quantity: Float,
                tiers: Array[Metronome::Models::Tier],
                use_list_prices: bool
              ) -> void
              | (
                ?Metronome::Models::Contracts::RateCards::RateAddManyParams::rate
                | Metronome::BaseModel data
              ) -> void

            def to_h: -> Metronome::Models::Contracts::RateCards::RateAddManyParams::rate

            type rate_type =
              :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

            class RateType < Metronome::Enum
              FLAT: :FLAT
              PERCENTAGE: :PERCENTAGE
              SUBSCRIPTION: :SUBSCRIPTION
              TIERED: :TIERED
              CUSTOM: :CUSTOM

              def self.values: -> Array[Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::rate_type]
            end

            type commit_rate =
              {
                rate_type: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::CommitRate::rate_type,
                price: Float,
                tiers: Array[Metronome::Models::Tier]
              }

            class CommitRate < Metronome::BaseModel
              attr_accessor rate_type: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::CommitRate::rate_type

              attr_reader price: Float?

              def price=: (Float) -> void

              attr_reader tiers: Array[Metronome::Models::Tier]?

              def tiers=: (Array[Metronome::Models::Tier]) -> void

              def initialize:
                (
                  rate_type: Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::CommitRate::rate_type,
                  price: Float,
                  tiers: Array[Metronome::Models::Tier]
                ) -> void
                | (
                  ?Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::commit_rate
                  | Metronome::BaseModel data
                ) -> void

              def to_h: -> Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::commit_rate

              type rate_type =
                :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

              class RateType < Metronome::Enum
                FLAT: :FLAT
                PERCENTAGE: :PERCENTAGE
                SUBSCRIPTION: :SUBSCRIPTION
                TIERED: :TIERED
                CUSTOM: :CUSTOM

                def self.values: -> Array[Metronome::Models::Contracts::RateCards::RateAddManyParams::Rate::CommitRate::rate_type]
              end
            end
          end
        end
      end
    end
  end
end
