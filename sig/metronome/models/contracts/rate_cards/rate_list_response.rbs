module Metronome
  module Models
    module Contracts
      module RateCards
        type rate_list_response =
          {
            entitled: bool,
            product_custom_fields: ::Hash[Symbol, String],
            product_id: String,
            product_name: String,
            product_tags: ::Array[String],
            rate: Metronome::Models::Rate,
            starting_at: Time,
            commit_rate: Metronome::Models::Contracts::RateCards::RateListResponse::CommitRate,
            ending_before: Time,
            pricing_group_values: ::Hash[Symbol, String]
          }

        class RateListResponse < Metronome::BaseModel
          attr_accessor entitled: bool

          attr_accessor product_custom_fields: ::Hash[Symbol, String]

          attr_accessor product_id: String

          attr_accessor product_name: String

          attr_accessor product_tags: ::Array[String]

          attr_accessor rate: Metronome::Models::Rate

          attr_accessor starting_at: Time

          attr_reader commit_rate: Metronome::Models::Contracts::RateCards::RateListResponse::CommitRate?

          def commit_rate=: (
            Metronome::Models::Contracts::RateCards::RateListResponse::CommitRate
          ) -> void

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> void

          attr_reader pricing_group_values: ::Hash[Symbol, String]?

          def pricing_group_values=: (::Hash[Symbol, String]) -> void

          def initialize:
            (
              entitled: bool,
              product_custom_fields: ::Hash[Symbol, String],
              product_id: String,
              product_name: String,
              product_tags: ::Array[String],
              rate: Metronome::Models::Rate,
              starting_at: Time,
              commit_rate: Metronome::Models::Contracts::RateCards::RateListResponse::CommitRate,
              ending_before: Time,
              pricing_group_values: ::Hash[Symbol, String]
            ) -> void
            | (
              ?Metronome::Models::Contracts::RateCards::rate_list_response
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Contracts::RateCards::rate_list_response

          type commit_rate =
            {
              rate_type: Metronome::Models::Contracts::RateCards::RateListResponse::CommitRate::rate_type,
              price: Float,
              tiers: ::Array[Metronome::Models::Tier]
            }

          class CommitRate < Metronome::BaseModel
            attr_accessor rate_type: Metronome::Models::Contracts::RateCards::RateListResponse::CommitRate::rate_type

            attr_reader price: Float?

            def price=: (Float) -> void

            attr_reader tiers: ::Array[Metronome::Models::Tier]?

            def tiers=: (::Array[Metronome::Models::Tier]) -> void

            def initialize:
              (
                rate_type: Metronome::Models::Contracts::RateCards::RateListResponse::CommitRate::rate_type,
                price: Float,
                tiers: ::Array[Metronome::Models::Tier]
              ) -> void
              | (
                ?Metronome::Models::Contracts::RateCards::RateListResponse::commit_rate
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::Contracts::RateCards::RateListResponse::commit_rate

            type rate_type =
              :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

            class RateType < Metronome::Enum
              FLAT: :FLAT
              PERCENTAGE: :PERCENTAGE
              SUBSCRIPTION: :SUBSCRIPTION
              TIERED: :TIERED
              CUSTOM: :CUSTOM

              def self.values: -> ::Array[Metronome::Models::Contracts::RateCards::RateListResponse::CommitRate::rate_type]
            end
          end
        end
      end
    end
  end
end
