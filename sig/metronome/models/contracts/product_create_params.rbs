module Metronome
  module Models
    module Contracts
      type product_create_params =
        {
          name: String,
          type: Metronome::Models::Contracts::ProductCreateParams::type_,
          billable_metric_id: String,
          composite_product_ids: Array[String],
          composite_tags: Array[String],
          exclude_free_usage: bool,
          is_refundable: bool,
          netsuite_internal_item_id: String,
          netsuite_overage_item_id: String,
          presentation_group_key: Array[String],
          pricing_group_key: Array[String],
          quantity_conversion: Metronome::Models::Contracts::QuantityConversion?,
          quantity_rounding: Metronome::Models::Contracts::QuantityRounding?,
          tags: Array[String]
        }
        & Metronome::request_parameters

      class ProductCreateParams < Metronome::BaseModel
        extend Metronome::RequestParameters::Converter
        include Metronome::RequestParameters

        attr_accessor name: String

        attr_accessor type: Metronome::Models::Contracts::ProductCreateParams::type_

        attr_reader billable_metric_id: String?

        def billable_metric_id=: (String) -> void

        attr_reader composite_product_ids: Array[String]

        def composite_product_ids=: (Array[String]) -> void

        attr_reader composite_tags: Array[String]

        def composite_tags=: (Array[String]) -> void

        attr_reader exclude_free_usage: bool?

        def exclude_free_usage=: (bool) -> void

        attr_reader is_refundable: bool?

        def is_refundable=: (bool) -> void

        attr_reader netsuite_internal_item_id: String?

        def netsuite_internal_item_id=: (String) -> void

        attr_reader netsuite_overage_item_id: String?

        def netsuite_overage_item_id=: (String) -> void

        attr_reader presentation_group_key: Array[String]

        def presentation_group_key=: (Array[String]) -> void

        attr_reader pricing_group_key: Array[String]

        def pricing_group_key=: (Array[String]) -> void

        attr_accessor quantity_conversion: Metronome::Models::Contracts::QuantityConversion?

        attr_accessor quantity_rounding: Metronome::Models::Contracts::QuantityRounding?

        attr_reader tags: Array[String]

        def tags=: (Array[String]) -> void

        def initialize:
          (
            name: String,
            type: Metronome::Models::Contracts::ProductCreateParams::type_,
            billable_metric_id: String,
            composite_product_ids: Array[String],
            composite_tags: Array[String],
            exclude_free_usage: bool,
            is_refundable: bool,
            netsuite_internal_item_id: String,
            netsuite_overage_item_id: String,
            presentation_group_key: Array[String],
            pricing_group_key: Array[String],
            quantity_conversion: Metronome::Models::Contracts::QuantityConversion?,
            quantity_rounding: Metronome::Models::Contracts::QuantityRounding?,
            tags: Array[String],
            request_options: Metronome::request_opts
          ) -> void
          | (
            ?Metronome::Models::Contracts::product_create_params
            | Metronome::BaseModel data
          ) -> void

        def to_h: -> Metronome::Models::Contracts::product_create_params

        type type_ =
          :FIXED
          | :USAGE
          | :COMPOSITE
          | :SUBSCRIPTION
          | :PROFESSIONAL_SERVICE
          | :PRO_SERVICE

        class Type < Metronome::Enum
          FIXED: :FIXED
          USAGE: :USAGE
          COMPOSITE: :COMPOSITE
          SUBSCRIPTION: :SUBSCRIPTION
          PROFESSIONAL_SERVICE: :PROFESSIONAL_SERVICE
          PRO_SERVICE: :PRO_SERVICE

          def self.values: -> Array[Metronome::Models::Contracts::ProductCreateParams::type_]
        end
      end
    end
  end
end
