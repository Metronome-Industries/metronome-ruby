module Metronome
  module Models
    module Contracts
      type quantity_conversion =
        {
          conversion_factor: Float,
          operation: Metronome::Models::Contracts::QuantityConversion::operation,
          name: String
        }

      class QuantityConversion < Metronome::BaseModel
        attr_accessor conversion_factor: Float

        attr_accessor operation: Metronome::Models::Contracts::QuantityConversion::operation

        attr_reader name: String?

        def name=: (String) -> void

        def initialize:
          (
            conversion_factor: Float,
            operation: Metronome::Models::Contracts::QuantityConversion::operation,
            name: String
          ) -> void
          | (
            ?Metronome::Models::Contracts::quantity_conversion
            | Metronome::BaseModel data
          ) -> void

        def to_h: -> Metronome::Models::Contracts::quantity_conversion

        type operation = :MULTIPLY | :DIVIDE

        class Operation < Metronome::Enum
          MULTIPLY: :MULTIPLY
          DIVIDE: :DIVIDE

          def self.values: -> Array[Metronome::Models::Contracts::QuantityConversion::operation]
        end
      end
    end
  end
end
