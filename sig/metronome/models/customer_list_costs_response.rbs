module Metronome
  module Models
    type customer_list_costs_response =
      {
        credit_types: Hash[Symbol, Metronome::Models::CustomerListCostsResponse::CreditType],
        end_timestamp: Time,
        start_timestamp: Time
      }

    class CustomerListCostsResponse < Metronome::BaseModel
      attr_accessor credit_types: Hash[Symbol, Metronome::Models::CustomerListCostsResponse::CreditType]

      attr_accessor end_timestamp: Time

      attr_accessor start_timestamp: Time

      def initialize:
        (
          credit_types: Hash[Symbol, Metronome::Models::CustomerListCostsResponse::CreditType],
          end_timestamp: Time,
          start_timestamp: Time
        ) -> void
        | (
          ?Metronome::Models::customer_list_costs_response
          | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::customer_list_costs_response

      type credit_type =
        {
          cost: Float,
          line_item_breakdown: Array[Metronome::Models::CustomerListCostsResponse::CreditType::LineItemBreakdown],
          name: String
        }

      class CreditType < Metronome::BaseModel
        attr_reader cost: Float?

        def cost=: (Float) -> void

        attr_reader line_item_breakdown: Array[Metronome::Models::CustomerListCostsResponse::CreditType::LineItemBreakdown]?

        def line_item_breakdown=: (
          Array[Metronome::Models::CustomerListCostsResponse::CreditType::LineItemBreakdown]
        ) -> void

        attr_reader name: String?

        def name=: (String) -> void

        def initialize:
          (
            cost: Float,
            line_item_breakdown: Array[Metronome::Models::CustomerListCostsResponse::CreditType::LineItemBreakdown],
            name: String
          ) -> void
          | (
            ?Metronome::Models::CustomerListCostsResponse::credit_type
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::CustomerListCostsResponse::credit_type

        type line_item_breakdown =
          { cost: Float, name: String, group_key: String, group_value: String? }

        class LineItemBreakdown < Metronome::BaseModel
          attr_accessor cost: Float

          attr_accessor name: String

          attr_reader group_key: String?

          def group_key=: (String) -> void

          attr_accessor group_value: String?

          def initialize:
            (
              cost: Float,
              name: String,
              group_key: String,
              group_value: String?
            ) -> void
            | (
              ?Metronome::Models::CustomerListCostsResponse::CreditType::line_item_breakdown
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::CustomerListCostsResponse::CreditType::line_item_breakdown
        end
      end
    end
  end
end
