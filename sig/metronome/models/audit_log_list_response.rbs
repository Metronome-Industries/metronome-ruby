module Metronome
  module Models
    type audit_log_list_response =
      {
        id: String,
        request: Metronome::Models::AuditLogListResponse::Request,
        timestamp: Time,
        action: String,
        actor: Metronome::Models::AuditLogListResponse::Actor,
        description: String,
        resource_id: String,
        resource_type: String,
        status: Metronome::Models::AuditLogListResponse::status
      }

    class AuditLogListResponse < Metronome::BaseModel
      attr_accessor id: String

      attr_accessor request: Metronome::Models::AuditLogListResponse::Request

      attr_accessor timestamp: Time

      attr_reader action: String?

      def action=: (String) -> void

      attr_reader actor: Metronome::Models::AuditLogListResponse::Actor?

      def actor=: (Metronome::Models::AuditLogListResponse::Actor) -> void

      attr_reader description: String?

      def description=: (String) -> void

      attr_reader resource_id: String?

      def resource_id=: (String) -> void

      attr_reader resource_type: String?

      def resource_type=: (String) -> void

      attr_reader status: Metronome::Models::AuditLogListResponse::status?

      def status=: (Metronome::Models::AuditLogListResponse::status) -> void

      def initialize:
        (
          id: String,
          request: Metronome::Models::AuditLogListResponse::Request,
          timestamp: Time,
          action: String,
          actor: Metronome::Models::AuditLogListResponse::Actor,
          description: String,
          resource_id: String,
          resource_type: String,
          status: Metronome::Models::AuditLogListResponse::status
        ) -> void
        | (
          ?Metronome::Models::audit_log_list_response
          | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::audit_log_list_response

      type request = { id: String, ip: String, user_agent: String }

      class Request < Metronome::BaseModel
        attr_accessor id: String

        attr_reader ip: String?

        def ip=: (String) -> void

        attr_reader user_agent: String?

        def user_agent=: (String) -> void

        def initialize:
          (id: String, ip: String, user_agent: String) -> void
          | (
            ?Metronome::Models::AuditLogListResponse::request
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::AuditLogListResponse::request
      end

      type actor = { id: String, name: String, email: String }

      class Actor < Metronome::BaseModel
        attr_accessor id: String

        attr_accessor name: String

        attr_reader email: String?

        def email=: (String) -> void

        def initialize:
          (id: String, name: String, email: String) -> void
          | (
            ?Metronome::Models::AuditLogListResponse::actor
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::AuditLogListResponse::actor
      end

      type status = :success | :failure | :pending

      class Status < Metronome::Enum
        SUCCESS: :success
        FAILURE: :failure
        PENDING: :pending

        def self.values: -> ::Array[Metronome::Models::AuditLogListResponse::status]
      end
    end
  end
end
