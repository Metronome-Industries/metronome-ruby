module Metronome
  module Models
    type credit_grant_list_entries_response =
      {
        data: Array[Metronome::Models::CreditGrantListEntriesResponse::Data],
        next_page: String?
      }

    class CreditGrantListEntriesResponse < Metronome::BaseModel
      attr_accessor data: Array[Metronome::Models::CreditGrantListEntriesResponse::Data]

      attr_accessor next_page: String?

      def initialize:
        (
          data: Array[Metronome::Models::CreditGrantListEntriesResponse::Data],
          next_page: String?
        ) -> void
        | (
          ?Metronome::Models::credit_grant_list_entries_response
          | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::credit_grant_list_entries_response

      type data =
        {
          customer_id: String,
          ledgers: Array[Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger]
        }

      class Data < Metronome::BaseModel
        attr_accessor customer_id: String

        attr_accessor ledgers: Array[Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger]

        def initialize:
          (
            customer_id: String,
            ledgers: Array[Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger]
          ) -> void
          | (
            ?Metronome::Models::CreditGrantListEntriesResponse::data
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::CreditGrantListEntriesResponse::data

        type ledger =
          {
            credit_type: Metronome::Models::CreditTypeData,
            ending_balance: Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::EndingBalance,
            entries: Array[Metronome::Models::CreditLedgerEntry],
            pending_entries: Array[Metronome::Models::CreditLedgerEntry],
            starting_balance: Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::StartingBalance
          }

        class Ledger < Metronome::BaseModel
          attr_accessor credit_type: Metronome::Models::CreditTypeData

          attr_accessor ending_balance: Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::EndingBalance

          attr_accessor entries: Array[Metronome::Models::CreditLedgerEntry]

          attr_accessor pending_entries: Array[Metronome::Models::CreditLedgerEntry]

          attr_accessor starting_balance: Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::StartingBalance

          def initialize:
            (
              credit_type: Metronome::Models::CreditTypeData,
              ending_balance: Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::EndingBalance,
              entries: Array[Metronome::Models::CreditLedgerEntry],
              pending_entries: Array[Metronome::Models::CreditLedgerEntry],
              starting_balance: Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::StartingBalance
            ) -> void
            | (
              ?Metronome::Models::CreditGrantListEntriesResponse::Data::ledger
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::CreditGrantListEntriesResponse::Data::ledger

          type ending_balance =
            {
              effective_at: Time,
              excluding_pending: Float,
              including_pending: Float
            }

          class EndingBalance < Metronome::BaseModel
            attr_accessor effective_at: Time

            attr_accessor excluding_pending: Float

            attr_accessor including_pending: Float

            def initialize:
              (
                effective_at: Time,
                excluding_pending: Float,
                including_pending: Float
              ) -> void
              | (
                ?Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::ending_balance
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::ending_balance
          end

          type starting_balance =
            {
              effective_at: Time,
              excluding_pending: Float,
              including_pending: Float
            }

          class StartingBalance < Metronome::BaseModel
            attr_accessor effective_at: Time

            attr_accessor excluding_pending: Float

            attr_accessor including_pending: Float

            def initialize:
              (
                effective_at: Time,
                excluding_pending: Float,
                including_pending: Float
              ) -> void
              | (
                ?Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::starting_balance
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::CreditGrantListEntriesResponse::Data::Ledger::starting_balance
          end
        end
      end
    end
  end
end
