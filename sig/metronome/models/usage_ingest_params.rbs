module Metronome
  module Models
    type usage_ingest_params =
      { usage: Array[Metronome::Models::UsageIngestParams::Usage] }
      & Metronome::request_parameters

    class UsageIngestParams < Metronome::BaseModel
      extend Metronome::RequestParameters::Converter
      include Metronome::RequestParameters

      attr_accessor usage: Array[Metronome::Models::UsageIngestParams::Usage]

      def initialize:
        (
          usage: Array[Metronome::Models::UsageIngestParams::Usage],
          request_options: Metronome::request_opts
        ) -> void
        | (
          ?Metronome::Models::usage_ingest_params | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::usage_ingest_params

      type usage =
        {
          customer_id: String,
          event_type: String,
          timestamp: String,
          transaction_id: String,
          properties: Hash[Symbol, top]
        }

      class Usage < Metronome::BaseModel
        attr_accessor customer_id: String

        attr_accessor event_type: String

        attr_accessor timestamp: String

        attr_accessor transaction_id: String

        attr_reader properties: Hash[Symbol, top]?

        def properties=: (Hash[Symbol, top]) -> void

        def initialize:
          (
            customer_id: String,
            event_type: String,
            timestamp: String,
            transaction_id: String,
            properties: Hash[Symbol, top]
          ) -> void
          | (
            ?Metronome::Models::UsageIngestParams::usage
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::UsageIngestParams::usage
      end
    end
  end
end
