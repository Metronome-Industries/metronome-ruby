module Metronome
  module Models
    type rate =
      {
        rate_type: Metronome::Models::Rate::rate_type,
        credit_type: Metronome::Models::CreditTypeData,
        custom_rate: ::Hash[Symbol, top],
        is_prorated: bool,
        price: Float,
        pricing_group_values: ::Hash[Symbol, String],
        quantity: Float,
        tiers: ::Array[Metronome::Models::Tier],
        use_list_prices: bool
      }

    class Rate < Metronome::BaseModel
      attr_accessor rate_type: Metronome::Models::Rate::rate_type

      attr_reader credit_type: Metronome::Models::CreditTypeData?

      def credit_type=: (
        Metronome::Models::CreditTypeData
      ) -> Metronome::Models::CreditTypeData

      attr_reader custom_rate: ::Hash[Symbol, top]?

      def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

      attr_reader is_prorated: bool?

      def is_prorated=: (bool) -> bool

      attr_reader price: Float?

      def price=: (Float) -> Float

      attr_reader pricing_group_values: ::Hash[Symbol, String]?

      def pricing_group_values=: (
        ::Hash[Symbol, String]
      ) -> ::Hash[Symbol, String]

      attr_reader quantity: Float?

      def quantity=: (Float) -> Float

      attr_reader tiers: ::Array[Metronome::Models::Tier]?

      def tiers=: (
        ::Array[Metronome::Models::Tier]
      ) -> ::Array[Metronome::Models::Tier]

      attr_reader use_list_prices: bool?

      def use_list_prices=: (bool) -> bool

      def initialize:
        (
          rate_type: Metronome::Models::Rate::rate_type,
          credit_type: Metronome::Models::CreditTypeData,
          custom_rate: ::Hash[Symbol, top],
          is_prorated: bool,
          price: Float,
          pricing_group_values: ::Hash[Symbol, String],
          quantity: Float,
          tiers: ::Array[Metronome::Models::Tier],
          use_list_prices: bool
        ) -> void
        | (?Metronome::Models::rate | Metronome::BaseModel data) -> void

      def to_hash: -> Metronome::Models::rate

      type rate_type = :FLAT | :PERCENTAGE | :SUBSCRIPTION | :CUSTOM | :TIERED

      class RateType < Metronome::Enum
        FLAT: :FLAT
        PERCENTAGE: :PERCENTAGE
        SUBSCRIPTION: :SUBSCRIPTION
        CUSTOM: :CUSTOM
        TIERED: :TIERED

        def self.values: -> ::Array[Metronome::Models::Rate::rate_type]
      end
    end
  end
end
