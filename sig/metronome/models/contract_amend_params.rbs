module Metronome
  module Models
    type contract_amend_params =
      {
        contract_id: String,
        customer_id: String,
        starting_at: Time,
        commits: ::Array[Metronome::Models::ContractAmendParams::Commit],
        credits: ::Array[Metronome::Models::ContractAmendParams::Credit],
        custom_fields: ::Hash[Symbol, String],
        discounts: ::Array[Metronome::Models::ContractAmendParams::Discount],
        netsuite_sales_order_id: String,
        overrides: ::Array[Metronome::Models::ContractAmendParams::Override],
        professional_services: ::Array[Metronome::Models::ContractAmendParams::ProfessionalService],
        reseller_royalties: ::Array[Metronome::Models::ContractAmendParams::ResellerRoyalty],
        salesforce_opportunity_id: String,
        scheduled_charges: ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge],
        total_contract_value: Float
      }
      & Metronome::request_parameters

    class ContractAmendParams < Metronome::BaseModel
      extend Metronome::RequestParameters::Converter
      include Metronome::RequestParameters

      attr_accessor contract_id: String

      attr_accessor customer_id: String

      attr_accessor starting_at: Time

      attr_reader commits: ::Array[Metronome::Models::ContractAmendParams::Commit]?

      def commits=: (
        ::Array[Metronome::Models::ContractAmendParams::Commit]
      ) -> void

      attr_reader credits: ::Array[Metronome::Models::ContractAmendParams::Credit]?

      def credits=: (
        ::Array[Metronome::Models::ContractAmendParams::Credit]
      ) -> void

      attr_reader custom_fields: ::Hash[Symbol, String]?

      def custom_fields=: (::Hash[Symbol, String]) -> void

      attr_reader discounts: ::Array[Metronome::Models::ContractAmendParams::Discount]?

      def discounts=: (
        ::Array[Metronome::Models::ContractAmendParams::Discount]
      ) -> void

      attr_reader netsuite_sales_order_id: String?

      def netsuite_sales_order_id=: (String) -> void

      attr_reader overrides: ::Array[Metronome::Models::ContractAmendParams::Override]?

      def overrides=: (
        ::Array[Metronome::Models::ContractAmendParams::Override]
      ) -> void

      attr_reader professional_services: ::Array[Metronome::Models::ContractAmendParams::ProfessionalService]?

      def professional_services=: (
        ::Array[Metronome::Models::ContractAmendParams::ProfessionalService]
      ) -> void

      attr_reader reseller_royalties: ::Array[Metronome::Models::ContractAmendParams::ResellerRoyalty]?

      def reseller_royalties=: (
        ::Array[Metronome::Models::ContractAmendParams::ResellerRoyalty]
      ) -> void

      attr_reader salesforce_opportunity_id: String?

      def salesforce_opportunity_id=: (String) -> void

      attr_reader scheduled_charges: ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge]?

      def scheduled_charges=: (
        ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge]
      ) -> void

      attr_reader total_contract_value: Float?

      def total_contract_value=: (Float) -> void

      def initialize:
        (
          contract_id: String,
          customer_id: String,
          starting_at: Time,
          commits: ::Array[Metronome::Models::ContractAmendParams::Commit],
          credits: ::Array[Metronome::Models::ContractAmendParams::Credit],
          custom_fields: ::Hash[Symbol, String],
          discounts: ::Array[Metronome::Models::ContractAmendParams::Discount],
          netsuite_sales_order_id: String,
          overrides: ::Array[Metronome::Models::ContractAmendParams::Override],
          professional_services: ::Array[Metronome::Models::ContractAmendParams::ProfessionalService],
          reseller_royalties: ::Array[Metronome::Models::ContractAmendParams::ResellerRoyalty],
          salesforce_opportunity_id: String,
          scheduled_charges: ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge],
          total_contract_value: Float,
          request_options: Metronome::request_opts
        ) -> void
        | (
          ?Metronome::Models::contract_amend_params | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::contract_amend_params

      type commit =
        {
          product_id: String,
          type: Metronome::Models::ContractAmendParams::Commit::type_,
          access_schedule: Metronome::Models::ContractAmendParams::Commit::AccessSchedule,
          amount: Float,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          custom_fields: ::Hash[Symbol, String],
          description: String,
          invoice_schedule: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule,
          name: String,
          netsuite_sales_order_id: String,
          priority: Float,
          rate_type: Metronome::Models::ContractAmendParams::Commit::rate_type,
          rollover_fraction: Float,
          temporary_id: String
        }

      class Commit < Metronome::BaseModel
        attr_accessor product_id: String

        attr_accessor type: Metronome::Models::ContractAmendParams::Commit::type_

        attr_reader access_schedule: Metronome::Models::ContractAmendParams::Commit::AccessSchedule?

        def access_schedule=: (
          Metronome::Models::ContractAmendParams::Commit::AccessSchedule
        ) -> void

        attr_reader amount: Float?

        def amount=: (Float) -> void

        attr_reader applicable_product_ids: ::Array[String]?

        def applicable_product_ids=: (::Array[String]) -> void

        attr_reader applicable_product_tags: ::Array[String]?

        def applicable_product_tags=: (::Array[String]) -> void

        attr_reader custom_fields: ::Hash[Symbol, String]?

        def custom_fields=: (::Hash[Symbol, String]) -> void

        attr_reader description: String?

        def description=: (String) -> void

        attr_reader invoice_schedule: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule?

        def invoice_schedule=: (
          Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule
        ) -> void

        attr_reader name: String?

        def name=: (String) -> void

        attr_reader netsuite_sales_order_id: String?

        def netsuite_sales_order_id=: (String) -> void

        attr_reader priority: Float?

        def priority=: (Float) -> void

        attr_reader rate_type: Metronome::Models::ContractAmendParams::Commit::rate_type?

        def rate_type=: (
          Metronome::Models::ContractAmendParams::Commit::rate_type
        ) -> void

        attr_reader rollover_fraction: Float?

        def rollover_fraction=: (Float) -> void

        attr_reader temporary_id: String?

        def temporary_id=: (String) -> void

        def initialize:
          (
            product_id: String,
            type: Metronome::Models::ContractAmendParams::Commit::type_,
            access_schedule: Metronome::Models::ContractAmendParams::Commit::AccessSchedule,
            amount: Float,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            custom_fields: ::Hash[Symbol, String],
            description: String,
            invoice_schedule: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule,
            name: String,
            netsuite_sales_order_id: String,
            priority: Float,
            rate_type: Metronome::Models::ContractAmendParams::Commit::rate_type,
            rollover_fraction: Float,
            temporary_id: String
          ) -> void
          | (
            ?Metronome::Models::ContractAmendParams::commit
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::ContractAmendParams::commit

        type type_ = :PREPAID | :POSTPAID

        class Type < Metronome::Enum
          PREPAID: :PREPAID
          POSTPAID: :POSTPAID

          def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Commit::type_]
        end

        type access_schedule =
          {
            schedule_items: ::Array[Metronome::Models::ContractAmendParams::Commit::AccessSchedule::ScheduleItem],
            credit_type_id: String
          }

        class AccessSchedule < Metronome::BaseModel
          attr_accessor schedule_items: ::Array[Metronome::Models::ContractAmendParams::Commit::AccessSchedule::ScheduleItem]

          attr_reader credit_type_id: String?

          def credit_type_id=: (String) -> void

          def initialize:
            (
              schedule_items: ::Array[Metronome::Models::ContractAmendParams::Commit::AccessSchedule::ScheduleItem],
              credit_type_id: String
            ) -> void
            | (
              ?Metronome::Models::ContractAmendParams::Commit::access_schedule
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::Commit::access_schedule

          type schedule_item =
            { amount: Float, ending_before: Time, starting_at: Time }

          class ScheduleItem < Metronome::BaseModel
            attr_accessor amount: Float

            attr_accessor ending_before: Time

            attr_accessor starting_at: Time

            def initialize:
              (amount: Float, ending_before: Time, starting_at: Time) -> void
              | (
                ?Metronome::Models::ContractAmendParams::Commit::AccessSchedule::schedule_item
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::ContractAmendParams::Commit::AccessSchedule::schedule_item
          end
        end

        type invoice_schedule =
          {
            credit_type_id: String,
            recurring_schedule: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule,
            schedule_items: ::Array[Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::ScheduleItem]
          }

        class InvoiceSchedule < Metronome::BaseModel
          attr_reader credit_type_id: String?

          def credit_type_id=: (String) -> void

          attr_reader recurring_schedule: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule?

          def recurring_schedule=: (
            Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule
          ) -> void

          attr_reader schedule_items: ::Array[Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::ScheduleItem]?

          def schedule_items=: (
            ::Array[Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::ScheduleItem]
          ) -> void

          def initialize:
            (
              credit_type_id: String,
              recurring_schedule: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule,
              schedule_items: ::Array[Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::ScheduleItem]
            ) -> void
            | (
              ?Metronome::Models::ContractAmendParams::Commit::invoice_schedule
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::Commit::invoice_schedule

          type recurring_schedule =
            {
              amount_distribution: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule::amount_distribution,
              ending_before: Time,
              frequency: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule::frequency,
              starting_at: Time,
              amount: Float,
              quantity: Float,
              unit_price: Float
            }

          class RecurringSchedule < Metronome::BaseModel
            attr_accessor amount_distribution: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule::amount_distribution

            attr_accessor ending_before: Time

            attr_accessor frequency: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule::frequency

            attr_accessor starting_at: Time

            attr_reader amount: Float?

            def amount=: (Float) -> void

            attr_reader quantity: Float?

            def quantity=: (Float) -> void

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> void

            def initialize:
              (
                amount_distribution: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::recurring_schedule
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::recurring_schedule

            type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

            class AmountDistribution < Metronome::Enum
              DIVIDED: :DIVIDED
              DIVIDED_ROUNDED: :DIVIDED_ROUNDED
              EACH: :EACH

              def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule::amount_distribution]
            end

            type frequency = :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL

            class Frequency < Metronome::Enum
              MONTHLY: :MONTHLY
              QUARTERLY: :QUARTERLY
              SEMI_ANNUAL: :SEMI_ANNUAL
              ANNUAL: :ANNUAL

              def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::RecurringSchedule::frequency]
            end
          end

          type schedule_item =
            {
              timestamp: Time,
              amount: Float,
              quantity: Float,
              unit_price: Float
            }

          class ScheduleItem < Metronome::BaseModel
            attr_accessor timestamp: Time

            attr_reader amount: Float?

            def amount=: (Float) -> void

            attr_reader quantity: Float?

            def quantity=: (Float) -> void

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> void

            def initialize:
              (
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::schedule_item
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::ContractAmendParams::Commit::InvoiceSchedule::schedule_item
          end
        end

        type rate_type = :COMMIT_RATE | :LIST_RATE

        class RateType < Metronome::Enum
          COMMIT_RATE: :COMMIT_RATE
          LIST_RATE: :LIST_RATE

          def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Commit::rate_type]
        end
      end

      type credit =
        {
          access_schedule: Metronome::Models::ContractAmendParams::Credit::AccessSchedule,
          product_id: String,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          custom_fields: ::Hash[Symbol, String],
          description: String,
          name: String,
          netsuite_sales_order_id: String,
          priority: Float,
          rate_type: Metronome::Models::ContractAmendParams::Credit::rate_type
        }

      class Credit < Metronome::BaseModel
        attr_accessor access_schedule: Metronome::Models::ContractAmendParams::Credit::AccessSchedule

        attr_accessor product_id: String

        attr_reader applicable_product_ids: ::Array[String]?

        def applicable_product_ids=: (::Array[String]) -> void

        attr_reader applicable_product_tags: ::Array[String]?

        def applicable_product_tags=: (::Array[String]) -> void

        attr_reader custom_fields: ::Hash[Symbol, String]?

        def custom_fields=: (::Hash[Symbol, String]) -> void

        attr_reader description: String?

        def description=: (String) -> void

        attr_reader name: String?

        def name=: (String) -> void

        attr_reader netsuite_sales_order_id: String?

        def netsuite_sales_order_id=: (String) -> void

        attr_reader priority: Float?

        def priority=: (Float) -> void

        attr_reader rate_type: Metronome::Models::ContractAmendParams::Credit::rate_type?

        def rate_type=: (
          Metronome::Models::ContractAmendParams::Credit::rate_type
        ) -> void

        def initialize:
          (
            access_schedule: Metronome::Models::ContractAmendParams::Credit::AccessSchedule,
            product_id: String,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            custom_fields: ::Hash[Symbol, String],
            description: String,
            name: String,
            netsuite_sales_order_id: String,
            priority: Float,
            rate_type: Metronome::Models::ContractAmendParams::Credit::rate_type
          ) -> void
          | (
            ?Metronome::Models::ContractAmendParams::credit
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::ContractAmendParams::credit

        type access_schedule =
          {
            schedule_items: ::Array[Metronome::Models::ContractAmendParams::Credit::AccessSchedule::ScheduleItem],
            credit_type_id: String
          }

        class AccessSchedule < Metronome::BaseModel
          attr_accessor schedule_items: ::Array[Metronome::Models::ContractAmendParams::Credit::AccessSchedule::ScheduleItem]

          attr_reader credit_type_id: String?

          def credit_type_id=: (String) -> void

          def initialize:
            (
              schedule_items: ::Array[Metronome::Models::ContractAmendParams::Credit::AccessSchedule::ScheduleItem],
              credit_type_id: String
            ) -> void
            | (
              ?Metronome::Models::ContractAmendParams::Credit::access_schedule
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::Credit::access_schedule

          type schedule_item =
            { amount: Float, ending_before: Time, starting_at: Time }

          class ScheduleItem < Metronome::BaseModel
            attr_accessor amount: Float

            attr_accessor ending_before: Time

            attr_accessor starting_at: Time

            def initialize:
              (amount: Float, ending_before: Time, starting_at: Time) -> void
              | (
                ?Metronome::Models::ContractAmendParams::Credit::AccessSchedule::schedule_item
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::ContractAmendParams::Credit::AccessSchedule::schedule_item
          end
        end

        type rate_type = :COMMIT_RATE | :LIST_RATE

        class RateType < Metronome::Enum
          COMMIT_RATE: :COMMIT_RATE
          LIST_RATE: :LIST_RATE

          def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Credit::rate_type]
        end
      end

      type discount =
        {
          product_id: String,
          schedule: Metronome::Models::ContractAmendParams::Discount::Schedule,
          custom_fields: ::Hash[Symbol, String],
          name: String,
          netsuite_sales_order_id: String
        }

      class Discount < Metronome::BaseModel
        attr_accessor product_id: String

        attr_accessor schedule: Metronome::Models::ContractAmendParams::Discount::Schedule

        attr_reader custom_fields: ::Hash[Symbol, String]?

        def custom_fields=: (::Hash[Symbol, String]) -> void

        attr_reader name: String?

        def name=: (String) -> void

        attr_reader netsuite_sales_order_id: String?

        def netsuite_sales_order_id=: (String) -> void

        def initialize:
          (
            product_id: String,
            schedule: Metronome::Models::ContractAmendParams::Discount::Schedule,
            custom_fields: ::Hash[Symbol, String],
            name: String,
            netsuite_sales_order_id: String
          ) -> void
          | (
            ?Metronome::Models::ContractAmendParams::discount
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::ContractAmendParams::discount

        type schedule =
          {
            credit_type_id: String,
            recurring_schedule: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule,
            schedule_items: ::Array[Metronome::Models::ContractAmendParams::Discount::Schedule::ScheduleItem]
          }

        class Schedule < Metronome::BaseModel
          attr_reader credit_type_id: String?

          def credit_type_id=: (String) -> void

          attr_reader recurring_schedule: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule?

          def recurring_schedule=: (
            Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule
          ) -> void

          attr_reader schedule_items: ::Array[Metronome::Models::ContractAmendParams::Discount::Schedule::ScheduleItem]?

          def schedule_items=: (
            ::Array[Metronome::Models::ContractAmendParams::Discount::Schedule::ScheduleItem]
          ) -> void

          def initialize:
            (
              credit_type_id: String,
              recurring_schedule: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule,
              schedule_items: ::Array[Metronome::Models::ContractAmendParams::Discount::Schedule::ScheduleItem]
            ) -> void
            | (
              ?Metronome::Models::ContractAmendParams::Discount::schedule
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::Discount::schedule

          type recurring_schedule =
            {
              amount_distribution: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule::amount_distribution,
              ending_before: Time,
              frequency: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule::frequency,
              starting_at: Time,
              amount: Float,
              quantity: Float,
              unit_price: Float
            }

          class RecurringSchedule < Metronome::BaseModel
            attr_accessor amount_distribution: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule::amount_distribution

            attr_accessor ending_before: Time

            attr_accessor frequency: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule::frequency

            attr_accessor starting_at: Time

            attr_reader amount: Float?

            def amount=: (Float) -> void

            attr_reader quantity: Float?

            def quantity=: (Float) -> void

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> void

            def initialize:
              (
                amount_distribution: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?Metronome::Models::ContractAmendParams::Discount::Schedule::recurring_schedule
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::ContractAmendParams::Discount::Schedule::recurring_schedule

            type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

            class AmountDistribution < Metronome::Enum
              DIVIDED: :DIVIDED
              DIVIDED_ROUNDED: :DIVIDED_ROUNDED
              EACH: :EACH

              def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule::amount_distribution]
            end

            type frequency = :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL

            class Frequency < Metronome::Enum
              MONTHLY: :MONTHLY
              QUARTERLY: :QUARTERLY
              SEMI_ANNUAL: :SEMI_ANNUAL
              ANNUAL: :ANNUAL

              def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Discount::Schedule::RecurringSchedule::frequency]
            end
          end

          type schedule_item =
            {
              timestamp: Time,
              amount: Float,
              quantity: Float,
              unit_price: Float
            }

          class ScheduleItem < Metronome::BaseModel
            attr_accessor timestamp: Time

            attr_reader amount: Float?

            def amount=: (Float) -> void

            attr_reader quantity: Float?

            def quantity=: (Float) -> void

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> void

            def initialize:
              (
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?Metronome::Models::ContractAmendParams::Discount::Schedule::schedule_item
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::ContractAmendParams::Discount::Schedule::schedule_item
          end
        end
      end

      type override =
        {
          starting_at: Time,
          applicable_product_tags: ::Array[String],
          ending_before: Time,
          entitled: bool,
          is_commit_specific: bool,
          multiplier: Float,
          override_specifiers: ::Array[Metronome::Models::ContractAmendParams::Override::OverrideSpecifier],
          overwrite_rate: Metronome::Models::ContractAmendParams::Override::OverwriteRate,
          priority: Float,
          product_id: String,
          target: Metronome::Models::ContractAmendParams::Override::target,
          tiers: ::Array[Metronome::Models::ContractAmendParams::Override::Tier],
          type: Metronome::Models::ContractAmendParams::Override::type_
        }

      class Override < Metronome::BaseModel
        attr_accessor starting_at: Time

        attr_reader applicable_product_tags: ::Array[String]?

        def applicable_product_tags=: (::Array[String]) -> void

        attr_reader ending_before: Time?

        def ending_before=: (Time) -> void

        attr_reader entitled: bool?

        def entitled=: (bool) -> void

        attr_reader is_commit_specific: bool?

        def is_commit_specific=: (bool) -> void

        attr_reader multiplier: Float?

        def multiplier=: (Float) -> void

        attr_reader override_specifiers: ::Array[Metronome::Models::ContractAmendParams::Override::OverrideSpecifier]?

        def override_specifiers=: (
          ::Array[Metronome::Models::ContractAmendParams::Override::OverrideSpecifier]
        ) -> void

        attr_reader overwrite_rate: Metronome::Models::ContractAmendParams::Override::OverwriteRate?

        def overwrite_rate=: (
          Metronome::Models::ContractAmendParams::Override::OverwriteRate
        ) -> void

        attr_reader priority: Float?

        def priority=: (Float) -> void

        attr_reader product_id: String?

        def product_id=: (String) -> void

        attr_reader target: Metronome::Models::ContractAmendParams::Override::target?

        def target=: (
          Metronome::Models::ContractAmendParams::Override::target
        ) -> void

        attr_reader tiers: ::Array[Metronome::Models::ContractAmendParams::Override::Tier]?

        def tiers=: (
          ::Array[Metronome::Models::ContractAmendParams::Override::Tier]
        ) -> void

        attr_reader type: Metronome::Models::ContractAmendParams::Override::type_?

        def type=: (
          Metronome::Models::ContractAmendParams::Override::type_
        ) -> void

        def initialize:
          (
            starting_at: Time,
            applicable_product_tags: ::Array[String],
            ending_before: Time,
            entitled: bool,
            is_commit_specific: bool,
            multiplier: Float,
            override_specifiers: ::Array[Metronome::Models::ContractAmendParams::Override::OverrideSpecifier],
            overwrite_rate: Metronome::Models::ContractAmendParams::Override::OverwriteRate,
            priority: Float,
            product_id: String,
            target: Metronome::Models::ContractAmendParams::Override::target,
            tiers: ::Array[Metronome::Models::ContractAmendParams::Override::Tier],
            type: Metronome::Models::ContractAmendParams::Override::type_
          ) -> void
          | (
            ?Metronome::Models::ContractAmendParams::override
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::ContractAmendParams::override

        type override_specifier =
          {
            commit_ids: ::Array[String],
            presentation_group_values: ::Hash[Symbol, String],
            pricing_group_values: ::Hash[Symbol, String],
            product_id: String,
            product_tags: ::Array[String],
            recurring_commit_ids: ::Array[String],
            recurring_credit_ids: ::Array[String]
          }

        class OverrideSpecifier < Metronome::BaseModel
          attr_reader commit_ids: ::Array[String]?

          def commit_ids=: (::Array[String]) -> void

          attr_reader presentation_group_values: ::Hash[Symbol, String]?

          def presentation_group_values=: (::Hash[Symbol, String]) -> void

          attr_reader pricing_group_values: ::Hash[Symbol, String]?

          def pricing_group_values=: (::Hash[Symbol, String]) -> void

          attr_reader product_id: String?

          def product_id=: (String) -> void

          attr_reader product_tags: ::Array[String]?

          def product_tags=: (::Array[String]) -> void

          attr_reader recurring_commit_ids: ::Array[String]?

          def recurring_commit_ids=: (::Array[String]) -> void

          attr_reader recurring_credit_ids: ::Array[String]?

          def recurring_credit_ids=: (::Array[String]) -> void

          def initialize:
            (
              commit_ids: ::Array[String],
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String],
              recurring_commit_ids: ::Array[String],
              recurring_credit_ids: ::Array[String]
            ) -> void
            | (
              ?Metronome::Models::ContractAmendParams::Override::override_specifier
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::Override::override_specifier
        end

        type overwrite_rate =
          {
            rate_type: Metronome::Models::ContractAmendParams::Override::OverwriteRate::rate_type,
            credit_type_id: String,
            custom_rate: ::Hash[Symbol, top],
            is_prorated: bool,
            price: Float,
            quantity: Float,
            tiers: ::Array[Metronome::Models::Tier]
          }

        class OverwriteRate < Metronome::BaseModel
          attr_accessor rate_type: Metronome::Models::ContractAmendParams::Override::OverwriteRate::rate_type

          attr_reader credit_type_id: String?

          def credit_type_id=: (String) -> void

          attr_reader custom_rate: ::Hash[Symbol, top]?

          def custom_rate=: (::Hash[Symbol, top]) -> void

          attr_reader is_prorated: bool?

          def is_prorated=: (bool) -> void

          attr_reader price: Float?

          def price=: (Float) -> void

          attr_reader quantity: Float?

          def quantity=: (Float) -> void

          attr_reader tiers: ::Array[Metronome::Models::Tier]?

          def tiers=: (::Array[Metronome::Models::Tier]) -> void

          def initialize:
            (
              rate_type: Metronome::Models::ContractAmendParams::Override::OverwriteRate::rate_type,
              credit_type_id: String,
              custom_rate: ::Hash[Symbol, top],
              is_prorated: bool,
              price: Float,
              quantity: Float,
              tiers: ::Array[Metronome::Models::Tier]
            ) -> void
            | (
              ?Metronome::Models::ContractAmendParams::Override::overwrite_rate
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::Override::overwrite_rate

          type rate_type =
            :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

          class RateType < Metronome::Enum
            FLAT: :FLAT
            PERCENTAGE: :PERCENTAGE
            SUBSCRIPTION: :SUBSCRIPTION
            TIERED: :TIERED
            CUSTOM: :CUSTOM

            def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Override::OverwriteRate::rate_type]
          end
        end

        type target = :COMMIT_RATE | :LIST_RATE

        class Target < Metronome::Enum
          COMMIT_RATE: :COMMIT_RATE
          LIST_RATE: :LIST_RATE

          def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Override::target]
        end

        type tier = { multiplier: Float, size: Float }

        class Tier < Metronome::BaseModel
          attr_accessor multiplier: Float

          attr_reader size: Float?

          def size=: (Float) -> void

          def initialize:
            (multiplier: Float, size: Float) -> void
            | (
              ?Metronome::Models::ContractAmendParams::Override::tier
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::Override::tier
        end

        type type_ = :OVERWRITE | :MULTIPLIER | :TIERED

        class Type < Metronome::Enum
          OVERWRITE: :OVERWRITE
          MULTIPLIER: :MULTIPLIER
          TIERED: :TIERED

          def self.values: -> ::Array[Metronome::Models::ContractAmendParams::Override::type_]
        end
      end

      type professional_service =
        {
          max_amount: Float,
          product_id: String,
          quantity: Float,
          unit_price: Float,
          custom_fields: ::Hash[Symbol, String],
          description: String,
          netsuite_sales_order_id: String
        }

      class ProfessionalService < Metronome::BaseModel
        attr_accessor max_amount: Float

        attr_accessor product_id: String

        attr_accessor quantity: Float

        attr_accessor unit_price: Float

        attr_reader custom_fields: ::Hash[Symbol, String]?

        def custom_fields=: (::Hash[Symbol, String]) -> void

        attr_reader description: String?

        def description=: (String) -> void

        attr_reader netsuite_sales_order_id: String?

        def netsuite_sales_order_id=: (String) -> void

        def initialize:
          (
            max_amount: Float,
            product_id: String,
            quantity: Float,
            unit_price: Float,
            custom_fields: ::Hash[Symbol, String],
            description: String,
            netsuite_sales_order_id: String
          ) -> void
          | (
            ?Metronome::Models::ContractAmendParams::professional_service
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::ContractAmendParams::professional_service
      end

      type reseller_royalty =
        {
          reseller_type: Metronome::Models::ContractAmendParams::ResellerRoyalty::reseller_type,
          applicable_product_ids: ::Array[String],
          applicable_product_tags: ::Array[String],
          aws_options: Metronome::Models::ContractAmendParams::ResellerRoyalty::AwsOptions,
          ending_before: Time?,
          fraction: Float,
          gcp_options: Metronome::Models::ContractAmendParams::ResellerRoyalty::GcpOptions,
          netsuite_reseller_id: String,
          reseller_contract_value: Float,
          starting_at: Time
        }

      class ResellerRoyalty < Metronome::BaseModel
        attr_accessor reseller_type: Metronome::Models::ContractAmendParams::ResellerRoyalty::reseller_type

        attr_reader applicable_product_ids: ::Array[String]?

        def applicable_product_ids=: (::Array[String]) -> void

        attr_reader applicable_product_tags: ::Array[String]?

        def applicable_product_tags=: (::Array[String]) -> void

        attr_reader aws_options: Metronome::Models::ContractAmendParams::ResellerRoyalty::AwsOptions?

        def aws_options=: (
          Metronome::Models::ContractAmendParams::ResellerRoyalty::AwsOptions
        ) -> void

        attr_accessor ending_before: Time?

        attr_reader fraction: Float?

        def fraction=: (Float) -> void

        attr_reader gcp_options: Metronome::Models::ContractAmendParams::ResellerRoyalty::GcpOptions?

        def gcp_options=: (
          Metronome::Models::ContractAmendParams::ResellerRoyalty::GcpOptions
        ) -> void

        attr_reader netsuite_reseller_id: String?

        def netsuite_reseller_id=: (String) -> void

        attr_reader reseller_contract_value: Float?

        def reseller_contract_value=: (Float) -> void

        attr_reader starting_at: Time?

        def starting_at=: (Time) -> void

        def initialize:
          (
            reseller_type: Metronome::Models::ContractAmendParams::ResellerRoyalty::reseller_type,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            aws_options: Metronome::Models::ContractAmendParams::ResellerRoyalty::AwsOptions,
            ending_before: Time?,
            fraction: Float,
            gcp_options: Metronome::Models::ContractAmendParams::ResellerRoyalty::GcpOptions,
            netsuite_reseller_id: String,
            reseller_contract_value: Float,
            starting_at: Time
          ) -> void
          | (
            ?Metronome::Models::ContractAmendParams::reseller_royalty
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::ContractAmendParams::reseller_royalty

        type reseller_type = :AWS | :AWS_PRO_SERVICE | :GCP | :GCP_PRO_SERVICE

        class ResellerType < Metronome::Enum
          AWS: :AWS
          AWS_PRO_SERVICE: :AWS_PRO_SERVICE
          GCP: :GCP
          GCP_PRO_SERVICE: :GCP_PRO_SERVICE

          def self.values: -> ::Array[Metronome::Models::ContractAmendParams::ResellerRoyalty::reseller_type]
        end

        type aws_options =
          {
            aws_account_number: String,
            aws_offer_id: String,
            aws_payer_reference_id: String
          }

        class AwsOptions < Metronome::BaseModel
          attr_reader aws_account_number: String?

          def aws_account_number=: (String) -> void

          attr_reader aws_offer_id: String?

          def aws_offer_id=: (String) -> void

          attr_reader aws_payer_reference_id: String?

          def aws_payer_reference_id=: (String) -> void

          def initialize:
            (
              aws_account_number: String,
              aws_offer_id: String,
              aws_payer_reference_id: String
            ) -> void
            | (
              ?Metronome::Models::ContractAmendParams::ResellerRoyalty::aws_options
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::ResellerRoyalty::aws_options
        end

        type gcp_options = { gcp_account_id: String, gcp_offer_id: String }

        class GcpOptions < Metronome::BaseModel
          attr_reader gcp_account_id: String?

          def gcp_account_id=: (String) -> void

          attr_reader gcp_offer_id: String?

          def gcp_offer_id=: (String) -> void

          def initialize:
            (gcp_account_id: String, gcp_offer_id: String) -> void
            | (
              ?Metronome::Models::ContractAmendParams::ResellerRoyalty::gcp_options
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::ResellerRoyalty::gcp_options
        end
      end

      type scheduled_charge =
        {
          product_id: String,
          schedule: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule,
          name: String,
          netsuite_sales_order_id: String
        }

      class ScheduledCharge < Metronome::BaseModel
        attr_accessor product_id: String

        attr_accessor schedule: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule

        attr_reader name: String?

        def name=: (String) -> void

        attr_reader netsuite_sales_order_id: String?

        def netsuite_sales_order_id=: (String) -> void

        def initialize:
          (
            product_id: String,
            schedule: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule,
            name: String,
            netsuite_sales_order_id: String
          ) -> void
          | (
            ?Metronome::Models::ContractAmendParams::scheduled_charge
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::ContractAmendParams::scheduled_charge

        type schedule =
          {
            credit_type_id: String,
            recurring_schedule: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule,
            schedule_items: ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::ScheduleItem]
          }

        class Schedule < Metronome::BaseModel
          attr_reader credit_type_id: String?

          def credit_type_id=: (String) -> void

          attr_reader recurring_schedule: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule?

          def recurring_schedule=: (
            Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule
          ) -> void

          attr_reader schedule_items: ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::ScheduleItem]?

          def schedule_items=: (
            ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::ScheduleItem]
          ) -> void

          def initialize:
            (
              credit_type_id: String,
              recurring_schedule: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule,
              schedule_items: ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::ScheduleItem]
            ) -> void
            | (
              ?Metronome::Models::ContractAmendParams::ScheduledCharge::schedule
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::ContractAmendParams::ScheduledCharge::schedule

          type recurring_schedule =
            {
              amount_distribution: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule::amount_distribution,
              ending_before: Time,
              frequency: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule::frequency,
              starting_at: Time,
              amount: Float,
              quantity: Float,
              unit_price: Float
            }

          class RecurringSchedule < Metronome::BaseModel
            attr_accessor amount_distribution: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule::amount_distribution

            attr_accessor ending_before: Time

            attr_accessor frequency: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule::frequency

            attr_accessor starting_at: Time

            attr_reader amount: Float?

            def amount=: (Float) -> void

            attr_reader quantity: Float?

            def quantity=: (Float) -> void

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> void

            def initialize:
              (
                amount_distribution: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::recurring_schedule
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::recurring_schedule

            type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

            class AmountDistribution < Metronome::Enum
              DIVIDED: :DIVIDED
              DIVIDED_ROUNDED: :DIVIDED_ROUNDED
              EACH: :EACH

              def self.values: -> ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule::amount_distribution]
            end

            type frequency = :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL

            class Frequency < Metronome::Enum
              MONTHLY: :MONTHLY
              QUARTERLY: :QUARTERLY
              SEMI_ANNUAL: :SEMI_ANNUAL
              ANNUAL: :ANNUAL

              def self.values: -> ::Array[Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::RecurringSchedule::frequency]
            end
          end

          type schedule_item =
            {
              timestamp: Time,
              amount: Float,
              quantity: Float,
              unit_price: Float
            }

          class ScheduleItem < Metronome::BaseModel
            attr_accessor timestamp: Time

            attr_reader amount: Float?

            def amount=: (Float) -> void

            attr_reader quantity: Float?

            def quantity=: (Float) -> void

            attr_reader unit_price: Float?

            def unit_price=: (Float) -> void

            def initialize:
              (
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::schedule_item
                | Metronome::BaseModel data
              ) -> void

            def to_hash: -> Metronome::Models::ContractAmendParams::ScheduledCharge::Schedule::schedule_item
          end
        end
      end
    end
  end
end
