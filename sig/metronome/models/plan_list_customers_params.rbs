module Metronome
  module Models
    type plan_list_customers_params =
      {
        plan_id: String,
        limit: Integer,
        next_page: String,
        status: Metronome::Models::PlanListCustomersParams::status
      }
      & Metronome::request_parameters

    class PlanListCustomersParams < Metronome::BaseModel
      extend Metronome::RequestParameters::Converter
      include Metronome::RequestParameters

      attr_accessor plan_id: String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader next_page: String?

      def next_page=: (String) -> String

      attr_reader status: Metronome::Models::PlanListCustomersParams::status?

      def status=: (
        Metronome::Models::PlanListCustomersParams::status
      ) -> Metronome::Models::PlanListCustomersParams::status

      def initialize:
        (
          plan_id: String,
          limit: Integer,
          next_page: String,
          status: Metronome::Models::PlanListCustomersParams::status,
          request_options: Metronome::request_opts
        ) -> void
        | (
          ?Metronome::Models::plan_list_customers_params
          | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::plan_list_customers_params

      type status = :all | :active | :ended | :upcoming

      class Status < Metronome::Enum
        ALL: :all
        ACTIVE: :active
        ENDED: :ended
        UPCOMING: :upcoming

        def self.values: -> ::Array[Metronome::Models::PlanListCustomersParams::status]
      end
    end
  end
end
