module Metronome
  module Models
    type billable_metric_list_response =
      {
        id: String,
        name: String,
        aggregation_key: String,
        aggregation_type: Metronome::Models::BillableMetricListResponse::aggregation_type,
        archived_at: Time,
        custom_fields: ::Hash[Symbol, String],
        event_type_filter: Metronome::Models::EventTypeFilter,
        group_keys: ::Array[::Array[String]],
        property_filters: ::Array[Metronome::Models::PropertyFilter],
        sql: String
      }

    class BillableMetricListResponse < Metronome::BaseModel
      attr_accessor id: String

      attr_accessor name: String

      attr_reader aggregation_key: String?

      def aggregation_key=: (String) -> String

      attr_reader aggregation_type: Metronome::Models::BillableMetricListResponse::aggregation_type?

      def aggregation_type=: (
        Metronome::Models::BillableMetricListResponse::aggregation_type
      ) -> Metronome::Models::BillableMetricListResponse::aggregation_type

      attr_reader archived_at: Time?

      def archived_at=: (Time) -> Time

      attr_reader custom_fields: ::Hash[Symbol, String]?

      def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader event_type_filter: Metronome::Models::EventTypeFilter?

      def event_type_filter=: (
        Metronome::Models::EventTypeFilter
      ) -> Metronome::Models::EventTypeFilter

      attr_reader group_keys: ::Array[::Array[String]]?

      def group_keys=: (::Array[::Array[String]]) -> ::Array[::Array[String]]

      attr_reader property_filters: ::Array[Metronome::Models::PropertyFilter]?

      def property_filters=: (
        ::Array[Metronome::Models::PropertyFilter]
      ) -> ::Array[Metronome::Models::PropertyFilter]

      attr_reader sql: String?

      def sql=: (String) -> String

      def initialize:
        (
          id: String,
          name: String,
          aggregation_key: String,
          aggregation_type: Metronome::Models::BillableMetricListResponse::aggregation_type,
          archived_at: Time,
          custom_fields: ::Hash[Symbol, String],
          event_type_filter: Metronome::Models::EventTypeFilter,
          group_keys: ::Array[::Array[String]],
          property_filters: ::Array[Metronome::Models::PropertyFilter],
          sql: String
        ) -> void
        | (
          ?Metronome::Models::billable_metric_list_response
          | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::billable_metric_list_response

      type aggregation_type = :COUNT | :LATEST | :MAX | :SUM | :UNIQUE

      class AggregationType < Metronome::Enum
        COUNT: :COUNT
        LATEST: :LATEST
        MAX: :MAX
        SUM: :SUM
        UNIQUE: :UNIQUE

        def self.values: -> ::Array[Metronome::Models::BillableMetricListResponse::aggregation_type]
      end
    end
  end
end
