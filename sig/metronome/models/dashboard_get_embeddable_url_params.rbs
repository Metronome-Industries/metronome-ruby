module Metronome
  module Models
    type dashboard_get_embeddable_url_params =
      {
        customer_id: String,
        dashboard: Metronome::Models::DashboardGetEmbeddableURLParams::dashboard,
        bm_group_key_overrides: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::BmGroupKeyOverride],
        color_overrides: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride],
        dashboard_options: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::DashboardOption]
      }
      & Metronome::request_parameters

    class DashboardGetEmbeddableURLParams < Metronome::BaseModel
      extend Metronome::RequestParameters::Converter
      include Metronome::RequestParameters

      attr_accessor customer_id: String

      attr_accessor dashboard: Metronome::Models::DashboardGetEmbeddableURLParams::dashboard

      attr_reader bm_group_key_overrides: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::BmGroupKeyOverride]?

      def bm_group_key_overrides=: (
        ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::BmGroupKeyOverride]
      ) -> void

      attr_reader color_overrides: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride]?

      def color_overrides=: (
        ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride]
      ) -> void

      attr_reader dashboard_options: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::DashboardOption]?

      def dashboard_options=: (
        ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::DashboardOption]
      ) -> void

      def initialize:
        (
          customer_id: String,
          dashboard: Metronome::Models::DashboardGetEmbeddableURLParams::dashboard,
          bm_group_key_overrides: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::BmGroupKeyOverride],
          color_overrides: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride],
          dashboard_options: ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::DashboardOption],
          request_options: Metronome::request_opts
        ) -> void
        | (
          ?Metronome::Models::dashboard_get_embeddable_url_params
          | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::dashboard_get_embeddable_url_params

      type dashboard = :invoices | :usage | :credits

      class Dashboard < Metronome::Enum
        INVOICES: :invoices
        USAGE: :usage
        CREDITS: :credits

        def self.values: -> ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::dashboard]
      end

      type bm_group_key_override =
        {
          group_key_name: String,
          display_name: String,
          value_display_names: ::Hash[Symbol, top]
        }

      class BmGroupKeyOverride < Metronome::BaseModel
        attr_accessor group_key_name: String

        attr_reader display_name: String?

        def display_name=: (String) -> void

        attr_reader value_display_names: ::Hash[Symbol, top]?

        def value_display_names=: (::Hash[Symbol, top]) -> void

        def initialize:
          (
            group_key_name: String,
            display_name: String,
            value_display_names: ::Hash[Symbol, top]
          ) -> void
          | (
            ?Metronome::Models::DashboardGetEmbeddableURLParams::bm_group_key_override
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::DashboardGetEmbeddableURLParams::bm_group_key_override
      end

      type color_override =
        {
          name: Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride::name_,
          value: String
        }

      class ColorOverride < Metronome::BaseModel
        attr_reader name: Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride::name_?

        def name=: (
          Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride::name_
        ) -> void

        attr_reader value: String?

        def value=: (String) -> void

        def initialize:
          (
            name: Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride::name_,
            value: String
          ) -> void
          | (
            ?Metronome::Models::DashboardGetEmbeddableURLParams::color_override
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::DashboardGetEmbeddableURLParams::color_override

        type name_ =
          :Gray_dark
          | :Gray_medium
          | :Gray_light
          | :Gray_extralight
          | :White
          | :Primary_medium
          | :Primary_light
          | :UsageLine_0
          | :UsageLine_1
          | :UsageLine_2
          | :UsageLine_3
          | :UsageLine_4
          | :UsageLine_5
          | :UsageLine_6
          | :UsageLine_7
          | :UsageLine_8
          | :UsageLine_9
          | :Primary_green
          | :Primary_red

        class Name < Metronome::Enum
          GRAY_DARK: :Gray_dark
          GRAY_MEDIUM: :Gray_medium
          GRAY_LIGHT: :Gray_light
          GRAY_EXTRALIGHT: :Gray_extralight
          WHITE: :White
          PRIMARY_MEDIUM: :Primary_medium
          PRIMARY_LIGHT: :Primary_light
          USAGE_LINE_0: :UsageLine_0
          USAGE_LINE_1: :UsageLine_1
          USAGE_LINE_2: :UsageLine_2
          USAGE_LINE_3: :UsageLine_3
          USAGE_LINE_4: :UsageLine_4
          USAGE_LINE_5: :UsageLine_5
          USAGE_LINE_6: :UsageLine_6
          USAGE_LINE_7: :UsageLine_7
          USAGE_LINE_8: :UsageLine_8
          USAGE_LINE_9: :UsageLine_9
          PRIMARY_GREEN: :Primary_green
          PRIMARY_RED: :Primary_red

          def self.values: -> ::Array[Metronome::Models::DashboardGetEmbeddableURLParams::ColorOverride::name_]
        end
      end

      type dashboard_option = { key: String, value: String }

      class DashboardOption < Metronome::BaseModel
        attr_accessor key: String

        attr_accessor value: String

        def initialize:
          (key: String, value: String) -> void
          | (
            ?Metronome::Models::DashboardGetEmbeddableURLParams::dashboard_option
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::DashboardGetEmbeddableURLParams::dashboard_option
      end
    end
  end
end
