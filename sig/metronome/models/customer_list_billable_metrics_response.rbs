module Metronome
  module Models
    type customer_list_billable_metrics_response =
      {
        id: String,
        name: String,
        aggregate: String,
        aggregate_keys: Array[String],
        aggregation_key: String,
        aggregation_type: Metronome::Models::CustomerListBillableMetricsResponse::aggregation_type,
        archived_at: Time,
        custom_fields: Hash[Symbol, String],
        event_type_filter: Metronome::Models::EventTypeFilter,
        filter: Hash[Symbol, top],
        group_by: Array[String],
        group_keys: Array[Array[String]],
        property_filters: Array[Metronome::Models::PropertyFilter],
        sql: String
      }

    class CustomerListBillableMetricsResponse < Metronome::BaseModel
      attr_accessor id: String

      attr_accessor name: String

      attr_reader aggregate: String?

      def aggregate=: (String) -> void

      attr_reader aggregate_keys: Array[String]

      def aggregate_keys=: (Array[String]) -> void

      attr_reader aggregation_key: String?

      def aggregation_key=: (String) -> void

      attr_reader aggregation_type: Metronome::Models::CustomerListBillableMetricsResponse::aggregation_type?

      def aggregation_type=: (
        Metronome::Models::CustomerListBillableMetricsResponse::aggregation_type
      ) -> void

      attr_reader archived_at: Time?

      def archived_at=: (Time) -> void

      attr_reader custom_fields: Hash[Symbol, String]?

      def custom_fields=: (Hash[Symbol, String]) -> void

      attr_reader event_type_filter: Metronome::Models::EventTypeFilter?

      def event_type_filter=: (Metronome::Models::EventTypeFilter) -> void

      attr_reader filter: Hash[Symbol, top]?

      def filter=: (Hash[Symbol, top]) -> void

      attr_reader group_by: Array[String]

      def group_by=: (Array[String]) -> void

      attr_reader group_keys: Array[Array[String]]

      def group_keys=: (Array[Array[String]]) -> void

      attr_reader property_filters: Array[Metronome::Models::PropertyFilter]

      def property_filters=: (Array[Metronome::Models::PropertyFilter]) -> void

      attr_reader sql: String?

      def sql=: (String) -> void

      def initialize:
        (
          id: String,
          name: String,
          aggregate: String,
          aggregate_keys: Array[String],
          aggregation_key: String,
          aggregation_type: Metronome::Models::CustomerListBillableMetricsResponse::aggregation_type,
          archived_at: Time,
          custom_fields: Hash[Symbol, String],
          event_type_filter: Metronome::Models::EventTypeFilter,
          filter: Hash[Symbol, top],
          group_by: Array[String],
          group_keys: Array[Array[String]],
          property_filters: Array[Metronome::Models::PropertyFilter],
          sql: String
        ) -> void
        | (
          ?Metronome::Models::customer_list_billable_metrics_response
          | Metronome::BaseModel data
        ) -> void

      def to_h: -> Metronome::Models::customer_list_billable_metrics_response

      type aggregation_type = :COUNT | :LATEST | :MAX | :SUM | :UNIQUE

      class AggregationType < Metronome::Enum
        COUNT: :COUNT
        LATEST: :LATEST
        MAX: :MAX
        SUM: :SUM
        UNIQUE: :UNIQUE

        def self.values: -> Array[Metronome::Models::CustomerListBillableMetricsResponse::aggregation_type]
      end
    end
  end
end
