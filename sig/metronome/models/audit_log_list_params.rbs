module Metronome
  module Models
    type audit_log_list_params =
      {
        ending_before: Time,
        limit: Integer,
        next_page: String,
        resource_id: String,
        resource_type: String,
        sort: Metronome::Models::AuditLogListParams::sort,
        starting_on: Time
      }
      & Metronome::request_parameters

    class AuditLogListParams < Metronome::BaseModel
      extend Metronome::RequestParameters::Converter
      include Metronome::RequestParameters

      attr_reader ending_before: Time?

      def ending_before=: (Time) -> void

      attr_reader limit: Integer?

      def limit=: (Integer) -> void

      attr_reader next_page: String?

      def next_page=: (String) -> void

      attr_reader resource_id: String?

      def resource_id=: (String) -> void

      attr_reader resource_type: String?

      def resource_type=: (String) -> void

      attr_reader sort: Metronome::Models::AuditLogListParams::sort?

      def sort=: (Metronome::Models::AuditLogListParams::sort) -> void

      attr_reader starting_on: Time?

      def starting_on=: (Time) -> void

      def initialize:
        (
          ending_before: Time,
          limit: Integer,
          next_page: String,
          resource_id: String,
          resource_type: String,
          sort: Metronome::Models::AuditLogListParams::sort,
          starting_on: Time,
          request_options: Metronome::request_opts
        ) -> void
        | (
          ?Metronome::Models::audit_log_list_params | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::audit_log_list_params

      type sort = :date_asc | :date_desc

      class Sort < Metronome::Enum
        DATE_ASC: :date_asc
        DATE_DESC: :date_desc

        def self.values: -> Array[Metronome::Models::AuditLogListParams::sort]
      end
    end
  end
end
