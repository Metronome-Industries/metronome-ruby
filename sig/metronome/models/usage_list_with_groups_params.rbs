module Metronome
  module Models
    type usage_list_with_groups_params =
      {
        billable_metric_id: String,
        customer_id: String,
        window_size: Metronome::Models::UsageListWithGroupsParams::window_size,
        limit: Integer,
        next_page: String,
        current_period: bool,
        ending_before: Time,
        group_by: Metronome::Models::UsageListWithGroupsParams::GroupBy,
        starting_on: Time
      }
      & Metronome::request_parameters

    class UsageListWithGroupsParams < Metronome::BaseModel
      extend Metronome::RequestParameters::Converter
      include Metronome::RequestParameters

      attr_accessor billable_metric_id: String

      attr_accessor customer_id: String

      attr_accessor window_size: Metronome::Models::UsageListWithGroupsParams::window_size

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader next_page: String?

      def next_page=: (String) -> String

      attr_reader current_period: bool?

      def current_period=: (bool) -> bool

      attr_reader ending_before: Time?

      def ending_before=: (Time) -> Time

      attr_reader group_by: Metronome::Models::UsageListWithGroupsParams::GroupBy?

      def group_by=: (
        Metronome::Models::UsageListWithGroupsParams::GroupBy
      ) -> Metronome::Models::UsageListWithGroupsParams::GroupBy

      attr_reader starting_on: Time?

      def starting_on=: (Time) -> Time

      def initialize:
        (
          billable_metric_id: String,
          customer_id: String,
          window_size: Metronome::Models::UsageListWithGroupsParams::window_size,
          limit: Integer,
          next_page: String,
          current_period: bool,
          ending_before: Time,
          group_by: Metronome::Models::UsageListWithGroupsParams::GroupBy,
          starting_on: Time,
          request_options: Metronome::request_opts
        ) -> void
        | (
          ?Metronome::Models::usage_list_with_groups_params
          | Metronome::BaseModel data
        ) -> void

      def to_hash: -> Metronome::Models::usage_list_with_groups_params

      type window_size = :HOUR | :DAY | :NONE

      class WindowSize < Metronome::Enum
        HOUR: :HOUR
        DAY: :DAY
        NONE: :NONE

        def self.values: -> ::Array[Metronome::Models::UsageListWithGroupsParams::window_size]
      end

      type group_by = { key: String, values: ::Array[String] }

      class GroupBy < Metronome::BaseModel
        attr_accessor key: String

        attr_reader values: ::Array[String]?

        def values=: (::Array[String]) -> ::Array[String]

        def initialize:
          (key: String, values: ::Array[String]) -> void
          | (
            ?Metronome::Models::UsageListWithGroupsParams::group_by
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::UsageListWithGroupsParams::group_by
      end
    end
  end
end
