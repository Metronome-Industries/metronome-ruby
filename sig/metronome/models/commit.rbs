module Metronome
  module Models
    type commit =
      {
        id: String,
        product: Metronome::Models::Commit::Product,
        type: Metronome::Models::Commit::type_,
        access_schedule: Metronome::Models::ScheduleDuration,
        amount: Float,
        applicable_contract_ids: Array[String],
        applicable_product_ids: Array[String],
        applicable_product_tags: Array[String],
        balance: Float,
        contract: Metronome::Models::Commit::Contract,
        custom_fields: Hash[Symbol, String],
        description: String,
        invoice_contract: Metronome::Models::Commit::InvoiceContract,
        invoice_schedule: Metronome::Models::SchedulePointInTime,
        ledger: Array[Metronome::Models::Commit::ledger],
        name: String,
        netsuite_sales_order_id: String,
        priority: Float,
        rate_type: Metronome::Models::Commit::rate_type,
        rolled_over_from: Metronome::Models::Commit::RolledOverFrom,
        rollover_fraction: Float,
        salesforce_opportunity_id: String,
        uniqueness_key: String
      }

    class Commit < Metronome::BaseModel
      attr_accessor id: String

      attr_accessor product: Metronome::Models::Commit::Product

      attr_accessor type: Metronome::Models::Commit::type_

      attr_reader access_schedule: Metronome::Models::ScheduleDuration?

      def access_schedule=: (Metronome::Models::ScheduleDuration) -> void

      attr_reader amount: Float?

      def amount=: (Float) -> void

      attr_reader applicable_contract_ids: Array[String]?

      def applicable_contract_ids=: (Array[String]) -> void

      attr_reader applicable_product_ids: Array[String]?

      def applicable_product_ids=: (Array[String]) -> void

      attr_reader applicable_product_tags: Array[String]?

      def applicable_product_tags=: (Array[String]) -> void

      attr_reader balance: Float?

      def balance=: (Float) -> void

      attr_reader contract: Metronome::Models::Commit::Contract?

      def contract=: (Metronome::Models::Commit::Contract) -> void

      attr_reader custom_fields: Hash[Symbol, String]?

      def custom_fields=: (Hash[Symbol, String]) -> void

      attr_reader description: String?

      def description=: (String) -> void

      attr_reader invoice_contract: Metronome::Models::Commit::InvoiceContract?

      def invoice_contract=: (
        Metronome::Models::Commit::InvoiceContract
      ) -> void

      attr_reader invoice_schedule: Metronome::Models::SchedulePointInTime?

      def invoice_schedule=: (Metronome::Models::SchedulePointInTime) -> void

      attr_reader ledger: Array[Metronome::Models::Commit::ledger]?

      def ledger=: (Array[Metronome::Models::Commit::ledger]) -> void

      attr_reader name: String?

      def name=: (String) -> void

      attr_reader netsuite_sales_order_id: String?

      def netsuite_sales_order_id=: (String) -> void

      attr_reader priority: Float?

      def priority=: (Float) -> void

      attr_reader rate_type: Metronome::Models::Commit::rate_type?

      def rate_type=: (Metronome::Models::Commit::rate_type) -> void

      attr_reader rolled_over_from: Metronome::Models::Commit::RolledOverFrom?

      def rolled_over_from=: (Metronome::Models::Commit::RolledOverFrom) -> void

      attr_reader rollover_fraction: Float?

      def rollover_fraction=: (Float) -> void

      attr_reader salesforce_opportunity_id: String?

      def salesforce_opportunity_id=: (String) -> void

      attr_reader uniqueness_key: String?

      def uniqueness_key=: (String) -> void

      def initialize:
        (
          id: String,
          product: Metronome::Models::Commit::Product,
          type: Metronome::Models::Commit::type_,
          access_schedule: Metronome::Models::ScheduleDuration,
          amount: Float,
          applicable_contract_ids: Array[String],
          applicable_product_ids: Array[String],
          applicable_product_tags: Array[String],
          balance: Float,
          contract: Metronome::Models::Commit::Contract,
          custom_fields: Hash[Symbol, String],
          description: String,
          invoice_contract: Metronome::Models::Commit::InvoiceContract,
          invoice_schedule: Metronome::Models::SchedulePointInTime,
          ledger: Array[Metronome::Models::Commit::ledger],
          name: String,
          netsuite_sales_order_id: String,
          priority: Float,
          rate_type: Metronome::Models::Commit::rate_type,
          rolled_over_from: Metronome::Models::Commit::RolledOverFrom,
          rollover_fraction: Float,
          salesforce_opportunity_id: String,
          uniqueness_key: String
        ) -> void
        | (?Metronome::Models::commit | Metronome::BaseModel data) -> void

      def to_hash: -> Metronome::Models::commit

      type product = { id: String, name: String }

      class Product < Metronome::BaseModel
        attr_accessor id: String

        attr_accessor name: String

        def initialize:
          (id: String, name: String) -> void
          | (
            ?Metronome::Models::Commit::product | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::Commit::product
      end

      type type_ = :PREPAID | :POSTPAID

      class Type < Metronome::Enum
        PREPAID: :PREPAID
        POSTPAID: :POSTPAID

        def self.values: -> Array[Metronome::Models::Commit::type_]
      end

      type contract = { id: String }

      class Contract < Metronome::BaseModel
        attr_accessor id: String

        def initialize:
          (id: String) -> void
          | (
            ?Metronome::Models::Commit::contract | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::Commit::contract
      end

      type invoice_contract = { id: String }

      class InvoiceContract < Metronome::BaseModel
        attr_accessor id: String

        def initialize:
          (id: String) -> void
          | (
            ?Metronome::Models::Commit::invoice_contract
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::Commit::invoice_contract
      end

      type ledger =
        Metronome::Models::Commit::Ledger::PrepaidCommitSegmentStartLedgerEntry
        | Metronome::Models::Commit::Ledger::PrepaidCommitAutomatedInvoiceDeductionLedgerEntry
        | Metronome::Models::Commit::Ledger::PrepaidCommitRolloverLedgerEntry
        | Metronome::Models::Commit::Ledger::PrepaidCommitExpirationLedgerEntry
        | Metronome::Models::Commit::Ledger::PrepaidCommitCanceledLedgerEntry
        | Metronome::Models::Commit::Ledger::PrepaidCommitCreditedLedgerEntry
        | Metronome::Models::Commit::Ledger::PostpaidCommitInitialBalanceLedgerEntry
        | Metronome::Models::Commit::Ledger::PostpaidCommitAutomatedInvoiceDeductionLedgerEntry
        | Metronome::Models::Commit::Ledger::PostpaidCommitRolloverLedgerEntry
        | Metronome::Models::Commit::Ledger::PostpaidCommitTrueupLedgerEntry
        | Metronome::Models::Commit::Ledger::PrepaidCommitManualLedgerEntry
        | Metronome::Models::Commit::Ledger::PostpaidCommitManualLedgerEntry
        | Metronome::Models::Commit::Ledger::PostpaidCommitExpirationLedgerEntry

      class Ledger < Metronome::Union
        type prepaid_commit_segment_start_ledger_entry =
          {
            amount: Float,
            segment_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PrepaidCommitSegmentStartLedgerEntry::type_
          }

        class PrepaidCommitSegmentStartLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor segment_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PrepaidCommitSegmentStartLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              segment_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PrepaidCommitSegmentStartLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::prepaid_commit_segment_start_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::prepaid_commit_segment_start_ledger_entry

          type type_ = :PREPAID_COMMIT_SEGMENT_START

          class Type < Metronome::Enum
            PREPAID_COMMIT_SEGMENT_START: :PREPAID_COMMIT_SEGMENT_START

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PrepaidCommitSegmentStartLedgerEntry::type_]
          end
        end

        type prepaid_commit_automated_invoice_deduction_ledger_entry =
          {
            amount: Float,
            invoice_id: String,
            segment_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PrepaidCommitAutomatedInvoiceDeductionLedgerEntry::type_
          }

        class PrepaidCommitAutomatedInvoiceDeductionLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor invoice_id: String

          attr_accessor segment_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PrepaidCommitAutomatedInvoiceDeductionLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              invoice_id: String,
              segment_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PrepaidCommitAutomatedInvoiceDeductionLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::prepaid_commit_automated_invoice_deduction_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::prepaid_commit_automated_invoice_deduction_ledger_entry

          type type_ = :PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

          class Type < Metronome::Enum
            PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION: :PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PrepaidCommitAutomatedInvoiceDeductionLedgerEntry::type_]
          end
        end

        type prepaid_commit_rollover_ledger_entry =
          {
            amount: Float,
            new_contract_id: String,
            segment_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PrepaidCommitRolloverLedgerEntry::type_
          }

        class PrepaidCommitRolloverLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor new_contract_id: String

          attr_accessor segment_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PrepaidCommitRolloverLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              new_contract_id: String,
              segment_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PrepaidCommitRolloverLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::prepaid_commit_rollover_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::prepaid_commit_rollover_ledger_entry

          type type_ = :PREPAID_COMMIT_ROLLOVER

          class Type < Metronome::Enum
            PREPAID_COMMIT_ROLLOVER: :PREPAID_COMMIT_ROLLOVER

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PrepaidCommitRolloverLedgerEntry::type_]
          end
        end

        type prepaid_commit_expiration_ledger_entry =
          {
            amount: Float,
            segment_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PrepaidCommitExpirationLedgerEntry::type_
          }

        class PrepaidCommitExpirationLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor segment_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PrepaidCommitExpirationLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              segment_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PrepaidCommitExpirationLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::prepaid_commit_expiration_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::prepaid_commit_expiration_ledger_entry

          type type_ = :PREPAID_COMMIT_EXPIRATION

          class Type < Metronome::Enum
            PREPAID_COMMIT_EXPIRATION: :PREPAID_COMMIT_EXPIRATION

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PrepaidCommitExpirationLedgerEntry::type_]
          end
        end

        type prepaid_commit_canceled_ledger_entry =
          {
            amount: Float,
            invoice_id: String,
            segment_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PrepaidCommitCanceledLedgerEntry::type_
          }

        class PrepaidCommitCanceledLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor invoice_id: String

          attr_accessor segment_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PrepaidCommitCanceledLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              invoice_id: String,
              segment_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PrepaidCommitCanceledLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::prepaid_commit_canceled_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::prepaid_commit_canceled_ledger_entry

          type type_ = :PREPAID_COMMIT_CANCELED

          class Type < Metronome::Enum
            PREPAID_COMMIT_CANCELED: :PREPAID_COMMIT_CANCELED

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PrepaidCommitCanceledLedgerEntry::type_]
          end
        end

        type prepaid_commit_credited_ledger_entry =
          {
            amount: Float,
            invoice_id: String,
            segment_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PrepaidCommitCreditedLedgerEntry::type_
          }

        class PrepaidCommitCreditedLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor invoice_id: String

          attr_accessor segment_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PrepaidCommitCreditedLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              invoice_id: String,
              segment_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PrepaidCommitCreditedLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::prepaid_commit_credited_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::prepaid_commit_credited_ledger_entry

          type type_ = :PREPAID_COMMIT_CREDITED

          class Type < Metronome::Enum
            PREPAID_COMMIT_CREDITED: :PREPAID_COMMIT_CREDITED

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PrepaidCommitCreditedLedgerEntry::type_]
          end
        end

        type postpaid_commit_initial_balance_ledger_entry =
          {
            amount: Float,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PostpaidCommitInitialBalanceLedgerEntry::type_
          }

        class PostpaidCommitInitialBalanceLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PostpaidCommitInitialBalanceLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PostpaidCommitInitialBalanceLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::postpaid_commit_initial_balance_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::postpaid_commit_initial_balance_ledger_entry

          type type_ = :POSTPAID_COMMIT_INITIAL_BALANCE

          class Type < Metronome::Enum
            POSTPAID_COMMIT_INITIAL_BALANCE: :POSTPAID_COMMIT_INITIAL_BALANCE

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PostpaidCommitInitialBalanceLedgerEntry::type_]
          end
        end

        type postpaid_commit_automated_invoice_deduction_ledger_entry =
          {
            amount: Float,
            invoice_id: String,
            segment_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PostpaidCommitAutomatedInvoiceDeductionLedgerEntry::type_
          }

        class PostpaidCommitAutomatedInvoiceDeductionLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor invoice_id: String

          attr_accessor segment_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PostpaidCommitAutomatedInvoiceDeductionLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              invoice_id: String,
              segment_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PostpaidCommitAutomatedInvoiceDeductionLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::postpaid_commit_automated_invoice_deduction_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::postpaid_commit_automated_invoice_deduction_ledger_entry

          type type_ = :POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

          class Type < Metronome::Enum
            POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION: :POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PostpaidCommitAutomatedInvoiceDeductionLedgerEntry::type_]
          end
        end

        type postpaid_commit_rollover_ledger_entry =
          {
            amount: Float,
            new_contract_id: String,
            segment_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PostpaidCommitRolloverLedgerEntry::type_
          }

        class PostpaidCommitRolloverLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor new_contract_id: String

          attr_accessor segment_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PostpaidCommitRolloverLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              new_contract_id: String,
              segment_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PostpaidCommitRolloverLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::postpaid_commit_rollover_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::postpaid_commit_rollover_ledger_entry

          type type_ = :POSTPAID_COMMIT_ROLLOVER

          class Type < Metronome::Enum
            POSTPAID_COMMIT_ROLLOVER: :POSTPAID_COMMIT_ROLLOVER

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PostpaidCommitRolloverLedgerEntry::type_]
          end
        end

        type postpaid_commit_trueup_ledger_entry =
          {
            amount: Float,
            invoice_id: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PostpaidCommitTrueupLedgerEntry::type_
          }

        class PostpaidCommitTrueupLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor invoice_id: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PostpaidCommitTrueupLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              invoice_id: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PostpaidCommitTrueupLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::postpaid_commit_trueup_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::postpaid_commit_trueup_ledger_entry

          type type_ = :POSTPAID_COMMIT_TRUEUP

          class Type < Metronome::Enum
            POSTPAID_COMMIT_TRUEUP: :POSTPAID_COMMIT_TRUEUP

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PostpaidCommitTrueupLedgerEntry::type_]
          end
        end

        type prepaid_commit_manual_ledger_entry =
          {
            amount: Float,
            reason: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PrepaidCommitManualLedgerEntry::type_
          }

        class PrepaidCommitManualLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor reason: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PrepaidCommitManualLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              reason: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PrepaidCommitManualLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::prepaid_commit_manual_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::prepaid_commit_manual_ledger_entry

          type type_ = :PREPAID_COMMIT_MANUAL

          class Type < Metronome::Enum
            PREPAID_COMMIT_MANUAL: :PREPAID_COMMIT_MANUAL

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PrepaidCommitManualLedgerEntry::type_]
          end
        end

        type postpaid_commit_manual_ledger_entry =
          {
            amount: Float,
            reason: String,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PostpaidCommitManualLedgerEntry::type_
          }

        class PostpaidCommitManualLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor reason: String

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PostpaidCommitManualLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              reason: String,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PostpaidCommitManualLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::postpaid_commit_manual_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::postpaid_commit_manual_ledger_entry

          type type_ = :POSTPAID_COMMIT_MANUAL

          class Type < Metronome::Enum
            POSTPAID_COMMIT_MANUAL: :POSTPAID_COMMIT_MANUAL

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PostpaidCommitManualLedgerEntry::type_]
          end
        end

        type postpaid_commit_expiration_ledger_entry =
          {
            amount: Float,
            timestamp: Time,
            type: Metronome::Models::Commit::Ledger::PostpaidCommitExpirationLedgerEntry::type_
          }

        class PostpaidCommitExpirationLedgerEntry < Metronome::BaseModel
          attr_accessor amount: Float

          attr_accessor timestamp: Time

          attr_accessor type: Metronome::Models::Commit::Ledger::PostpaidCommitExpirationLedgerEntry::type_

          def initialize:
            (
              amount: Float,
              timestamp: Time,
              type: Metronome::Models::Commit::Ledger::PostpaidCommitExpirationLedgerEntry::type_
            ) -> void
            | (
              ?Metronome::Models::Commit::Ledger::postpaid_commit_expiration_ledger_entry
              | Metronome::BaseModel data
            ) -> void

          def to_hash: -> Metronome::Models::Commit::Ledger::postpaid_commit_expiration_ledger_entry

          type type_ = :POSTPAID_COMMIT_EXPIRATION

          class Type < Metronome::Enum
            POSTPAID_COMMIT_EXPIRATION: :POSTPAID_COMMIT_EXPIRATION

            def self.values: -> Array[Metronome::Models::Commit::Ledger::PostpaidCommitExpirationLedgerEntry::type_]
          end
        end

        private def self.variants: -> [[nil, Metronome::Models::Commit::Ledger::PrepaidCommitSegmentStartLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PrepaidCommitAutomatedInvoiceDeductionLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PrepaidCommitRolloverLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PrepaidCommitExpirationLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PrepaidCommitCanceledLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PrepaidCommitCreditedLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PostpaidCommitInitialBalanceLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PostpaidCommitAutomatedInvoiceDeductionLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PostpaidCommitRolloverLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PostpaidCommitTrueupLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PrepaidCommitManualLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PostpaidCommitManualLedgerEntry], [nil, Metronome::Models::Commit::Ledger::PostpaidCommitExpirationLedgerEntry]]
      end

      type rate_type = :COMMIT_RATE | :LIST_RATE

      class RateType < Metronome::Enum
        COMMIT_RATE: :COMMIT_RATE
        LIST_RATE: :LIST_RATE

        def self.values: -> Array[Metronome::Models::Commit::rate_type]
      end

      type rolled_over_from = { commit_id: String, contract_id: String }

      class RolledOverFrom < Metronome::BaseModel
        attr_accessor commit_id: String

        attr_accessor contract_id: String

        def initialize:
          (commit_id: String, contract_id: String) -> void
          | (
            ?Metronome::Models::Commit::rolled_over_from
            | Metronome::BaseModel data
          ) -> void

        def to_hash: -> Metronome::Models::Commit::rolled_over_from
      end
    end
  end
end
