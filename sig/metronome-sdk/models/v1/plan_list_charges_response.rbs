module MetronomeSDK
  module Models
    module V1
      type plan_list_charges_response =
        {
          id: String,
          charge_type: MetronomeSDK::Models::V1::PlanListChargesResponse::charge_type,
          credit_type: MetronomeSDK::Models::CreditTypeData,
          custom_fields: ::Hash[Symbol, String],
          name: String,
          prices: ::Array[MetronomeSDK::Models::V1::PlanListChargesResponse::Price],
          product_id: String,
          product_name: String,
          quantity: Float,
          start_period: Float,
          tier_reset_frequency: Float,
          unit_conversion: MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion
        }

      class PlanListChargesResponse < MetronomeSDK::BaseModel
        attr_accessor id: String

        attr_accessor charge_type: MetronomeSDK::Models::V1::PlanListChargesResponse::charge_type

        attr_accessor credit_type: MetronomeSDK::Models::CreditTypeData

        attr_accessor custom_fields: ::Hash[Symbol, String]

        attr_accessor name: String

        attr_accessor prices: ::Array[MetronomeSDK::Models::V1::PlanListChargesResponse::Price]

        attr_accessor product_id: String

        attr_accessor product_name: String

        attr_reader quantity: Float?

        def quantity=: (Float) -> Float

        attr_reader start_period: Float?

        def start_period=: (Float) -> Float

        attr_reader tier_reset_frequency: Float?

        def tier_reset_frequency=: (Float) -> Float

        attr_reader unit_conversion: MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion?

        def unit_conversion=: (
          MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion
        ) -> MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion

        def initialize:
          (
            id: String,
            charge_type: MetronomeSDK::Models::V1::PlanListChargesResponse::charge_type,
            credit_type: MetronomeSDK::Models::CreditTypeData,
            custom_fields: ::Hash[Symbol, String],
            name: String,
            prices: ::Array[MetronomeSDK::Models::V1::PlanListChargesResponse::Price],
            product_id: String,
            product_name: String,
            quantity: Float,
            start_period: Float,
            tier_reset_frequency: Float,
            unit_conversion: MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion
          ) -> void
          | (
            ?MetronomeSDK::Models::V1::plan_list_charges_response
            | MetronomeSDK::BaseModel data
          ) -> void

        def to_hash: -> MetronomeSDK::Models::V1::plan_list_charges_response

        type charge_type = :usage | :fixed | :composite | :minimum | :seat

        class ChargeType < MetronomeSDK::Enum
          USAGE: :usage
          FIXED: :fixed
          COMPOSITE: :composite
          MINIMUM: :minimum
          SEAT: :seat

          def self.values: -> ::Array[MetronomeSDK::Models::V1::PlanListChargesResponse::charge_type]
        end

        type price =
          {
            tier: Float,
            value: Float,
            collection_interval: Float,
            collection_schedule: String,
            quantity: Float
          }

        class Price < MetronomeSDK::BaseModel
          attr_accessor tier: Float

          attr_accessor value: Float

          attr_reader collection_interval: Float?

          def collection_interval=: (Float) -> Float

          attr_reader collection_schedule: String?

          def collection_schedule=: (String) -> String

          attr_reader quantity: Float?

          def quantity=: (Float) -> Float

          def initialize:
            (
              tier: Float,
              value: Float,
              collection_interval: Float,
              collection_schedule: String,
              quantity: Float
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::PlanListChargesResponse::price
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::PlanListChargesResponse::price
        end

        type unit_conversion =
          {
            division_factor: Float,
            rounding_behavior: MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion::rounding_behavior
          }

        class UnitConversion < MetronomeSDK::BaseModel
          attr_accessor division_factor: Float

          attr_reader rounding_behavior: MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion::rounding_behavior?

          def rounding_behavior=: (
            MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion::rounding_behavior
          ) -> MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion::rounding_behavior

          def initialize:
            (
              division_factor: Float,
              rounding_behavior: MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion::rounding_behavior
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::PlanListChargesResponse::unit_conversion
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::PlanListChargesResponse::unit_conversion

          type rounding_behavior = :floor | :ceiling

          class RoundingBehavior < MetronomeSDK::Enum
            FLOOR: :floor
            CEILING: :ceiling

            def self.values: -> ::Array[MetronomeSDK::Models::V1::PlanListChargesResponse::UnitConversion::rounding_behavior]
          end
        end
      end
    end
  end
end
