module MetronomeSDK
  module Models
    module V1
      type contract_create_params =
        {
          customer_id: String,
          starting_at: Time,
          billing_provider_configuration: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration,
          commits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit],
          credit_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration,
          credits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit],
          custom_fields: ::Hash[Symbol, String],
          discounts: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount],
          ending_before: Time,
          multiplier_override_prioritization: MetronomeSDK::Models::V1::ContractCreateParams::multiplier_override_prioritization,
          name: String,
          net_payment_terms_days: Float,
          netsuite_sales_order_id: String,
          overrides: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override],
          professional_services: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ProfessionalService],
          rate_card_alias: String,
          rate_card_id: String,
          recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit],
          recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit],
          reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty],
          salesforce_opportunity_id: String,
          scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge],
          scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractCreateParams::scheduled_charges_on_usage_invoices,
          spend_threshold_configuration: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration,
          total_contract_value: Float,
          transition: MetronomeSDK::Models::V1::ContractCreateParams::Transition,
          uniqueness_key: String,
          usage_filter: MetronomeSDK::Models::BaseUsageFilter,
          usage_statement_schedule: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule
        }
        & MetronomeSDK::request_parameters

      class ContractCreateParams < MetronomeSDK::BaseModel
        extend MetronomeSDK::RequestParameters::Converter
        include MetronomeSDK::RequestParameters

        attr_accessor customer_id: String

        attr_accessor starting_at: Time

        attr_reader billing_provider_configuration: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration?

        def billing_provider_configuration=: (
          MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration
        ) -> MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration

        attr_reader commits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit]?

        def commits=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit]

        attr_reader credit_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration?

        def credit_balance_threshold_configuration=: (
          MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration
        ) -> MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration

        attr_reader credits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit]?

        def credits=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit]

        attr_reader custom_fields: ::Hash[Symbol, String]?

        def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_reader discounts: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount]?

        def discounts=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount]

        attr_reader ending_before: Time?

        def ending_before=: (Time) -> Time

        attr_reader multiplier_override_prioritization: MetronomeSDK::Models::V1::ContractCreateParams::multiplier_override_prioritization?

        def multiplier_override_prioritization=: (
          MetronomeSDK::Models::V1::ContractCreateParams::multiplier_override_prioritization
        ) -> MetronomeSDK::Models::V1::ContractCreateParams::multiplier_override_prioritization

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader net_payment_terms_days: Float?

        def net_payment_terms_days=: (Float) -> Float

        attr_reader netsuite_sales_order_id: String?

        def netsuite_sales_order_id=: (String) -> String

        attr_reader overrides: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override]?

        def overrides=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override]

        attr_reader professional_services: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ProfessionalService]?

        def professional_services=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ProfessionalService]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ProfessionalService]

        attr_reader rate_card_alias: String?

        def rate_card_alias=: (String) -> String

        attr_reader rate_card_id: String?

        def rate_card_id=: (String) -> String

        attr_reader recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit]?

        def recurring_commits=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit]

        attr_reader recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit]?

        def recurring_credits=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit]

        attr_reader reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty]?

        def reseller_royalties=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty]

        attr_reader salesforce_opportunity_id: String?

        def salesforce_opportunity_id=: (String) -> String

        attr_reader scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge]?

        def scheduled_charges=: (
          ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge]
        ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge]

        attr_reader scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractCreateParams::scheduled_charges_on_usage_invoices?

        def scheduled_charges_on_usage_invoices=: (
          MetronomeSDK::Models::V1::ContractCreateParams::scheduled_charges_on_usage_invoices
        ) -> MetronomeSDK::Models::V1::ContractCreateParams::scheduled_charges_on_usage_invoices

        attr_reader spend_threshold_configuration: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration?

        def spend_threshold_configuration=: (
          MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration
        ) -> MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration

        attr_reader total_contract_value: Float?

        def total_contract_value=: (Float) -> Float

        attr_reader transition: MetronomeSDK::Models::V1::ContractCreateParams::Transition?

        def transition=: (
          MetronomeSDK::Models::V1::ContractCreateParams::Transition
        ) -> MetronomeSDK::Models::V1::ContractCreateParams::Transition

        attr_reader uniqueness_key: String?

        def uniqueness_key=: (String) -> String

        attr_reader usage_filter: MetronomeSDK::Models::BaseUsageFilter?

        def usage_filter=: (
          MetronomeSDK::Models::BaseUsageFilter
        ) -> MetronomeSDK::Models::BaseUsageFilter

        attr_reader usage_statement_schedule: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule?

        def usage_statement_schedule=: (
          MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule
        ) -> MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule

        def initialize:
          (
            customer_id: String,
            starting_at: Time,
            billing_provider_configuration: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration,
            commits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit],
            credit_balance_threshold_configuration: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration,
            credits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit],
            custom_fields: ::Hash[Symbol, String],
            discounts: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount],
            ending_before: Time,
            multiplier_override_prioritization: MetronomeSDK::Models::V1::ContractCreateParams::multiplier_override_prioritization,
            name: String,
            net_payment_terms_days: Float,
            netsuite_sales_order_id: String,
            overrides: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override],
            professional_services: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ProfessionalService],
            rate_card_alias: String,
            rate_card_id: String,
            recurring_commits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit],
            recurring_credits: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit],
            reseller_royalties: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty],
            salesforce_opportunity_id: String,
            scheduled_charges: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge],
            scheduled_charges_on_usage_invoices: MetronomeSDK::Models::V1::ContractCreateParams::scheduled_charges_on_usage_invoices,
            spend_threshold_configuration: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration,
            total_contract_value: Float,
            transition: MetronomeSDK::Models::V1::ContractCreateParams::Transition,
            uniqueness_key: String,
            usage_filter: MetronomeSDK::Models::BaseUsageFilter,
            usage_statement_schedule: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule,
            request_options: MetronomeSDK::request_opts
          ) -> void
          | (
            ?MetronomeSDK::Models::V1::contract_create_params
            | MetronomeSDK::BaseModel data
          ) -> void

        def to_hash: -> MetronomeSDK::Models::V1::contract_create_params

        type billing_provider_configuration =
          {
            billing_provider: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::billing_provider,
            billing_provider_configuration_id: String,
            delivery_method: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::delivery_method
          }

        class BillingProviderConfiguration < MetronomeSDK::BaseModel
          attr_reader billing_provider: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::billing_provider?

          def billing_provider=: (
            MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::billing_provider
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::billing_provider

          attr_reader billing_provider_configuration_id: String?

          def billing_provider_configuration_id=: (String) -> String

          attr_reader delivery_method: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::delivery_method?

          def delivery_method=: (
            MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::delivery_method
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::delivery_method

          def initialize:
            (
              billing_provider: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::billing_provider,
              billing_provider_configuration_id: String,
              delivery_method: MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::delivery_method
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::billing_provider_configuration
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::billing_provider_configuration

          type billing_provider =
            :aws_marketplace
            | :azure_marketplace
            | :gcp_marketplace
            | :stripe
            | :netsuite

          class BillingProvider < MetronomeSDK::Enum
            AWS_MARKETPLACE: :aws_marketplace
            AZURE_MARKETPLACE: :azure_marketplace
            GCP_MARKETPLACE: :gcp_marketplace
            STRIPE: :stripe
            NETSUITE: :netsuite

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::billing_provider]
          end

          type delivery_method =
            :direct_to_billing_provider | :aws_sqs | :tackle | :aws_sns

          class DeliveryMethod < MetronomeSDK::Enum
            DIRECT_TO_BILLING_PROVIDER: :direct_to_billing_provider
            AWS_SQS: :aws_sqs
            TACKLE: :tackle
            AWS_SNS: :aws_sns

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::BillingProviderConfiguration::delivery_method]
          end
        end

        type commit =
          {
            product_id: String,
            type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::type_,
            access_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule,
            amount: Float,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            custom_fields: ::Hash[Symbol, String],
            description: String,
            invoice_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule,
            name: String,
            netsuite_sales_order_id: String,
            payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig,
            priority: Float,
            rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::rate_type,
            rollover_fraction: Float,
            temporary_id: String
          }

        class Commit < MetronomeSDK::BaseModel
          attr_accessor product_id: String

          attr_accessor type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::type_

          attr_reader access_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule?

          def access_schedule=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule

          attr_reader amount: Float?

          def amount=: (Float) -> Float

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader invoice_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule?

          def invoice_schedule=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          attr_reader payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig?

          def payment_gate_config=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig

          attr_reader priority: Float?

          def priority=: (Float) -> Float

          attr_reader rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::rate_type?

          def rate_type=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Commit::rate_type
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::rate_type

          attr_reader rollover_fraction: Float?

          def rollover_fraction=: (Float) -> Float

          attr_reader temporary_id: String?

          def temporary_id=: (String) -> String

          def initialize:
            (
              product_id: String,
              type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::type_,
              access_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule,
              amount: Float,
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              custom_fields: ::Hash[Symbol, String],
              description: String,
              invoice_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule,
              name: String,
              netsuite_sales_order_id: String,
              payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig,
              priority: Float,
              rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::rate_type,
              rollover_fraction: Float,
              temporary_id: String
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::commit
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::commit

          type type_ = :PREPAID | :POSTPAID

          class Type < MetronomeSDK::Enum
            PREPAID: :PREPAID
            POSTPAID: :POSTPAID

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::type_]
          end

          type access_schedule =
            {
              schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule::ScheduleItem],
              credit_type_id: String
            }

          class AccessSchedule < MetronomeSDK::BaseModel
            attr_accessor schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule::ScheduleItem]

            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            def initialize:
              (
                schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule::ScheduleItem],
                credit_type_id: String
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Commit::access_schedule
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::access_schedule

            type schedule_item =
              { amount: Float, ending_before: Time, starting_at: Time }

            class ScheduleItem < MetronomeSDK::BaseModel
              attr_accessor amount: Float

              attr_accessor ending_before: Time

              attr_accessor starting_at: Time

              def initialize:
                (amount: Float, ending_before: Time, starting_at: Time) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule::schedule_item
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::AccessSchedule::schedule_item
            end
          end

          type invoice_schedule =
            {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::ScheduleItem]
            }

          class InvoiceSchedule < MetronomeSDK::BaseModel
            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule?

            def recurring_schedule=: (
              MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule

            attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::ScheduleItem]?

            def schedule_items=: (
              ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::ScheduleItem]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::ScheduleItem]

            def initialize:
              (
                credit_type_id: String,
                recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule,
                schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::ScheduleItem]
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Commit::invoice_schedule
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::invoice_schedule

            type recurring_schedule =
              {
                amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class RecurringSchedule < MetronomeSDK::BaseModel
              attr_accessor amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule::amount_distribution

              attr_accessor ending_before: Time

              attr_accessor frequency: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule::frequency

              attr_accessor starting_at: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize:
                (
                  amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule::amount_distribution,
                  ending_before: Time,
                  frequency: MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule::frequency,
                  starting_at: Time,
                  amount: Float,
                  quantity: Float,
                  unit_price: Float
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::recurring_schedule
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::recurring_schedule

              type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

              class AmountDistribution < MetronomeSDK::Enum
                DIVIDED: :DIVIDED
                DIVIDED_ROUNDED: :DIVIDED_ROUNDED
                EACH: :EACH

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule::amount_distribution]
              end

              type frequency = :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL

              class Frequency < MetronomeSDK::Enum
                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                SEMI_ANNUAL: :SEMI_ANNUAL
                ANNUAL: :ANNUAL

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::RecurringSchedule::frequency]
              end
            end

            type schedule_item =
              {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class ScheduleItem < MetronomeSDK::BaseModel
              attr_accessor timestamp: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize:
                (
                  timestamp: Time,
                  amount: Float,
                  quantity: Float,
                  unit_price: Float
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::schedule_item
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::InvoiceSchedule::schedule_item
            end
          end

          type payment_gate_config =
            {
              payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::tax_type
            }

          class PaymentGateConfig < MetronomeSDK::BaseModel
            attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::payment_gate_type

            attr_reader stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig?

            def stripe_config=: (
              MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig

            attr_reader tax_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::tax_type?

            def tax_type=: (
              MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::tax_type
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::tax_type

            def initialize:
              (
                payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::payment_gate_type,
                stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig,
                tax_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::tax_type
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Commit::payment_gate_config
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::payment_gate_config

            type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

            class PaymentGateType < MetronomeSDK::Enum
              NONE: :NONE
              STRIPE: :STRIPE
              EXTERNAL: :EXTERNAL

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::payment_gate_type]
            end

            type stripe_config =
              {
                payment_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig::payment_type
              }

            class StripeConfig < MetronomeSDK::BaseModel
              attr_accessor payment_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig::payment_type

              def initialize:
                (
                  payment_type: MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig::payment_type
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::stripe_config
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::stripe_config

              type payment_type = :INVOICE | :PAYMENT_INTENT

              class PaymentType < MetronomeSDK::Enum
                INVOICE: :INVOICE
                PAYMENT_INTENT: :PAYMENT_INTENT

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::StripeConfig::payment_type]
              end
            end

            type tax_type = :NONE | :STRIPE

            class TaxType < MetronomeSDK::Enum
              NONE: :NONE
              STRIPE: :STRIPE

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::PaymentGateConfig::tax_type]
            end
          end

          type rate_type = :COMMIT_RATE | :LIST_RATE

          class RateType < MetronomeSDK::Enum
            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Commit::rate_type]
          end
        end

        type credit_balance_threshold_configuration =
          {
            commit: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig,
            recharge_to_amount: Float,
            threshold_amount: Float
          }

        class CreditBalanceThresholdConfiguration < MetronomeSDK::BaseModel
          attr_accessor commit: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::Commit

          attr_accessor is_enabled: bool

          attr_accessor payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig

          attr_accessor recharge_to_amount: Float

          attr_accessor threshold_amount: Float

          def initialize:
            (
              commit: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::Commit,
              is_enabled: bool,
              payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig,
              recharge_to_amount: Float,
              threshold_amount: Float
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::credit_balance_threshold_configuration
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::credit_balance_threshold_configuration

          type commit =
            {
              product_id: String,
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              description: String,
              name: String
            }

          class Commit < MetronomeSDK::BaseModel
            attr_accessor product_id: String

            attr_reader applicable_product_ids: ::Array[String]?

            def applicable_product_ids=: (::Array[String]) -> ::Array[String]

            attr_reader applicable_product_tags: ::Array[String]?

            def applicable_product_tags=: (::Array[String]) -> ::Array[String]

            attr_reader description: String?

            def description=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            def initialize:
              (
                product_id: String,
                applicable_product_ids: ::Array[String],
                applicable_product_tags: ::Array[String],
                description: String,
                name: String
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::commit
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::commit
          end

          type payment_gate_config =
            {
              payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            }

          class PaymentGateConfig < MetronomeSDK::BaseModel
            attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type

            attr_reader stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig?

            def stripe_config=: (
              MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig

            attr_reader tax_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::tax_type?

            def tax_type=: (
              MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::tax_type

            def initialize:
              (
                payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig,
                tax_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::tax_type
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::payment_gate_config
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::payment_gate_config

            type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

            class PaymentGateType < MetronomeSDK::Enum
              NONE: :NONE
              STRIPE: :STRIPE
              EXTERNAL: :EXTERNAL

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::payment_gate_type]
            end

            type stripe_config =
              {
                payment_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

            class StripeConfig < MetronomeSDK::BaseModel
              attr_accessor payment_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

              def initialize:
                (
                  payment_type: MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::stripe_config
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::stripe_config

              type payment_type = :INVOICE | :PAYMENT_INTENT

              class PaymentType < MetronomeSDK::Enum
                INVOICE: :INVOICE
                PAYMENT_INTENT: :PAYMENT_INTENT

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
              end
            end

            type tax_type = :NONE | :STRIPE

            class TaxType < MetronomeSDK::Enum
              NONE: :NONE
              STRIPE: :STRIPE

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::CreditBalanceThresholdConfiguration::PaymentGateConfig::tax_type]
            end
          end
        end

        type credit =
          {
            access_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Credit::AccessSchedule,
            product_id: String,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            custom_fields: ::Hash[Symbol, String],
            description: String,
            name: String,
            netsuite_sales_order_id: String,
            priority: Float,
            rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Credit::rate_type
          }

        class Credit < MetronomeSDK::BaseModel
          attr_accessor access_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Credit::AccessSchedule

          attr_accessor product_id: String

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          attr_reader priority: Float?

          def priority=: (Float) -> Float

          attr_reader rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Credit::rate_type?

          def rate_type=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Credit::rate_type
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Credit::rate_type

          def initialize:
            (
              access_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Credit::AccessSchedule,
              product_id: String,
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              custom_fields: ::Hash[Symbol, String],
              description: String,
              name: String,
              netsuite_sales_order_id: String,
              priority: Float,
              rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Credit::rate_type
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::credit
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::credit

          type access_schedule =
            {
              schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit::AccessSchedule::ScheduleItem],
              credit_type_id: String
            }

          class AccessSchedule < MetronomeSDK::BaseModel
            attr_accessor schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit::AccessSchedule::ScheduleItem]

            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            def initialize:
              (
                schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit::AccessSchedule::ScheduleItem],
                credit_type_id: String
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Credit::access_schedule
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Credit::access_schedule

            type schedule_item =
              { amount: Float, ending_before: Time, starting_at: Time }

            class ScheduleItem < MetronomeSDK::BaseModel
              attr_accessor amount: Float

              attr_accessor ending_before: Time

              attr_accessor starting_at: Time

              def initialize:
                (amount: Float, ending_before: Time, starting_at: Time) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::Credit::AccessSchedule::schedule_item
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Credit::AccessSchedule::schedule_item
            end
          end

          type rate_type = :COMMIT_RATE | :LIST_RATE

          class RateType < MetronomeSDK::Enum
            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Credit::rate_type]
          end
        end

        type discount =
          {
            product_id: String,
            schedule: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule,
            custom_fields: ::Hash[Symbol, String],
            name: String,
            netsuite_sales_order_id: String
          }

        class Discount < MetronomeSDK::BaseModel
          attr_accessor product_id: String

          attr_accessor schedule: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          def initialize:
            (
              product_id: String,
              schedule: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule,
              custom_fields: ::Hash[Symbol, String],
              name: String,
              netsuite_sales_order_id: String
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::discount
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::discount

          type schedule =
            {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::ScheduleItem]
            }

          class Schedule < MetronomeSDK::BaseModel
            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule?

            def recurring_schedule=: (
              MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule

            attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::ScheduleItem]?

            def schedule_items=: (
              ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::ScheduleItem]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::ScheduleItem]

            def initialize:
              (
                credit_type_id: String,
                recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule,
                schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::ScheduleItem]
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Discount::schedule
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Discount::schedule

            type recurring_schedule =
              {
                amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class RecurringSchedule < MetronomeSDK::BaseModel
              attr_accessor amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule::amount_distribution

              attr_accessor ending_before: Time

              attr_accessor frequency: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule::frequency

              attr_accessor starting_at: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize:
                (
                  amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule::amount_distribution,
                  ending_before: Time,
                  frequency: MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule::frequency,
                  starting_at: Time,
                  amount: Float,
                  quantity: Float,
                  unit_price: Float
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::recurring_schedule
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::recurring_schedule

              type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

              class AmountDistribution < MetronomeSDK::Enum
                DIVIDED: :DIVIDED
                DIVIDED_ROUNDED: :DIVIDED_ROUNDED
                EACH: :EACH

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule::amount_distribution]
              end

              type frequency = :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL

              class Frequency < MetronomeSDK::Enum
                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                SEMI_ANNUAL: :SEMI_ANNUAL
                ANNUAL: :ANNUAL

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::RecurringSchedule::frequency]
              end
            end

            type schedule_item =
              {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class ScheduleItem < MetronomeSDK::BaseModel
              attr_accessor timestamp: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize:
                (
                  timestamp: Time,
                  amount: Float,
                  quantity: Float,
                  unit_price: Float
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::schedule_item
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Discount::Schedule::schedule_item
            end
          end
        end

        type multiplier_override_prioritization = :LOWEST_MULTIPLIER | :EXPLICIT

        class MultiplierOverridePrioritization < MetronomeSDK::Enum
          LOWEST_MULTIPLIER: :LOWEST_MULTIPLIER
          EXPLICIT: :EXPLICIT

          def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::multiplier_override_prioritization]
        end

        type override =
          {
            starting_at: Time,
            applicable_product_tags: ::Array[String],
            ending_before: Time,
            entitled: bool,
            is_commit_specific: bool,
            multiplier: Float,
            override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::OverrideSpecifier],
            overwrite_rate: MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate,
            priority: Float,
            product_id: String,
            target: MetronomeSDK::Models::V1::ContractCreateParams::Override::target,
            tiers: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::Tier],
            type: MetronomeSDK::Models::V1::ContractCreateParams::Override::type_
          }

        class Override < MetronomeSDK::BaseModel
          attr_accessor starting_at: Time

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader entitled: bool?

          def entitled=: (bool) -> bool

          attr_reader is_commit_specific: bool?

          def is_commit_specific=: (bool) -> bool

          attr_reader multiplier: Float?

          def multiplier=: (Float) -> Float

          attr_reader override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::OverrideSpecifier]?

          def override_specifiers=: (
            ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::OverrideSpecifier]
          ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::OverrideSpecifier]

          attr_reader overwrite_rate: MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate?

          def overwrite_rate=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate

          attr_reader priority: Float?

          def priority=: (Float) -> Float

          attr_reader product_id: String?

          def product_id=: (String) -> String

          attr_reader target: MetronomeSDK::Models::V1::ContractCreateParams::Override::target?

          def target=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Override::target
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Override::target

          attr_reader tiers: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::Tier]?

          def tiers=: (
            ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::Tier]
          ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::Tier]

          attr_reader type: MetronomeSDK::Models::V1::ContractCreateParams::Override::type_?

          def type=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Override::type_
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Override::type_

          def initialize:
            (
              starting_at: Time,
              applicable_product_tags: ::Array[String],
              ending_before: Time,
              entitled: bool,
              is_commit_specific: bool,
              multiplier: Float,
              override_specifiers: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::OverrideSpecifier],
              overwrite_rate: MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate,
              priority: Float,
              product_id: String,
              target: MetronomeSDK::Models::V1::ContractCreateParams::Override::target,
              tiers: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::Tier],
              type: MetronomeSDK::Models::V1::ContractCreateParams::Override::type_
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::override
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::override

          type override_specifier =
            {
              commit_ids: ::Array[String],
              presentation_group_values: ::Hash[Symbol, String],
              pricing_group_values: ::Hash[Symbol, String],
              product_id: String,
              product_tags: ::Array[String],
              recurring_commit_ids: ::Array[String],
              recurring_credit_ids: ::Array[String]
            }

          class OverrideSpecifier < MetronomeSDK::BaseModel
            attr_reader commit_ids: ::Array[String]?

            def commit_ids=: (::Array[String]) -> ::Array[String]

            attr_reader presentation_group_values: ::Hash[Symbol, String]?

            def presentation_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader pricing_group_values: ::Hash[Symbol, String]?

            def pricing_group_values=: (
              ::Hash[Symbol, String]
            ) -> ::Hash[Symbol, String]

            attr_reader product_id: String?

            def product_id=: (String) -> String

            attr_reader product_tags: ::Array[String]?

            def product_tags=: (::Array[String]) -> ::Array[String]

            attr_reader recurring_commit_ids: ::Array[String]?

            def recurring_commit_ids=: (::Array[String]) -> ::Array[String]

            attr_reader recurring_credit_ids: ::Array[String]?

            def recurring_credit_ids=: (::Array[String]) -> ::Array[String]

            def initialize:
              (
                commit_ids: ::Array[String],
                presentation_group_values: ::Hash[Symbol, String],
                pricing_group_values: ::Hash[Symbol, String],
                product_id: String,
                product_tags: ::Array[String],
                recurring_commit_ids: ::Array[String],
                recurring_credit_ids: ::Array[String]
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Override::override_specifier
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Override::override_specifier
          end

          type overwrite_rate =
            {
              rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate::rate_type,
              credit_type_id: String,
              custom_rate: ::Hash[Symbol, top],
              is_prorated: bool,
              price: Float,
              quantity: Float,
              tiers: ::Array[MetronomeSDK::Models::Tier]
            }

          class OverwriteRate < MetronomeSDK::BaseModel
            attr_accessor rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate::rate_type

            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader custom_rate: ::Hash[Symbol, top]?

            def custom_rate=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

            attr_reader is_prorated: bool?

            def is_prorated=: (bool) -> bool

            attr_reader price: Float?

            def price=: (Float) -> Float

            attr_reader quantity: Float?

            def quantity=: (Float) -> Float

            attr_reader tiers: ::Array[MetronomeSDK::Models::Tier]?

            def tiers=: (
              ::Array[MetronomeSDK::Models::Tier]
            ) -> ::Array[MetronomeSDK::Models::Tier]

            def initialize:
              (
                rate_type: MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate::rate_type,
                credit_type_id: String,
                custom_rate: ::Hash[Symbol, top],
                is_prorated: bool,
                price: Float,
                quantity: Float,
                tiers: ::Array[MetronomeSDK::Models::Tier]
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Override::overwrite_rate
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Override::overwrite_rate

            type rate_type =
              :FLAT | :PERCENTAGE | :SUBSCRIPTION | :TIERED | :CUSTOM

            class RateType < MetronomeSDK::Enum
              FLAT: :FLAT
              PERCENTAGE: :PERCENTAGE
              SUBSCRIPTION: :SUBSCRIPTION
              TIERED: :TIERED
              CUSTOM: :CUSTOM

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::OverwriteRate::rate_type]
            end
          end

          type target = :COMMIT_RATE | :LIST_RATE

          class Target < MetronomeSDK::Enum
            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::target]
          end

          type tier = { multiplier: Float, size: Float }

          class Tier < MetronomeSDK::BaseModel
            attr_accessor multiplier: Float

            attr_reader size: Float?

            def size=: (Float) -> Float

            def initialize:
              (multiplier: Float, size: Float) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Override::tier
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Override::tier
          end

          type type_ = :OVERWRITE | :MULTIPLIER | :TIERED

          class Type < MetronomeSDK::Enum
            OVERWRITE: :OVERWRITE
            MULTIPLIER: :MULTIPLIER
            TIERED: :TIERED

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Override::type_]
          end
        end

        type professional_service =
          {
            max_amount: Float,
            product_id: String,
            quantity: Float,
            unit_price: Float,
            custom_fields: ::Hash[Symbol, String],
            description: String,
            netsuite_sales_order_id: String
          }

        class ProfessionalService < MetronomeSDK::BaseModel
          attr_accessor max_amount: Float

          attr_accessor product_id: String

          attr_accessor quantity: Float

          attr_accessor unit_price: Float

          attr_reader custom_fields: ::Hash[Symbol, String]?

          def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          def initialize:
            (
              max_amount: Float,
              product_id: String,
              quantity: Float,
              unit_price: Float,
              custom_fields: ::Hash[Symbol, String],
              description: String,
              netsuite_sales_order_id: String
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::professional_service
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::professional_service
        end

        type recurring_commit =
          {
            access_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::AccessAmount,
            commit_duration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::CommitDuration,
            priority: Float,
            product_id: String,
            starting_at: Time,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            description: String,
            ending_before: Time,
            invoice_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::InvoiceAmount,
            name: String,
            netsuite_sales_order_id: String,
            proration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::proration,
            rate_type: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::rate_type,
            recurrence_frequency: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::recurrence_frequency,
            rollover_fraction: Float,
            temporary_id: String
          }

        class RecurringCommit < MetronomeSDK::BaseModel
          attr_accessor access_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::AccessAmount

          attr_accessor commit_duration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::CommitDuration

          attr_accessor priority: Float

          attr_accessor product_id: String

          attr_accessor starting_at: Time

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader invoice_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::InvoiceAmount?

          def invoice_amount=: (
            MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::InvoiceAmount
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::InvoiceAmount

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          attr_reader proration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::proration?

          def proration=: (
            MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::proration
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::proration

          attr_reader rate_type: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::rate_type?

          def rate_type=: (
            MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::rate_type
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::rate_type

          attr_reader recurrence_frequency: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::recurrence_frequency?

          def recurrence_frequency=: (
            MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::recurrence_frequency
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::recurrence_frequency

          attr_reader rollover_fraction: Float?

          def rollover_fraction=: (Float) -> Float

          attr_reader temporary_id: String?

          def temporary_id=: (String) -> String

          def initialize:
            (
              access_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::AccessAmount,
              commit_duration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::CommitDuration,
              priority: Float,
              product_id: String,
              starting_at: Time,
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              description: String,
              ending_before: Time,
              invoice_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::InvoiceAmount,
              name: String,
              netsuite_sales_order_id: String,
              proration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::proration,
              rate_type: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::rate_type,
              recurrence_frequency: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::recurrence_frequency,
              rollover_fraction: Float,
              temporary_id: String
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::recurring_commit
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::recurring_commit

          type access_amount =
            { credit_type_id: String, quantity: Float, unit_price: Float }

          class AccessAmount < MetronomeSDK::BaseModel
            attr_accessor credit_type_id: String

            attr_accessor quantity: Float

            attr_accessor unit_price: Float

            def initialize:
              (
                credit_type_id: String,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::access_amount
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::access_amount
          end

          type commit_duration =
            {
              unit: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::CommitDuration::unit,
              value: Float
            }

          class CommitDuration < MetronomeSDK::BaseModel
            attr_accessor unit: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::CommitDuration::unit

            attr_accessor value: Float

            def initialize:
              (
                unit: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::CommitDuration::unit,
                value: Float
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::commit_duration
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::commit_duration

            type unit = :PERIODS

            class Unit < MetronomeSDK::Enum
              PERIODS: :PERIODS

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::CommitDuration::unit]
            end
          end

          type invoice_amount =
            { credit_type_id: String, quantity: Float, unit_price: Float }

          class InvoiceAmount < MetronomeSDK::BaseModel
            attr_accessor credit_type_id: String

            attr_accessor quantity: Float

            attr_accessor unit_price: Float

            def initialize:
              (
                credit_type_id: String,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::invoice_amount
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::invoice_amount
          end

          type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

          class Proration < MetronomeSDK::Enum
            NONE: :NONE
            FIRST: :FIRST
            LAST: :LAST
            FIRST_AND_LAST: :FIRST_AND_LAST

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::proration]
          end

          type rate_type = :COMMIT_RATE | :LIST_RATE

          class RateType < MetronomeSDK::Enum
            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::rate_type]
          end

          type recurrence_frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

          class RecurrenceFrequency < MetronomeSDK::Enum
            MONTHLY: :MONTHLY
            QUARTERLY: :QUARTERLY
            ANNUAL: :ANNUAL
            WEEKLY: :WEEKLY

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCommit::recurrence_frequency]
          end
        end

        type recurring_credit =
          {
            access_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::AccessAmount,
            commit_duration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::CommitDuration,
            priority: Float,
            product_id: String,
            starting_at: Time,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            description: String,
            ending_before: Time,
            name: String,
            netsuite_sales_order_id: String,
            proration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::proration,
            rate_type: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::rate_type,
            recurrence_frequency: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::recurrence_frequency,
            rollover_fraction: Float,
            temporary_id: String
          }

        class RecurringCredit < MetronomeSDK::BaseModel
          attr_accessor access_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::AccessAmount

          attr_accessor commit_duration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::CommitDuration

          attr_accessor priority: Float

          attr_accessor product_id: String

          attr_accessor starting_at: Time

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader description: String?

          def description=: (String) -> String

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          attr_reader proration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::proration?

          def proration=: (
            MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::proration
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::proration

          attr_reader rate_type: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::rate_type?

          def rate_type=: (
            MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::rate_type
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::rate_type

          attr_reader recurrence_frequency: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::recurrence_frequency?

          def recurrence_frequency=: (
            MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::recurrence_frequency
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::recurrence_frequency

          attr_reader rollover_fraction: Float?

          def rollover_fraction=: (Float) -> Float

          attr_reader temporary_id: String?

          def temporary_id=: (String) -> String

          def initialize:
            (
              access_amount: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::AccessAmount,
              commit_duration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::CommitDuration,
              priority: Float,
              product_id: String,
              starting_at: Time,
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              description: String,
              ending_before: Time,
              name: String,
              netsuite_sales_order_id: String,
              proration: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::proration,
              rate_type: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::rate_type,
              recurrence_frequency: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::recurrence_frequency,
              rollover_fraction: Float,
              temporary_id: String
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::recurring_credit
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::recurring_credit

          type access_amount =
            { credit_type_id: String, quantity: Float, unit_price: Float }

          class AccessAmount < MetronomeSDK::BaseModel
            attr_accessor credit_type_id: String

            attr_accessor quantity: Float

            attr_accessor unit_price: Float

            def initialize:
              (
                credit_type_id: String,
                quantity: Float,
                unit_price: Float
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::access_amount
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::access_amount
          end

          type commit_duration =
            {
              unit: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::CommitDuration::unit,
              value: Float
            }

          class CommitDuration < MetronomeSDK::BaseModel
            attr_accessor unit: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::CommitDuration::unit

            attr_accessor value: Float

            def initialize:
              (
                unit: MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::CommitDuration::unit,
                value: Float
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::commit_duration
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::commit_duration

            type unit = :PERIODS

            class Unit < MetronomeSDK::Enum
              PERIODS: :PERIODS

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::CommitDuration::unit]
            end
          end

          type proration = :NONE | :FIRST | :LAST | :FIRST_AND_LAST

          class Proration < MetronomeSDK::Enum
            NONE: :NONE
            FIRST: :FIRST
            LAST: :LAST
            FIRST_AND_LAST: :FIRST_AND_LAST

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::proration]
          end

          type rate_type = :COMMIT_RATE | :LIST_RATE

          class RateType < MetronomeSDK::Enum
            COMMIT_RATE: :COMMIT_RATE
            LIST_RATE: :LIST_RATE

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::rate_type]
          end

          type recurrence_frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

          class RecurrenceFrequency < MetronomeSDK::Enum
            MONTHLY: :MONTHLY
            QUARTERLY: :QUARTERLY
            ANNUAL: :ANNUAL
            WEEKLY: :WEEKLY

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::RecurringCredit::recurrence_frequency]
          end
        end

        type reseller_royalty =
          {
            fraction: Float,
            netsuite_reseller_id: String,
            reseller_type: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::reseller_type,
            starting_at: Time,
            applicable_product_ids: ::Array[String],
            applicable_product_tags: ::Array[String],
            aws_options: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::AwsOptions,
            ending_before: Time,
            gcp_options: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::GcpOptions,
            reseller_contract_value: Float
          }

        class ResellerRoyalty < MetronomeSDK::BaseModel
          attr_accessor fraction: Float

          attr_accessor netsuite_reseller_id: String

          attr_accessor reseller_type: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::reseller_type

          attr_accessor starting_at: Time

          attr_reader applicable_product_ids: ::Array[String]?

          def applicable_product_ids=: (::Array[String]) -> ::Array[String]

          attr_reader applicable_product_tags: ::Array[String]?

          def applicable_product_tags=: (::Array[String]) -> ::Array[String]

          attr_reader aws_options: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::AwsOptions?

          def aws_options=: (
            MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::AwsOptions
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::AwsOptions

          attr_reader ending_before: Time?

          def ending_before=: (Time) -> Time

          attr_reader gcp_options: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::GcpOptions?

          def gcp_options=: (
            MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::GcpOptions
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::GcpOptions

          attr_reader reseller_contract_value: Float?

          def reseller_contract_value=: (Float) -> Float

          def initialize:
            (
              fraction: Float,
              netsuite_reseller_id: String,
              reseller_type: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::reseller_type,
              starting_at: Time,
              applicable_product_ids: ::Array[String],
              applicable_product_tags: ::Array[String],
              aws_options: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::AwsOptions,
              ending_before: Time,
              gcp_options: MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::GcpOptions,
              reseller_contract_value: Float
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::reseller_royalty
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::reseller_royalty

          type reseller_type = :AWS | :AWS_PRO_SERVICE | :GCP | :GCP_PRO_SERVICE

          class ResellerType < MetronomeSDK::Enum
            AWS: :AWS
            AWS_PRO_SERVICE: :AWS_PRO_SERVICE
            GCP: :GCP
            GCP_PRO_SERVICE: :GCP_PRO_SERVICE

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::reseller_type]
          end

          type aws_options =
            {
              aws_account_number: String,
              aws_offer_id: String,
              aws_payer_reference_id: String
            }

          class AwsOptions < MetronomeSDK::BaseModel
            attr_reader aws_account_number: String?

            def aws_account_number=: (String) -> String

            attr_reader aws_offer_id: String?

            def aws_offer_id=: (String) -> String

            attr_reader aws_payer_reference_id: String?

            def aws_payer_reference_id=: (String) -> String

            def initialize:
              (
                aws_account_number: String,
                aws_offer_id: String,
                aws_payer_reference_id: String
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::aws_options
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::aws_options
          end

          type gcp_options = { gcp_account_id: String, gcp_offer_id: String }

          class GcpOptions < MetronomeSDK::BaseModel
            attr_reader gcp_account_id: String?

            def gcp_account_id=: (String) -> String

            attr_reader gcp_offer_id: String?

            def gcp_offer_id=: (String) -> String

            def initialize:
              (gcp_account_id: String, gcp_offer_id: String) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::gcp_options
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::ResellerRoyalty::gcp_options
          end
        end

        type scheduled_charge =
          {
            product_id: String,
            schedule: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule,
            name: String,
            netsuite_sales_order_id: String
          }

        class ScheduledCharge < MetronomeSDK::BaseModel
          attr_accessor product_id: String

          attr_accessor schedule: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader netsuite_sales_order_id: String?

          def netsuite_sales_order_id=: (String) -> String

          def initialize:
            (
              product_id: String,
              schedule: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule,
              name: String,
              netsuite_sales_order_id: String
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::scheduled_charge
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::scheduled_charge

          type schedule =
            {
              credit_type_id: String,
              recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule,
              schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::ScheduleItem]
            }

          class Schedule < MetronomeSDK::BaseModel
            attr_reader credit_type_id: String?

            def credit_type_id=: (String) -> String

            attr_reader recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule?

            def recurring_schedule=: (
              MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule

            attr_reader schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::ScheduleItem]?

            def schedule_items=: (
              ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::ScheduleItem]
            ) -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::ScheduleItem]

            def initialize:
              (
                credit_type_id: String,
                recurring_schedule: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule,
                schedule_items: ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::ScheduleItem]
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::schedule
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::schedule

            type recurring_schedule =
              {
                amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule::amount_distribution,
                ending_before: Time,
                frequency: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule::frequency,
                starting_at: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class RecurringSchedule < MetronomeSDK::BaseModel
              attr_accessor amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule::amount_distribution

              attr_accessor ending_before: Time

              attr_accessor frequency: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule::frequency

              attr_accessor starting_at: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize:
                (
                  amount_distribution: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule::amount_distribution,
                  ending_before: Time,
                  frequency: MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule::frequency,
                  starting_at: Time,
                  amount: Float,
                  quantity: Float,
                  unit_price: Float
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::recurring_schedule
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::recurring_schedule

              type amount_distribution = :DIVIDED | :DIVIDED_ROUNDED | :EACH

              class AmountDistribution < MetronomeSDK::Enum
                DIVIDED: :DIVIDED
                DIVIDED_ROUNDED: :DIVIDED_ROUNDED
                EACH: :EACH

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule::amount_distribution]
              end

              type frequency = :MONTHLY | :QUARTERLY | :SEMI_ANNUAL | :ANNUAL

              class Frequency < MetronomeSDK::Enum
                MONTHLY: :MONTHLY
                QUARTERLY: :QUARTERLY
                SEMI_ANNUAL: :SEMI_ANNUAL
                ANNUAL: :ANNUAL

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::RecurringSchedule::frequency]
              end
            end

            type schedule_item =
              {
                timestamp: Time,
                amount: Float,
                quantity: Float,
                unit_price: Float
              }

            class ScheduleItem < MetronomeSDK::BaseModel
              attr_accessor timestamp: Time

              attr_reader amount: Float?

              def amount=: (Float) -> Float

              attr_reader quantity: Float?

              def quantity=: (Float) -> Float

              attr_reader unit_price: Float?

              def unit_price=: (Float) -> Float

              def initialize:
                (
                  timestamp: Time,
                  amount: Float,
                  quantity: Float,
                  unit_price: Float
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::schedule_item
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::ScheduledCharge::Schedule::schedule_item
            end
          end
        end

        type scheduled_charges_on_usage_invoices = :ALL

        class ScheduledChargesOnUsageInvoices < MetronomeSDK::Enum
          ALL: :ALL

          def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::scheduled_charges_on_usage_invoices]
        end

        type spend_threshold_configuration =
          {
            commit: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::Commit,
            is_enabled: bool,
            payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig,
            threshold_amount: Float
          }

        class SpendThresholdConfiguration < MetronomeSDK::BaseModel
          attr_accessor commit: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::Commit

          attr_accessor is_enabled: bool

          attr_accessor payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig

          attr_accessor threshold_amount: Float

          def initialize:
            (
              commit: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::Commit,
              is_enabled: bool,
              payment_gate_config: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig,
              threshold_amount: Float
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::spend_threshold_configuration
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::spend_threshold_configuration

          type commit =
            { product_id: String, description: String, name: String }

          class Commit < MetronomeSDK::BaseModel
            attr_accessor product_id: String

            attr_reader description: String?

            def description=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            def initialize:
              (product_id: String, description: String, name: String) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::commit
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::commit
          end

          type payment_gate_config =
            {
              payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
              stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
              tax_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::tax_type
            }

          class PaymentGateConfig < MetronomeSDK::BaseModel
            attr_accessor payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type

            attr_reader stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig?

            def stripe_config=: (
              MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig

            attr_reader tax_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::tax_type?

            def tax_type=: (
              MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::tax_type
            ) -> MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::tax_type

            def initialize:
              (
                payment_gate_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type,
                stripe_config: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig,
                tax_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::tax_type
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::payment_gate_config
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::payment_gate_config

            type payment_gate_type = :NONE | :STRIPE | :EXTERNAL

            class PaymentGateType < MetronomeSDK::Enum
              NONE: :NONE
              STRIPE: :STRIPE
              EXTERNAL: :EXTERNAL

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::payment_gate_type]
            end

            type stripe_config =
              {
                payment_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
              }

            class StripeConfig < MetronomeSDK::BaseModel
              attr_accessor payment_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type

              def initialize:
                (
                  payment_type: MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::stripe_config
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::stripe_config

              type payment_type = :INVOICE | :PAYMENT_INTENT

              class PaymentType < MetronomeSDK::Enum
                INVOICE: :INVOICE
                PAYMENT_INTENT: :PAYMENT_INTENT

                def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::StripeConfig::payment_type]
              end
            end

            type tax_type = :NONE | :STRIPE

            class TaxType < MetronomeSDK::Enum
              NONE: :NONE
              STRIPE: :STRIPE

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::SpendThresholdConfiguration::PaymentGateConfig::tax_type]
            end
          end
        end

        type transition =
          {
            from_contract_id: String,
            type: MetronomeSDK::Models::V1::ContractCreateParams::Transition::type_,
            future_invoice_behavior: MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior
          }

        class Transition < MetronomeSDK::BaseModel
          attr_accessor from_contract_id: String

          attr_accessor type: MetronomeSDK::Models::V1::ContractCreateParams::Transition::type_

          attr_reader future_invoice_behavior: MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior?

          def future_invoice_behavior=: (
            MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior

          def initialize:
            (
              from_contract_id: String,
              type: MetronomeSDK::Models::V1::ContractCreateParams::Transition::type_,
              future_invoice_behavior: MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::transition
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::transition

          type type_ = :SUPERSEDE | :RENEWAL

          class Type < MetronomeSDK::Enum
            SUPERSEDE: :SUPERSEDE
            RENEWAL: :RENEWAL

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Transition::type_]
          end

          type future_invoice_behavior =
            {
              trueup: MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior::trueup?
            }

          class FutureInvoiceBehavior < MetronomeSDK::BaseModel
            attr_accessor trueup: MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior::trueup?

            def initialize:
              (
                trueup: MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior::trueup?
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::ContractCreateParams::Transition::future_invoice_behavior
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::Transition::future_invoice_behavior

            type trueup = :REMOVE | :AS_IS

            class Trueup < MetronomeSDK::Enum
              REMOVE: :REMOVE
              AS_IS: :AS_IS

              def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::Transition::FutureInvoiceBehavior::trueup]
            end
          end
        end

        type usage_statement_schedule =
          {
            frequency: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::frequency,
            billing_anchor_date: Time,
            day: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::day,
            invoice_generation_starting_at: Time
          }

        class UsageStatementSchedule < MetronomeSDK::BaseModel
          attr_accessor frequency: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::frequency

          attr_reader billing_anchor_date: Time?

          def billing_anchor_date=: (Time) -> Time

          attr_reader day: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::day?

          def day=: (
            MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::day
          ) -> MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::day

          attr_reader invoice_generation_starting_at: Time?

          def invoice_generation_starting_at=: (Time) -> Time

          def initialize:
            (
              frequency: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::frequency,
              billing_anchor_date: Time,
              day: MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::day,
              invoice_generation_starting_at: Time
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::ContractCreateParams::usage_statement_schedule
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::ContractCreateParams::usage_statement_schedule

          type frequency = :MONTHLY | :QUARTERLY | :ANNUAL | :WEEKLY

          class Frequency < MetronomeSDK::Enum
            MONTHLY: :MONTHLY
            QUARTERLY: :QUARTERLY
            ANNUAL: :ANNUAL
            WEEKLY: :WEEKLY

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::frequency]
          end

          type day = :FIRST_OF_MONTH | :CONTRACT_START | :CUSTOM_DATE

          class Day < MetronomeSDK::Enum
            FIRST_OF_MONTH: :FIRST_OF_MONTH
            CONTRACT_START: :CONTRACT_START
            CUSTOM_DATE: :CUSTOM_DATE

            def self.values: -> ::Array[MetronomeSDK::Models::V1::ContractCreateParams::UsageStatementSchedule::day]
          end
        end
      end
    end
  end
end
