module MetronomeSDK
  module Models
    module V1
      type credit_grant_list_entries_response =
        {
          data: ::Array[MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data],
          next_page: String?
        }

      class CreditGrantListEntriesResponse < MetronomeSDK::BaseModel
        attr_accessor data: ::Array[MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data]

        attr_accessor next_page: String?

        def initialize:
          (
            data: ::Array[MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data],
            next_page: String?
          ) -> void
          | (
            ?MetronomeSDK::Models::V1::credit_grant_list_entries_response
            | MetronomeSDK::BaseModel data
          ) -> void

        def to_hash: -> MetronomeSDK::Models::V1::credit_grant_list_entries_response

        type data =
          {
            customer_id: String,
            ledgers: ::Array[MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger]
          }

        class Data < MetronomeSDK::BaseModel
          attr_accessor customer_id: String

          attr_accessor ledgers: ::Array[MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger]

          def initialize:
            (
              customer_id: String,
              ledgers: ::Array[MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger]
            ) -> void
            | (
              ?MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::data
              | MetronomeSDK::BaseModel data
            ) -> void

          def to_hash: -> MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::data

          type ledger =
            {
              credit_type: MetronomeSDK::Models::CreditTypeData,
              ending_balance: MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::EndingBalance,
              entries: ::Array[MetronomeSDK::Models::V1::CreditLedgerEntry],
              pending_entries: ::Array[MetronomeSDK::Models::V1::CreditLedgerEntry],
              starting_balance: MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::StartingBalance
            }

          class Ledger < MetronomeSDK::BaseModel
            attr_accessor credit_type: MetronomeSDK::Models::CreditTypeData

            attr_accessor ending_balance: MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::EndingBalance

            attr_accessor entries: ::Array[MetronomeSDK::Models::V1::CreditLedgerEntry]

            attr_accessor pending_entries: ::Array[MetronomeSDK::Models::V1::CreditLedgerEntry]

            attr_accessor starting_balance: MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::StartingBalance

            def initialize:
              (
                credit_type: MetronomeSDK::Models::CreditTypeData,
                ending_balance: MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::EndingBalance,
                entries: ::Array[MetronomeSDK::Models::V1::CreditLedgerEntry],
                pending_entries: ::Array[MetronomeSDK::Models::V1::CreditLedgerEntry],
                starting_balance: MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::StartingBalance
              ) -> void
              | (
                ?MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::ledger
                | MetronomeSDK::BaseModel data
              ) -> void

            def to_hash: -> MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::ledger

            type ending_balance =
              {
                effective_at: Time,
                excluding_pending: Float,
                including_pending: Float
              }

            class EndingBalance < MetronomeSDK::BaseModel
              attr_accessor effective_at: Time

              attr_accessor excluding_pending: Float

              attr_accessor including_pending: Float

              def initialize:
                (
                  effective_at: Time,
                  excluding_pending: Float,
                  including_pending: Float
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::ending_balance
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::ending_balance
            end

            type starting_balance =
              {
                effective_at: Time,
                excluding_pending: Float,
                including_pending: Float
              }

            class StartingBalance < MetronomeSDK::BaseModel
              attr_accessor effective_at: Time

              attr_accessor excluding_pending: Float

              attr_accessor including_pending: Float

              def initialize:
                (
                  effective_at: Time,
                  excluding_pending: Float,
                  including_pending: Float
                ) -> void
                | (
                  ?MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::starting_balance
                  | MetronomeSDK::BaseModel data
                ) -> void

              def to_hash: -> MetronomeSDK::Models::V1::CreditGrantListEntriesResponse::Data::Ledger::starting_balance
            end
          end
        end
      end
    end
  end
end
