module MetronomeSDK
  module Models
    module V1
      type customer =
        {
          id: String,
          external_id: String,
          ingest_aliases: ::Array[String],
          name: String,
          custom_fields: ::Hash[Symbol, String]
        }

      class Customer < MetronomeSDK::BaseModel
        attr_accessor id: String

        attr_accessor external_id: String

        attr_accessor ingest_aliases: ::Array[String]

        attr_accessor name: String

        attr_reader custom_fields: ::Hash[Symbol, String]?

        def custom_fields=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        def initialize:
          (
            id: String,
            external_id: String,
            ingest_aliases: ::Array[String],
            name: String,
            custom_fields: ::Hash[Symbol, String]
          ) -> void
          | (
            ?MetronomeSDK::Models::V1::customer | MetronomeSDK::BaseModel data
          ) -> void

        def to_hash: -> MetronomeSDK::Models::V1::customer
      end
    end
  end
end
